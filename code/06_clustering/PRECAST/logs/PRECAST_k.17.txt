Adding LIBD modules
Loading git
Loading LIBD module for git-status-size/github
Loading LIBD module for git-lfs/2.8.0
Loading LIBD module for rmate/1.5.9
Loading LIBD module for ruby/2.6.4p104
Loading conda_R/4.1.x
**** Job starts ****
Wed Nov  2 15:31:03 EDT 2022
**** JHPCE info ****
User: mtippani
Job id: 621925
Job name: PRECAST_k16-20
Hostname: compute-093.cm.cluster
Task id: 17
Unloading conda_R/4.1.x
Loading conda_R/devel

The following have been reloaded with a version change:
  1) conda_R/4.1.x => conda_R/devel


Currently Loaded Modules:
  1) matlab/R2019a     6) COMMUNITY_CENTOS7_DEFAULT_ENV  11) ruby/2.6.4p104
  2) stata/17          7) JHPCE_CENTOS7_DEFAULT_ENV      12) rmate/1.5.9
  3) JHPCE_tools/1.0   8) git-status-size/github         13) conda/3-4.6.14
  4) sge/8.1.9         9) git/2.28.0                     14) conda_R/devel
  5) gcc/4.4.7        10) git-lfs/2.8.0

 

Filter spots and features from Raw count data...
 
 
Calculating gene variances
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Calculating feature variances of standardized and clipped values
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Find the spatially variables genes by SPARK-X...

## ===== SPARK-X INPUT INFORMATION ====
## number of total samples: 14172
## number of total genes: 5000
## Running with single core, may take some time 

## Testing With Projection Kernel
## Testing With Gaussian Kernel 1
## Testing With Gaussian Kernel 2
## Testing With Gaussian Kernel 3
## Testing With Gaussian Kernel 4
## Testing With Gaussian Kernel 5
## Testing With Cosine Kernel 1
## Testing With Cosine Kernel 2
## Testing With Cosine Kernel 3
## Testing With Cosine Kernel 4
## Testing With Cosine Kernel 5
Calculating gene variances
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Calculating feature variances of standardized and clipped values
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Find the spatially variables genes by SPARK-X...

## ===== SPARK-X INPUT INFORMATION ====
## number of total samples: 19762
## number of total genes: 5000
## Running with single core, may take some time 

## Testing With Projection Kernel
## Testing With Gaussian Kernel 1
## Testing With Gaussian Kernel 2
## Testing With Gaussian Kernel 3
## Testing With Gaussian Kernel 4
## Testing With Gaussian Kernel 5
## Testing With Cosine Kernel 1
## Testing With Cosine Kernel 2
## Testing With Cosine Kernel 3
## Testing With Cosine Kernel 4
## Testing With Cosine Kernel 5
Calculating gene variances
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Calculating feature variances of standardized and clipped values
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Find the spatially variables genes by SPARK-X...

## ===== SPARK-X INPUT INFORMATION ====
## number of total samples: 14117
## number of total genes: 5000
## Running with single core, may take some time 

## Testing With Projection Kernel
## Testing With Gaussian Kernel 1
## Testing With Gaussian Kernel 2
## Testing With Gaussian Kernel 3
## Testing With Gaussian Kernel 4
## Testing With Gaussian Kernel 5
## Testing With Cosine Kernel 1
## Testing With Cosine Kernel 2
## Testing With Cosine Kernel 3
## Testing With Cosine Kernel 4
## Testing With Cosine Kernel 5
Calculating gene variances
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Calculating feature variances of standardized and clipped values
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Find the spatially variables genes by SPARK-X...

## ===== SPARK-X INPUT INFORMATION ====
## number of total samples: 8670
## number of total genes: 5000
## Running with single core, may take some time 

## Testing With Projection Kernel
## Testing With Gaussian Kernel 1
## Testing With Gaussian Kernel 2
## Testing With Gaussian Kernel 3
## Testing With Gaussian Kernel 4
## Testing With Gaussian Kernel 5
## Testing With Cosine Kernel 1
## Testing With Cosine Kernel 2
## Testing With Cosine Kernel 3
## Testing With Cosine Kernel 4
## Testing With Cosine Kernel 5
Calculating gene variances
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Calculating feature variances of standardized and clipped values
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Find the spatially variables genes by SPARK-X...

## ===== SPARK-X INPUT INFORMATION ====
## number of total samples: 14400
## number of total genes: 5000
## Running with single core, may take some time 

## Testing With Projection Kernel
## Testing With Gaussian Kernel 1
## Testing With Gaussian Kernel 2
## Testing With Gaussian Kernel 3
## Testing With Gaussian Kernel 4
## Testing With Gaussian Kernel 5
## Testing With Cosine Kernel 1
## Testing With Cosine Kernel 2
## Testing With Cosine Kernel 3
## Testing With Cosine Kernel 4
## Testing With Cosine Kernel 5
Calculating gene variances
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Calculating feature variances of standardized and clipped values
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Find the spatially variables genes by SPARK-X...

## ===== SPARK-X INPUT INFORMATION ====
## number of total samples: 18746
## number of total genes: 5000
## Running with single core, may take some time 

## Testing With Projection Kernel
## Testing With Gaussian Kernel 1
## Testing With Gaussian Kernel 2
## Testing With Gaussian Kernel 3
## Testing With Gaussian Kernel 4
## Testing With Gaussian Kernel 5
## Testing With Cosine Kernel 1
## Testing With Cosine Kernel 2
## Testing With Cosine Kernel 3
## Testing With Cosine Kernel 4
## Testing With Cosine Kernel 5
Calculating gene variances
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Calculating feature variances of standardized and clipped values
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Find the spatially variables genes by SPARK-X...

## ===== SPARK-X INPUT INFORMATION ====
## number of total samples: 20693
## number of total genes: 5000
## Running with single core, may take some time 

## Testing With Projection Kernel
## Testing With Gaussian Kernel 1
## Testing With Gaussian Kernel 2
## Testing With Gaussian Kernel 3
## Testing With Gaussian Kernel 4
## Testing With Gaussian Kernel 5
## Testing With Cosine Kernel 1
## Testing With Cosine Kernel 2
## Testing With Cosine Kernel 3
## Testing With Cosine Kernel 4
## Testing With Cosine Kernel 5
Calculating gene variances
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Calculating feature variances of standardized and clipped values
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Find the spatially variables genes by SPARK-X...

## ===== SPARK-X INPUT INFORMATION ====
## number of total samples: 8390
## number of total genes: 5000
## Running with single core, may take some time 

## Testing With Projection Kernel
## Testing With Gaussian Kernel 1
## Testing With Gaussian Kernel 2
## Testing With Gaussian Kernel 3
## Testing With Gaussian Kernel 4
## Testing With Gaussian Kernel 5
## Testing With Cosine Kernel 1
## Testing With Cosine Kernel 2
## Testing With Cosine Kernel 3
## Testing With Cosine Kernel 4
## Testing With Cosine Kernel 5
Calculating gene variances
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Calculating feature variances of standardized and clipped values
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Find the spatially variables genes by SPARK-X...

## ===== SPARK-X INPUT INFORMATION ====
## number of total samples: 18159
## number of total genes: 5000
## Running with single core, may take some time 

## Testing With Projection Kernel
## Testing With Gaussian Kernel 1
## Testing With Gaussian Kernel 2
## Testing With Gaussian Kernel 3
## Testing With Gaussian Kernel 4
## Testing With Gaussian Kernel 5
## Testing With Cosine Kernel 1
## Testing With Cosine Kernel 2
## Testing With Cosine Kernel 3
## Testing With Cosine Kernel 4
## Testing With Cosine Kernel 5
Select common top variable genes  for multiple samples...
Filter spots and features from SVGs(HVGs) count data...
Performing log-normalization
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Performing log-normalization
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Performing log-normalization
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Performing log-normalization
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Performing log-normalization
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Performing log-normalization
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Performing log-normalization
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Performing log-normalization
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Performing log-normalization
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Warning messages:
1: In FUN(newX[, i], ...) : There are p-values that are exactly 1!
2: In FUN(newX[, i], ...) : There are p-values that are exactly 1!
[[1]]
An object of class Seurat 
2000 features across 14143 samples within 1 assay 
Active assay: RNA (2000 features, 1397 variable features)

[[2]]
An object of class Seurat 
2000 features across 19678 samples within 1 assay 
Active assay: RNA (2000 features, 1541 variable features)

[[3]]
An object of class Seurat 
2000 features across 14104 samples within 1 assay 
Active assay: RNA (2000 features, 1447 variable features)

[[4]]
An object of class Seurat 
2000 features across 8662 samples within 1 assay 
Active assay: RNA (2000 features, 1374 variable features)

[[5]]
An object of class Seurat 
2000 features across 14390 samples within 1 assay 
Active assay: RNA (2000 features, 1495 variable features)

[[6]]
An object of class Seurat 
2000 features across 18709 samples within 1 assay 
Active assay: RNA (2000 features, 1159 variable features)

[[7]]
An object of class Seurat 
2000 features across 20614 samples within 1 assay 
Active assay: RNA (2000 features, 1612 variable features)

[[8]]
An object of class Seurat 
2000 features across 8389 samples within 1 assay 
Active assay: RNA (2000 features, 1200 variable features)

[[9]]
An object of class Seurat 
2000 features across 18041 samples within 1 assay 
Active assay: RNA (2000 features, 1385 variable features)

Neighbors were identified for 14143 out of 14143 spots.
Neighbors were identified for 19678 out of 19678 spots.
Neighbors were identified for 14104 out of 14104 spots.
Neighbors were identified for 8662 out of 8662 spots.
Neighbors were identified for 14390 out of 14390 spots.
Neighbors were identified for 18709 out of 18709 spots.
Neighbors were identified for 20611 out of 20614 spots.
Neighbors were identified for 8389 out of 8389 spots.
Neighbors were identified for 18038 out of 18041 spots.
Intergrative data info.: 9 samples, 2000 genes X 136730 spots------
PRECAST model setting: error_heter=TRUE, Sigma_equal=FALSE, Sigma_diag=TRUE, mix_prop_heter=TRUE
Start computing intial values... 

fitting ...
  |                                                                              |                                                                      |   0%  |                                                                              |===================================                                   |  50%  |                                                                              |======================================================================| 100%
----Fitting PRECAST model----------------

variable initialize finish! 
predict Y and V! 
diff Energy = 16.829582 
diff Energy = 40.656435 
diff Energy = 9.308380 
diff Energy = 22.682739 
Finish ICM step! 
iter = 2, loglik= -69748984.000000, dloglik=0.967521 
predict Y and V! 
diff Energy = 106.378902 
diff Energy = 13.048174 
diff Energy = 26.273220 
diff Energy = 23.685797 
diff Energy = 116.322013 
diff Energy = 36.003480 
diff Energy = 88.755434 
diff Energy = 79.307050 
Finish ICM step! 
iter = 3, loglik= -68943224.000000, dloglik=0.011552 
predict Y and V! 
diff Energy = 326.643669 
diff Energy = 343.719869 
diff Energy = 263.180164 
diff Energy = 265.224581 
diff Energy = 416.682702 
diff Energy = 59.313493 
diff Energy = 391.779283 
diff Energy = 221.200531 
diff Energy = 465.484416 
Finish ICM step! 
iter = 4, loglik= -68641072.000000, dloglik=0.004383 
predict Y and V! 
diff Energy = 139.231564 
diff Energy = 108.337106 
diff Energy = 125.727630 
diff Energy = 85.776122 
diff Energy = 174.693252 
diff Energy = 193.898828 
diff Energy = 108.069579 
diff Energy = 193.243892 
Finish ICM step! 
iter = 5, loglik= -68468752.000000, dloglik=0.002510 
predict Y and V! 
diff Energy = 102.931360 
diff Energy = 103.588410 
diff Energy = 71.937484 
diff Energy = 103.225038 
diff Energy = 151.705217 
diff Energy = 25.105670 
diff Energy = 131.947266 
diff Energy = 78.824126 
diff Energy = 136.907552 
Finish ICM step! 
iter = 6, loglik= -68364008.000000, dloglik=0.001530 
predict Y and V! 
diff Energy = 84.101726 
diff Energy = 49.999193 
diff Energy = 73.117757 
diff Energy = 72.891518 
diff Energy = 117.498719 
diff Energy = 8.180952 
diff Energy = 87.079483 
diff Energy = 27.135823 
diff Energy = 111.408649 
Finish ICM step! 
iter = 7, loglik= -68294760.000000, dloglik=0.001013 
predict Y and V! 
diff Energy = 78.834772 
diff Energy = 101.030185 
diff Energy = 83.441956 
diff Energy = 37.191843 
diff Energy = 21.511544 
diff Energy = 11.641507 
diff Energy = 111.665963 
diff Energy = 54.609132 
diff Energy = 23.792302 
Finish ICM step! 
iter = 8, loglik= -68244720.000000, dloglik=0.000733 
predict Y and V! 
diff Energy = 50.247361 
diff Energy = 4.679107 
diff Energy = 39.412464 
diff Energy = 2.842744 
diff Energy = 15.982016 
diff Energy = 0.680258 
diff Energy = 70.086701 
diff Energy = 34.395753 
diff Energy = 6.379317 
Finish ICM step! 
iter = 9, loglik= -68207096.000000, dloglik=0.000551 
predict Y and V! 
diff Energy = 30.677519 
diff Energy = 7.401218 
diff Energy = 7.506220 
diff Energy = 18.569277 
diff Energy = 48.466328 
diff Energy = 16.477935 
diff Energy = 29.981577 
diff Energy = 17.934379 
diff Energy = 8.887136 
Finish ICM step! 
iter = 10, loglik= -68178808.000000, dloglik=0.000415 
predict Y and V! 
diff Energy = 37.404610 
diff Energy = 3.389581 
diff Energy = 26.732246 
diff Energy = 20.403168 
diff Energy = 50.182386 
diff Energy = 9.263693 
diff Energy = 33.729824 
diff Energy = 8.946404 
diff Energy = 16.173628 
Finish ICM step! 
iter = 11, loglik= -68157016.000000, dloglik=0.000320 
predict Y and V! 
diff Energy = 29.061563 
diff Energy = 10.544356 
diff Energy = 25.001743 
diff Energy = 2.775672 
diff Energy = 31.960719 
diff Energy = 12.561240 
diff Energy = 10.325574 
diff Energy = 6.486908 
diff Energy = 81.971628 
Finish ICM step! 
iter = 12, loglik= -68140224.000000, dloglik=0.000246 
predict Y and V! 
diff Energy = 16.949202 
diff Energy = 0.561274 
diff Energy = 19.447432 
diff Energy = 32.773017 
diff Energy = 42.259723 
diff Energy = 3.038238 
diff Energy = 19.285759 
diff Energy = 9.611422 
diff Energy = 5.261613 
Finish ICM step! 
iter = 13, loglik= -68126448.000000, dloglik=0.000202 
predict Y and V! 
diff Energy = 12.631274 
diff Energy = 7.523821 
diff Energy = 7.359677 
diff Energy = 5.897166 
diff Energy = 35.289083 
diff Energy = 6.808384 
diff Energy = 16.045291 
diff Energy = 18.731407 
diff Energy = 1.107355 
Finish ICM step! 
iter = 14, loglik= -68115272.000000, dloglik=0.000164 
predict Y and V! 
diff Energy = 8.973297 
diff Energy = 6.175177 
diff Energy = 1.331620 
diff Energy = 1.965923 
diff Energy = 20.218586 
diff Energy = 6.224449 
diff Energy = 38.122363 
diff Energy = 4.176255 
diff Energy = 5.966528 
Finish ICM step! 
iter = 15, loglik= -68105624.000000, dloglik=0.000142 
predict Y and V! 
diff Energy = 22.764199 
diff Energy = 8.787969 
diff Energy = 1.510278 
diff Energy = 9.897928 
diff Energy = 17.105121 
diff Energy = 7.067557 
diff Energy = 1.751205 
diff Energy = 53.326586 
diff Energy = 3.682815 
Finish ICM step! 
iter = 16, loglik= -68097608.000000, dloglik=0.000118 
predict Y and V! 
diff Energy = 6.368079 
diff Energy = 90.036849 
diff Energy = 15.530276 
diff Energy = 9.996666 
diff Energy = 11.769825 
diff Energy = 10.081212 
diff Energy = 8.204432 
diff Energy = 19.314783 
Finish ICM step! 
iter = 17, loglik= -68090208.000000, dloglik=0.000109 
predict Y and V! 
diff Energy = 2.679354 
diff Energy = 7.095934 
diff Energy = 5.563474 
diff Energy = 2.269741 
diff Energy = 26.135460 
diff Energy = 5.552022 
diff Energy = 13.728665 
diff Energy = 6.244648 
diff Energy = 4.433782 
Finish ICM step! 
iter = 18, loglik= -68083768.000000, dloglik=0.000095 
predict Y and V! 
diff Energy = 0.901563 
diff Energy = 6.948230 
diff Energy = 4.355996 
diff Energy = 31.243566 
diff Energy = 7.992219 
diff Energy = 18.735896 
diff Energy = 10.702042 
Finish ICM step! 
iter = 19, loglik= -68077520.000000, dloglik=0.000092 
predict Y and V! 
diff Energy = 3.221936 
diff Energy = 0.792168 
diff Energy = 7.737158 
diff Energy = 6.703220 
diff Energy = 19.543658 
diff Energy = 11.654994 
diff Energy = 10.021762 
Finish ICM step! 
iter = 20, loglik= -68071392.000000, dloglik=0.000090 
predict Y and V! 
diff Energy = 0.363847 
diff Energy = 5.429688 
diff Energy = 3.857405 
diff Energy = 24.820779 
diff Energy = 0.926215 
diff Energy = 6.769600 
diff Energy = 7.167600 
diff Energy = 27.979160 
Finish ICM step! 
iter = 21, loglik= -68065448.000000, dloglik=0.000087 
predict Y and V! 
diff Energy = 8.481471 
diff Energy = 20.445961 
diff Energy = 1.607483 
diff Energy = 5.870163 
diff Energy = 17.914296 
diff Energy = 8.271878 
diff Energy = 4.654898 
diff Energy = 4.392534 
Finish ICM step! 
iter = 22, loglik= -68059648.000000, dloglik=0.000085 
predict Y and V! 
diff Energy = 6.126928 
diff Energy = 9.291357 
diff Energy = 14.326877 
diff Energy = 0.969499 
diff Energy = 8.436071 
diff Energy = 2.362744 
diff Energy = 6.283092 
Finish ICM step! 
iter = 23, loglik= -68053584.000000, dloglik=0.000089 
predict Y and V! 
diff Energy = 41.649907 
diff Energy = 1.731297 
diff Energy = 1.995503 
diff Energy = 31.530465 
diff Energy = 19.986729 
diff Energy = 12.489855 
diff Energy = 0.836879 
Finish ICM step! 
iter = 24, loglik= -68047192.000000, dloglik=0.000094 
predict Y and V! 
diff Energy = 1.074749 
diff Energy = 12.348424 
diff Energy = 13.801142 
diff Energy = 1.545479 
diff Energy = 4.984495 
diff Energy = 0.035960 
Finish ICM step! 
iter = 25, loglik= -68040464.000000, dloglik=0.000099 
predict Y and V! 
diff Energy = 6.784673 
diff Energy = 8.475907 
diff Energy = 0.819739 
diff Energy = 14.490457 
diff Energy = 0.152895 
diff Energy = 2.396518 
diff Energy = 21.975108 
Finish ICM step! 
iter = 26, loglik= -68033632.000000, dloglik=0.000100 
predict Y and V! 
diff Energy = 0.929485 
diff Energy = 1.199079 
diff Energy = 8.117946 
diff Energy = 2.258325 
diff Energy = 2.041000 
diff Energy = 6.870468 
Finish ICM step! 
iter = 27, loglik= -68026448.000000, dloglik=0.000106 
predict Y and V! 
diff Energy = 6.356732 
diff Energy = 0.500401 
diff Energy = 1.158212 
diff Energy = 0.428830 
diff Energy = 8.232600 
diff Energy = 3.036742 
diff Energy = 3.582272 
diff Energy = 10.715702 
Finish ICM step! 
iter = 28, loglik= -68019304.000000, dloglik=0.000105 
predict Y and V! 
diff Energy = 6.728159 
diff Energy = 10.479959 
diff Energy = 14.167656 
diff Energy = 11.484523 
diff Energy = 3.871912 
diff Energy = 0.461932 
diff Energy = 22.378989 
diff Energy = 14.624082 
Finish ICM step! 
iter = 29, loglik= -68012000.000000, dloglik=0.000107 
predict Y and V! 
diff Energy = 8.414871 
diff Energy = 0.037415 
diff Energy = 6.958952 
diff Energy = 0.537248 
diff Energy = 6.743464 
diff Energy = 33.456009 
diff Energy = 14.711667 
diff Energy = 2.860008 
Finish ICM step! 
iter = 30, loglik= -68004408.000000, dloglik=0.000112 
20665.092 sec elapsed
**** Job ends ****
Wed Nov  2 21:25:45 EDT 2022
