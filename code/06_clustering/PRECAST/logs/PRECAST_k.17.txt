Adding LIBD modules
Loading git
Loading LIBD module for git-status-size/github
Loading LIBD module for git-lfs/2.8.0
Loading LIBD module for rmate/1.5.9
Loading LIBD module for ruby/2.6.4p104
Loading conda_R/4.1.x
**** Job starts ****
Wed Nov  2 15:31:03 EDT 2022
**** JHPCE info ****
User: mtippani
Job id: 621925
Job name: PRECAST_k16-20
Hostname: compute-093.cm.cluster
Task id: 17
Unloading conda_R/4.1.x
Loading conda_R/devel

The following have been reloaded with a version change:
  1) conda_R/4.1.x => conda_R/devel


Currently Loaded Modules:
  1) matlab/R2019a     6) COMMUNITY_CENTOS7_DEFAULT_ENV  11) ruby/2.6.4p104
  2) stata/17          7) JHPCE_CENTOS7_DEFAULT_ENV      12) rmate/1.5.9
  3) JHPCE_tools/1.0   8) git-status-size/github         13) conda/3-4.6.14
  4) sge/8.1.9         9) git/2.28.0                     14) conda_R/devel
  5) gcc/4.4.7        10) git-lfs/2.8.0

 

Filter spots and features from Raw count data...
 
 
Calculating gene variances
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Calculating feature variances of standardized and clipped values
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Find the spatially variables genes by SPARK-X...

## ===== SPARK-X INPUT INFORMATION ====
## number of total samples: 14172
## number of total genes: 5000
## Running with single core, may take some time 

## Testing With Projection Kernel
## Testing With Gaussian Kernel 1
## Testing With Gaussian Kernel 2
## Testing With Gaussian Kernel 3
## Testing With Gaussian Kernel 4
## Testing With Gaussian Kernel 5
## Testing With Cosine Kernel 1
## Testing With Cosine Kernel 2
## Testing With Cosine Kernel 3
## Testing With Cosine Kernel 4
## Testing With Cosine Kernel 5
Calculating gene variances
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Calculating feature variances of standardized and clipped values
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Find the spatially variables genes by SPARK-X...

## ===== SPARK-X INPUT INFORMATION ====
## number of total samples: 19762
## number of total genes: 5000
## Running with single core, may take some time 

## Testing With Projection Kernel
## Testing With Gaussian Kernel 1
## Testing With Gaussian Kernel 2
## Testing With Gaussian Kernel 3
## Testing With Gaussian Kernel 4
## Testing With Gaussian Kernel 5
## Testing With Cosine Kernel 1
## Testing With Cosine Kernel 2
## Testing With Cosine Kernel 3
## Testing With Cosine Kernel 4
## Testing With Cosine Kernel 5
Calculating gene variances
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Calculating feature variances of standardized and clipped values
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Find the spatially variables genes by SPARK-X...

## ===== SPARK-X INPUT INFORMATION ====
## number of total samples: 14117
## number of total genes: 5000
## Running with single core, may take some time 

## Testing With Projection Kernel
## Testing With Gaussian Kernel 1
## Testing With Gaussian Kernel 2
## Testing With Gaussian Kernel 3
## Testing With Gaussian Kernel 4
## Testing With Gaussian Kernel 5
## Testing With Cosine Kernel 1
## Testing With Cosine Kernel 2
## Testing With Cosine Kernel 3
## Testing With Cosine Kernel 4
## Testing With Cosine Kernel 5
Calculating gene variances
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Calculating feature variances of standardized and clipped values
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Find the spatially variables genes by SPARK-X...

## ===== SPARK-X INPUT INFORMATION ====
## number of total samples: 8670
## number of total genes: 5000
## Running with single core, may take some time 

## Testing With Projection Kernel
## Testing With Gaussian Kernel 1
## Testing With Gaussian Kernel 2
## Testing With Gaussian Kernel 3
## Testing With Gaussian Kernel 4
## Testing With Gaussian Kernel 5
## Testing With Cosine Kernel 1
## Testing With Cosine Kernel 2
## Testing With Cosine Kernel 3
## Testing With Cosine Kernel 4
## Testing With Cosine Kernel 5
Calculating gene variances
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Calculating feature variances of standardized and clipped values
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Find the spatially variables genes by SPARK-X...

## ===== SPARK-X INPUT INFORMATION ====
## number of total samples: 14400
## number of total genes: 5000
## Running with single core, may take some time 

## Testing With Projection Kernel
## Testing With Gaussian Kernel 1
## Testing With Gaussian Kernel 2
## Testing With Gaussian Kernel 3
## Testing With Gaussian Kernel 4
## Testing With Gaussian Kernel 5
## Testing With Cosine Kernel 1
## Testing With Cosine Kernel 2
## Testing With Cosine Kernel 3
## Testing With Cosine Kernel 4
## Testing With Cosine Kernel 5
Calculating gene variances
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Calculating feature variances of standardized and clipped values
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Find the spatially variables genes by SPARK-X...

## ===== SPARK-X INPUT INFORMATION ====
## number of total samples: 18746
## number of total genes: 5000
## Running with single core, may take some time 

## Testing With Projection Kernel
## Testing With Gaussian Kernel 1
## Testing With Gaussian Kernel 2
## Testing With Gaussian Kernel 3
## Testing With Gaussian Kernel 4
## Testing With Gaussian Kernel 5
## Testing With Cosine Kernel 1
## Testing With Cosine Kernel 2
## Testing With Cosine Kernel 3
## Testing With Cosine Kernel 4
## Testing With Cosine Kernel 5
Calculating gene variances
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Calculating feature variances of standardized and clipped values
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Find the spatially variables genes by SPARK-X...

## ===== SPARK-X INPUT INFORMATION ====
## number of total samples: 20693
## number of total genes: 5000
## Running with single core, may take some time 

## Testing With Projection Kernel
## Testing With Gaussian Kernel 1
## Testing With Gaussian Kernel 2
## Testing With Gaussian Kernel 3
## Testing With Gaussian Kernel 4
## Testing With Gaussian Kernel 5
## Testing With Cosine Kernel 1
## Testing With Cosine Kernel 2
## Testing With Cosine Kernel 3
## Testing With Cosine Kernel 4
## Testing With Cosine Kernel 5
Calculating gene variances
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Calculating feature variances of standardized and clipped values
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Find the spatially variables genes by SPARK-X...

## ===== SPARK-X INPUT INFORMATION ====
## number of total samples: 8390
## number of total genes: 5000
## Running with single core, may take some time 

## Testing With Projection Kernel
## Testing With Gaussian Kernel 1
## Testing With Gaussian Kernel 2
## Testing With Gaussian Kernel 3
## Testing With Gaussian Kernel 4
## Testing With Gaussian Kernel 5
## Testing With Cosine Kernel 1
## Testing With Cosine Kernel 2
## Testing With Cosine Kernel 3
## Testing With Cosine Kernel 4
## Testing With Cosine Kernel 5
Calculating gene variances
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Calculating feature variances of standardized and clipped values
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Find the spatially variables genes by SPARK-X...

## ===== SPARK-X INPUT INFORMATION ====
## number of total samples: 18159
## number of total genes: 5000
## Running with single core, may take some time 

## Testing With Projection Kernel
## Testing With Gaussian Kernel 1
## Testing With Gaussian Kernel 2
## Testing With Gaussian Kernel 3
## Testing With Gaussian Kernel 4
## Testing With Gaussian Kernel 5
## Testing With Cosine Kernel 1
## Testing With Cosine Kernel 2
## Testing With Cosine Kernel 3
## Testing With Cosine Kernel 4
## Testing With Cosine Kernel 5
Select common top variable genes  for multiple samples...
Filter spots and features from SVGs(HVGs) count data...
Performing log-normalization
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Performing log-normalization
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Performing log-normalization
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Performing log-normalization
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Performing log-normalization
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Performing log-normalization
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Performing log-normalization
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Performing log-normalization
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Performing log-normalization
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Warning messages:
1: In FUN(newX[, i], ...) : There are p-values that are exactly 1!
2: In FUN(newX[, i], ...) : There are p-values that are exactly 1!
[[1]]
An object of class Seurat 
2000 features across 14143 samples within 1 assay 
Active assay: RNA (2000 features, 1397 variable features)

[[2]]
An object of class Seurat 
2000 features across 19678 samples within 1 assay 
Active assay: RNA (2000 features, 1541 variable features)

[[3]]
An object of class Seurat 
2000 features across 14104 samples within 1 assay 
Active assay: RNA (2000 features, 1447 variable features)

[[4]]
An object of class Seurat 
2000 features across 8662 samples within 1 assay 
Active assay: RNA (2000 features, 1374 variable features)

[[5]]
An object of class Seurat 
2000 features across 14390 samples within 1 assay 
Active assay: RNA (2000 features, 1495 variable features)

[[6]]
An object of class Seurat 
2000 features across 18709 samples within 1 assay 
Active assay: RNA (2000 features, 1159 variable features)

[[7]]
An object of class Seurat 
2000 features across 20614 samples within 1 assay 
Active assay: RNA (2000 features, 1612 variable features)

[[8]]
An object of class Seurat 
2000 features across 8389 samples within 1 assay 
Active assay: RNA (2000 features, 1200 variable features)

[[9]]
An object of class Seurat 
2000 features across 18041 samples within 1 assay 
Active assay: RNA (2000 features, 1385 variable features)

Neighbors were identified for 14143 out of 14143 spots.
Neighbors were identified for 19678 out of 19678 spots.
Neighbors were identified for 14104 out of 14104 spots.
Neighbors were identified for 8662 out of 8662 spots.
Neighbors were identified for 14390 out of 14390 spots.
Neighbors were identified for 18709 out of 18709 spots.
Neighbors were identified for 20611 out of 20614 spots.
Neighbors were identified for 8389 out of 8389 spots.
Neighbors were identified for 18038 out of 18041 spots.
Intergrative data info.: 9 samples, 2000 genes X 136730 spots------
PRECAST model setting: error_heter=TRUE, Sigma_equal=FALSE, Sigma_diag=TRUE, mix_prop_heter=TRUE
Start computing intial values... 

fitting ...
  |                                                                              |                                                                      |   0%  |                                                                              |===================================                                   |  50%  |                                                                              |======================================================================| 100%
----Fitting PRECAST model----------------

variable initialize finish! 
predict Y and V! 
diff Energy = 16.829582 
diff Energy = 40.656435 
diff Energy = 9.308380 
diff Energy = 22.682739 
Finish ICM step! 
iter = 2, loglik= -69748984.000000, dloglik=0.967521 
predict Y and V! 
diff Energy = 106.378902 
diff Energy = 13.048174 
diff Energy = 26.273220 
diff Energy = 23.685797 
diff Energy = 116.322013 
diff Energy = 36.003480 
diff Energy = 88.755434 
diff Energy = 79.307050 
Finish ICM step! 
iter = 3, loglik= -68943224.000000, dloglik=0.011552 
predict Y and V! 
diff Energy = 326.643669 
diff Energy = 343.719869 
diff Energy = 263.180164 
diff Energy = 265.224581 
diff Energy = 416.682702 
diff Energy = 59.313493 
diff Energy = 391.779283 
diff Energy = 221.200531 
diff Energy = 465.484416 
Finish ICM step! 
iter = 4, loglik= -68641072.000000, dloglik=0.004383 
predict Y and V! 
diff Energy = 139.231564 
diff Energy = 108.337106 
diff Energy = 125.727630 
diff Energy = 85.776122 
diff Energy = 174.693252 
diff Energy = 193.898828 
diff Energy = 108.069579 
diff Energy = 193.243892 
Finish ICM step! 
iter = 5, loglik= -68468752.000000, dloglik=0.002510 
predict Y and V! 
diff Energy = 102.931360 
diff Energy = 103.588410 
diff Energy = 71.937484 
diff Energy = 103.225038 
diff Energy = 151.705217 
diff Energy = 25.105670 
diff Energy = 131.947266 
diff Energy = 78.824126 
diff Energy = 136.907552 
Finish ICM step! 
iter = 6, loglik= -68364008.000000, dloglik=0.001530 
predict Y and V! 
diff Energy = 84.101726 
diff Energy = 49.999193 
diff Energy = 73.117757 
diff Energy = 72.891518 
diff Energy = 117.498719 
diff Energy = 8.180952 
diff Energy = 87.079483 
diff Energy = 27.135823 
diff Energy = 111.408649 
Finish ICM step! 
iter = 7, loglik= -68294760.000000, dloglik=0.001013 
predict Y and V! 
diff Energy = 78.834772 
diff Energy = 101.030185 
diff Energy = 83.441956 
diff Energy = 37.191843 
diff Energy = 21.511544 
diff Energy = 11.641507 
diff Energy = 111.665963 
diff Energy = 54.609132 
diff Energy = 23.792302 
Finish ICM step! 
iter = 8, loglik= -68244720.000000, dloglik=0.000733 
predict Y and V! 
diff Energy = 50.247361 
diff Energy = 4.679107 
diff Energy = 39.412464 
diff Energy = 2.842744 
diff Energy = 15.982016 
diff Energy = 0.680258 
diff Energy = 70.086701 
diff Energy = 34.395753 
diff Energy = 6.379317 
Finish ICM step! 
iter = 9, loglik= -68207096.000000, dloglik=0.000551 
predict Y and V! 
diff Energy = 30.677519 
diff Energy = 7.401218 
diff Energy = 7.506220 
diff Energy = 18.569277 
diff Energy = 48.466328 
diff Energy = 16.477935 
diff Energy = 29.981577 
diff Energy = 17.934379 
diff Energy = 8.887136 
Finish ICM step! 
iter = 10, loglik= -68178808.000000, dloglik=0.000415 
predict Y and V! 
diff Energy = 37.404610 
diff Energy = 3.389581 
diff Energy = 26.732246 
diff Energy = 20.403168 
diff Energy = 50.182386 
diff Energy = 9.263693 
diff Energy = 33.729824 
diff Energy = 8.946404 
diff Energy = 16.173628 
Finish ICM step! 
iter = 11, loglik= -68157016.000000, dloglik=0.000320 
predict Y and V! 
diff Energy = 29.061563 
diff Energy = 10.544356 
diff Energy = 25.001743 
diff Energy = 2.775672 
diff Energy = 31.960719 
diff Energy = 12.561240 
diff Energy = 10.325574 
diff Energy = 6.486908 
diff Energy = 81.971628 
Finish ICM step! 
iter = 12, loglik= -68140224.000000, dloglik=0.000246 
predict Y and V! 
diff Energy = 16.949202 
diff Energy = 0.561274 
diff Energy = 19.447432 
diff Energy = 32.773017 
diff Energy = 42.259723 
diff Energy = 3.038238 
diff Energy = 19.285759 
diff Energy = 9.611422 
diff Energy = 5.261613 
Finish ICM step! 
iter = 13, loglik= -68126448.000000, dloglik=0.000202 
predict Y and V! 
diff Energy = 12.631274 
diff Energy = 7.523821 
diff Energy = 7.359677 
diff Energy = 5.897166 
diff Energy = 35.289083 
diff Energy = 6.808384 
diff Energy = 16.045291 
diff Energy = 18.731407 
diff Energy = 1.107355 
Finish ICM step! 
iter = 14, loglik= -68115272.000000, dloglik=0.000164 
predict Y and V! 
diff Energy = 8.973297 
diff Energy = 6.175177 
diff Energy = 1.331620 
diff Energy = 1.965923 
diff Energy = 20.218586 
diff Energy = 6.224449 
diff Energy = 38.122363 
diff Energy = 4.176255 
diff Energy = 5.966528 
Finish ICM step! 
iter = 15, loglik= -68105624.000000, dloglik=0.000142 
predict Y and V! 
diff Energy = 22.764199 
diff Energy = 8.787969 
diff Energy = 1.510278 
diff Energy = 9.897928 
diff Energy = 17.105121 
diff Energy = 7.067557 
diff Energy = 1.751205 
diff Energy = 53.326586 
diff Energy = 3.682815 
Finish ICM step! 
iter = 16, loglik= -68097608.000000, dloglik=0.000118 
predict Y and V! 
diff Energy = 6.368079 
diff Energy = 90.036849 
diff Energy = 15.530276 
diff Energy = 9.996666 
diff Energy = 11.769825 
diff Energy = 10.081212 
diff Energy = 8.204432 
diff Energy = 19.314783 
Finish ICM step! 
iter = 17, loglik= -68090208.000000, dloglik=0.000109 
predict Y and V! 
diff Energy = 2.679354 
diff Energy = 7.095934 
diff Energy = 5.563474 
diff Energy = 2.269741 
diff Energy = 26.135460 
diff Energy = 5.552022 
diff Energy = 13.728665 
diff Energy = 6.244648 
diff Energy = 4.433782 
Finish ICM step! 
iter = 18, loglik= -68083768.000000, dloglik=0.000095 
predict Y and V! 
diff Energy = 0.901563 
diff Energy = 6.948230 
diff Energy = 4.355996 
diff Energy = 31.243566 
diff Energy = 7.992219 
diff Energy = 18.735896 
diff Energy = 10.702042 
Finish ICM step! 
iter = 19, loglik= -68077520.000000, dloglik=0.000092 
predict Y and V! 
diff Energy = 3.221936 
diff Energy = 0.792168 
diff Energy = 7.737158 
diff Energy = 6.703220 
diff Energy = 19.543658 
diff Energy = 11.654994 
diff Energy = 10.021762 
Finish ICM step! 
iter = 20, loglik= -68071392.000000, dloglik=0.000090 
predict Y and V! 
diff Energy = 0.363847 
diff Energy = 5.429688 
diff Energy = 3.857405 
diff Energy = 24.820779 
diff Energy = 0.926215 
diff Energy = 6.769600 
diff Energy = 7.167600 
diff Energy = 27.979160 
Finish ICM step! 
iter = 21, loglik= -68065448.000000, dloglik=0.000087 
predict Y and V! 
diff Energy = 8.481471 
diff Energy = 20.445961 
diff Energy = 1.607483 
diff Energy = 5.870163 
diff Energy = 17.914296 
diff Energy = 8.271878 
diff Energy = 4.654898 
diff Energy = 4.392534 
Finish ICM step! 
iter = 22, loglik= -68059648.000000, dloglik=0.000085 
predict Y and V! 
diff Energy = 6.126928 
diff Energy = 9.291357 
diff Energy = 14.326877 
diff Energy = 0.969499 
diff Energy = 8.436071 
diff Energy = 2.362744 
diff Energy = 6.283092 
Finish ICM step! 
iter = 23, loglik= -68053584.000000, dloglik=0.000089 
predict Y and V! 
diff Energy = 41.649907 
diff Energy = 1.731297 
diff Energy = 1.995503 
diff Energy = 31.530465 
diff Energy = 19.986729 
diff Energy = 12.489855 
diff Energy = 0.836879 
Finish ICM step! 
iter = 24, loglik= -68047192.000000, dloglik=0.000094 
predict Y and V! 
diff Energy = 1.074749 
diff Energy = 12.348424 
diff Energy = 13.801142 
diff Energy = 1.545479 
diff Energy = 4.984495 
diff Energy = 0.035960 
Finish ICM step! 
iter = 25, loglik= -68040464.000000, dloglik=0.000099 
predict Y and V! 
diff Energy = 6.784673 
diff Energy = 8.475907 
diff Energy = 0.819739 
diff Energy = 14.490457 
diff Energy = 0.152895 
diff Energy = 2.396518 
diff Energy = 21.975108 
Finish ICM step! 
iter = 26, loglik= -68033632.000000, dloglik=0.000100 
predict Y and V! 
diff Energy = 0.929485 
diff Energy = 1.199079 
diff Energy = 8.117946 
diff Energy = 2.258325 
diff Energy = 2.041000 
diff Energy = 6.870468 
Finish ICM step! 
iter = 27, loglik= -68026448.000000, dloglik=0.000106 
predict Y and V! 
diff Energy = 6.356732 
diff Energy = 0.500401 
diff Energy = 1.158212 
diff Energy = 0.428830 
diff Energy = 8.232600 
diff Energy = 3.036742 
diff Energy = 3.582272 
diff Energy = 10.715702 
Finish ICM step! 
iter = 28, loglik= -68019304.000000, dloglik=0.000105 
predict Y and V! 
diff Energy = 6.728159 
diff Energy = 10.479959 
diff Energy = 14.167656 
diff Energy = 11.484523 
diff Energy = 3.871912 
diff Energy = 0.461932 
diff Energy = 22.378989 
diff Energy = 14.624082 
Finish ICM step! 
iter = 29, loglik= -68012000.000000, dloglik=0.000107 
predict Y and V! 
diff Energy = 8.414871 
diff Energy = 0.037415 
diff Energy = 6.958952 
diff Energy = 0.537248 
diff Energy = 6.743464 
diff Energy = 33.456009 
diff Energy = 14.711667 
diff Energy = 2.860008 
Finish ICM step! 
iter = 30, loglik= -68004408.000000, dloglik=0.000112 
20665.092 sec elapsed
**** Job ends ****
Wed Nov  2 21:25:45 EDT 2022
**** Job starts ****
Tue Mar 21 19:52:39 EDT 2023
**** JHPCE info ****
User: enelson
Job id: 3066427
Job name: PRECAST_k16-24
Hostname: compute-097.cm.cluster
Task id: 17
Loading conda_R/devel

Currently Loaded Modules:
  1) matlab/R2019a     6) COMMUNITY_CENTOS7_DEFAULT_ENV
  2) stata/17          7) JHPCE_CENTOS7_DEFAULT_ENV
  3) JHPCE_tools/1.0   8) conda/3-4.6.14
  4) sge/8.1.9         9) conda_R/devel
  5) gcc/4.4.7

 

Error in library(Seurat) : there is no package called ‘Seurat’
Calls: suppressPackageStartupMessages -> withCallingHandlers -> library
Execution halted
**** Job ends ****
Tue Mar 21 19:52:44 EDT 2023
**** Job starts ****
Tue Mar 21 20:02:53 EDT 2023
**** JHPCE info ****
User: enelson
Job id: 3066438
Job name: PRECAST_k16-24
Hostname: compute-097.cm.cluster
Task id: 17
Loading conda_R/devel

Currently Loaded Modules:
  1) matlab/R2019a     6) COMMUNITY_CENTOS7_DEFAULT_ENV
  2) stata/17          7) JHPCE_CENTOS7_DEFAULT_ENV
  3) JHPCE_tools/1.0   8) conda/3-4.6.14
  4) sge/8.1.9         9) conda_R/devel
  5) gcc/4.4.7

 

Error in library("Seurat") : there is no package called ‘Seurat’
Calls: suppressPackageStartupMessages -> withCallingHandlers -> library
Execution halted
**** Job ends ****
Tue Mar 21 20:02:56 EDT 2023
**** Job starts ****
Tue Mar 21 20:08:59 EDT 2023
**** JHPCE info ****
User: enelson
Job id: 3066443
Job name: PRECAST_k16-24
Hostname: compute-097.cm.cluster
Task id: 17
Loading conda_R/4.2.x

Currently Loaded Modules:
  1) matlab/R2019a     6) COMMUNITY_CENTOS7_DEFAULT_ENV
  2) stata/17          7) JHPCE_CENTOS7_DEFAULT_ENV
  3) JHPCE_tools/1.0   8) conda/3-4.11.0
  4) sge/8.1.9         9) conda_R/4.2.x
  5) gcc/4.4.7

 

Filter spots and features from Raw count data...
 
 
Calculating gene variances
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Calculating feature variances of standardized and clipped values
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Find the spatially variables genes by SPARK-X...

## ===== SPARK-X INPUT INFORMATION ====
## number of total samples: 14172
## number of total genes: 5000
## Running with single core, may take some time 

## Testing With Projection Kernel
## Testing With Gaussian Kernel 1
## Testing With Gaussian Kernel 2
## Testing With Gaussian Kernel 3
## Testing With Gaussian Kernel 4
## Testing With Gaussian Kernel 5
## Testing With Cosine Kernel 1
## Testing With Cosine Kernel 2
## Testing With Cosine Kernel 3
## Testing With Cosine Kernel 4
## Testing With Cosine Kernel 5
Calculating gene variances
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Calculating feature variances of standardized and clipped values
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Find the spatially variables genes by SPARK-X...

## ===== SPARK-X INPUT INFORMATION ====
## number of total samples: 19762
## number of total genes: 5000
## Running with single core, may take some time 

## Testing With Projection Kernel
## Testing With Gaussian Kernel 1
## Testing With Gaussian Kernel 2
## Testing With Gaussian Kernel 3
## Testing With Gaussian Kernel 4
## Testing With Gaussian Kernel 5
## Testing With Cosine Kernel 1
## Testing With Cosine Kernel 2
## Testing With Cosine Kernel 3
## Testing With Cosine Kernel 4
## Testing With Cosine Kernel 5
Calculating gene variances
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Calculating feature variances of standardized and clipped values
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Find the spatially variables genes by SPARK-X...

## ===== SPARK-X INPUT INFORMATION ====
## number of total samples: 14117
## number of total genes: 5000
## Running with single core, may take some time 

## Testing With Projection Kernel
## Testing With Gaussian Kernel 1
## Testing With Gaussian Kernel 2
## Testing With Gaussian Kernel 3
## Testing With Gaussian Kernel 4
## Testing With Gaussian Kernel 5
## Testing With Cosine Kernel 1
## Testing With Cosine Kernel 2
## Testing With Cosine Kernel 3
## Testing With Cosine Kernel 4
## Testing With Cosine Kernel 5
Calculating gene variances
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Calculating feature variances of standardized and clipped values
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Find the spatially variables genes by SPARK-X...

## ===== SPARK-X INPUT INFORMATION ====
## number of total samples: 8670
## number of total genes: 5000
## Running with single core, may take some time 

## Testing With Projection Kernel
## Testing With Gaussian Kernel 1
## Testing With Gaussian Kernel 2
## Testing With Gaussian Kernel 3
## Testing With Gaussian Kernel 4
## Testing With Gaussian Kernel 5
## Testing With Cosine Kernel 1
## Testing With Cosine Kernel 2
## Testing With Cosine Kernel 3
## Testing With Cosine Kernel 4
## Testing With Cosine Kernel 5
Calculating gene variances
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Calculating feature variances of standardized and clipped values
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Find the spatially variables genes by SPARK-X...

## ===== SPARK-X INPUT INFORMATION ====
## number of total samples: 14400
## number of total genes: 5000
## Running with single core, may take some time 

## Testing With Projection Kernel
## Testing With Gaussian Kernel 1
## Testing With Gaussian Kernel 2
## Testing With Gaussian Kernel 3
## Testing With Gaussian Kernel 4
## Testing With Gaussian Kernel 5
## Testing With Cosine Kernel 1
## Testing With Cosine Kernel 2
## Testing With Cosine Kernel 3
## Testing With Cosine Kernel 4
## Testing With Cosine Kernel 5
Calculating gene variances
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Calculating feature variances of standardized and clipped values
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Find the spatially variables genes by SPARK-X...

## ===== SPARK-X INPUT INFORMATION ====
## number of total samples: 18746
## number of total genes: 5000
## Running with single core, may take some time 

## Testing With Projection Kernel
## Testing With Gaussian Kernel 1
## Testing With Gaussian Kernel 2
## Testing With Gaussian Kernel 3
## Testing With Gaussian Kernel 4
## Testing With Gaussian Kernel 5
## Testing With Cosine Kernel 1
## Testing With Cosine Kernel 2
## Testing With Cosine Kernel 3
## Testing With Cosine Kernel 4
## Testing With Cosine Kernel 5
Calculating gene variances
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Calculating feature variances of standardized and clipped values
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Find the spatially variables genes by SPARK-X...

## ===== SPARK-X INPUT INFORMATION ====
## number of total samples: 20693
## number of total genes: 5000
## Running with single core, may take some time 

## Testing With Projection Kernel
## Testing With Gaussian Kernel 1
## Testing With Gaussian Kernel 2
## Testing With Gaussian Kernel 3
## Testing With Gaussian Kernel 4
## Testing With Gaussian Kernel 5
## Testing With Cosine Kernel 1
## Testing With Cosine Kernel 2
## Testing With Cosine Kernel 3
## Testing With Cosine Kernel 4
## Testing With Cosine Kernel 5
Calculating gene variances
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Calculating feature variances of standardized and clipped values
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Find the spatially variables genes by SPARK-X...

## ===== SPARK-X INPUT INFORMATION ====
## number of total samples: 8390
## number of total genes: 5000
## Running with single core, may take some time 

## Testing With Projection Kernel
## Testing With Gaussian Kernel 1
## Testing With Gaussian Kernel 2
## Testing With Gaussian Kernel 3
## Testing With Gaussian Kernel 4
## Testing With Gaussian Kernel 5
## Testing With Cosine Kernel 1
## Testing With Cosine Kernel 2
## Testing With Cosine Kernel 3
## Testing With Cosine Kernel 4
## Testing With Cosine Kernel 5
Calculating gene variances
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Calculating feature variances of standardized and clipped values
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Find the spatially variables genes by SPARK-X...

## ===== SPARK-X INPUT INFORMATION ====
## number of total samples: 18159
## number of total genes: 5000
## Running with single core, may take some time 

## Testing With Projection Kernel
## Testing With Gaussian Kernel 1
## Testing With Gaussian Kernel 2
## Testing With Gaussian Kernel 3
## Testing With Gaussian Kernel 4
## Testing With Gaussian Kernel 5
## Testing With Cosine Kernel 1
## Testing With Cosine Kernel 2
## Testing With Cosine Kernel 3
## Testing With Cosine Kernel 4
## Testing With Cosine Kernel 5
Calculating gene variances
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Calculating feature variances of standardized and clipped values
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Find the spatially variables genes by SPARK-X...

## ===== SPARK-X INPUT INFORMATION ====
## number of total samples: 15520
## number of total genes: 5000
## Running with single core, may take some time 

## Testing With Projection Kernel
## Testing With Gaussian Kernel 1
## Testing With Gaussian Kernel 2
## Testing With Gaussian Kernel 3
## Testing With Gaussian Kernel 4
## Testing With Gaussian Kernel 5
## Testing With Cosine Kernel 1
## Testing With Cosine Kernel 2
## Testing With Cosine Kernel 3
## Testing With Cosine Kernel 4
## Testing With Cosine Kernel 5
Select common top variable genes  for multiple samples...
Filter spots and features from SVGs(HVGs) count data...
Performing log-normalization
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Performing log-normalization
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Performing log-normalization
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Performing log-normalization
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Performing log-normalization
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Performing log-normalization
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Performing log-normalization
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Performing log-normalization
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Performing log-normalization
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Performing log-normalization
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Warning messages:
1: In FUN(newX[, i], ...) : There are p-values that are exactly 1!
2: In FUN(newX[, i], ...) : There are p-values that are exactly 1!
[[1]]
An object of class Seurat 
2000 features across 14140 samples within 1 assay 
Active assay: RNA (2000 features, 1403 variable features)

[[2]]
An object of class Seurat 
2000 features across 19639 samples within 1 assay 
Active assay: RNA (2000 features, 1524 variable features)

[[3]]
An object of class Seurat 
2000 features across 14101 samples within 1 assay 
Active assay: RNA (2000 features, 1447 variable features)

[[4]]
An object of class Seurat 
2000 features across 8661 samples within 1 assay 
Active assay: RNA (2000 features, 1367 variable features)

[[5]]
An object of class Seurat 
2000 features across 14381 samples within 1 assay 
Active assay: RNA (2000 features, 1494 variable features)

[[6]]
An object of class Seurat 
2000 features across 18701 samples within 1 assay 
Active assay: RNA (2000 features, 1146 variable features)

[[7]]
An object of class Seurat 
2000 features across 20598 samples within 1 assay 
Active assay: RNA (2000 features, 1623 variable features)

[[8]]
An object of class Seurat 
2000 features across 8389 samples within 1 assay 
Active assay: RNA (2000 features, 1214 variable features)

[[9]]
An object of class Seurat 
2000 features across 18016 samples within 1 assay 
Active assay: RNA (2000 features, 1363 variable features)

[[10]]
An object of class Seurat 
2000 features across 15345 samples within 1 assay 
Active assay: RNA (2000 features, 1509 variable features)

Neighbors were identified for 14140 out of 14140 spots.
Neighbors were identified for 19639 out of 19639 spots.
Neighbors were identified for 14101 out of 14101 spots.
Neighbors were identified for 8661 out of 8661 spots.
Neighbors were identified for 14381 out of 14381 spots.
Neighbors were identified for 18701 out of 18701 spots.
Neighbors were identified for 20595 out of 20598 spots.
Neighbors were identified for 8389 out of 8389 spots.
Neighbors were identified for 18012 out of 18016 spots.
Neighbors were identified for 15343 out of 15345 spots.
Intergrative data info.: 10 samples, 2000 genes X 151971 spots------
PRECAST model setting: error_heter=TRUE, Sigma_equal=FALSE, Sigma_diag=TRUE, mix_prop_heter=TRUE
Start computing intial values... 

**** Job starts ****
Tue Mar 21 20:42:41 EDT 2023
**** JHPCE info ****
User: enelson
Job id: 3066458
Job name: PRECAST_k16-24
Hostname: compute-097.cm.cluster
Task id: 17
Loading conda_R/4.2.x

Currently Loaded Modules:
  1) matlab/R2019a     6) COMMUNITY_CENTOS7_DEFAULT_ENV
  2) stata/17          7) JHPCE_CENTOS7_DEFAULT_ENV
  3) JHPCE_tools/1.0   8) conda/3-4.11.0
  4) sge/8.1.9         9) conda_R/4.2.x
  5) gcc/4.4.7

 

Filter spots and features from Raw count data...
 
 
Calculating gene variances
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Calculating feature variances of standardized and clipped values
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Find the spatially variables genes by SPARK-X...

## ===== SPARK-X INPUT INFORMATION ====
## number of total samples: 14172
## number of total genes: 5000
## Running with single core, may take some time 

## Testing With Projection Kernel
## Testing With Gaussian Kernel 1
## Testing With Gaussian Kernel 2
## Testing With Gaussian Kernel 3
## Testing With Gaussian Kernel 4
## Testing With Gaussian Kernel 5
## Testing With Cosine Kernel 1
## Testing With Cosine Kernel 2
## Testing With Cosine Kernel 3
## Testing With Cosine Kernel 4
## Testing With Cosine Kernel 5
Calculating gene variances
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Calculating feature variances of standardized and clipped values
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Find the spatially variables genes by SPARK-X...

## ===== SPARK-X INPUT INFORMATION ====
## number of total samples: 19762
## number of total genes: 5000
## Running with single core, may take some time 

## Testing With Projection Kernel
## Testing With Gaussian Kernel 1
## Testing With Gaussian Kernel 2
## Testing With Gaussian Kernel 3
## Testing With Gaussian Kernel 4
## Testing With Gaussian Kernel 5
## Testing With Cosine Kernel 1
## Testing With Cosine Kernel 2
## Testing With Cosine Kernel 3
## Testing With Cosine Kernel 4
## Testing With Cosine Kernel 5
Calculating gene variances
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Calculating feature variances of standardized and clipped values
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Find the spatially variables genes by SPARK-X...

## ===== SPARK-X INPUT INFORMATION ====
## number of total samples: 14117
## number of total genes: 5000
## Running with single core, may take some time 

## Testing With Projection Kernel
## Testing With Gaussian Kernel 1
## Testing With Gaussian Kernel 2
## Testing With Gaussian Kernel 3
## Testing With Gaussian Kernel 4
## Testing With Gaussian Kernel 5
## Testing With Cosine Kernel 1
## Testing With Cosine Kernel 2
## Testing With Cosine Kernel 3
## Testing With Cosine Kernel 4
## Testing With Cosine Kernel 5
Calculating gene variances
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Calculating feature variances of standardized and clipped values
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Find the spatially variables genes by SPARK-X...

## ===== SPARK-X INPUT INFORMATION ====
## number of total samples: 8670
## number of total genes: 5000
## Running with single core, may take some time 

## Testing With Projection Kernel
## Testing With Gaussian Kernel 1
## Testing With Gaussian Kernel 2
## Testing With Gaussian Kernel 3
## Testing With Gaussian Kernel 4
## Testing With Gaussian Kernel 5
## Testing With Cosine Kernel 1
## Testing With Cosine Kernel 2
## Testing With Cosine Kernel 3
## Testing With Cosine Kernel 4
## Testing With Cosine Kernel 5
Calculating gene variances
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Calculating feature variances of standardized and clipped values
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Find the spatially variables genes by SPARK-X...

## ===== SPARK-X INPUT INFORMATION ====
## number of total samples: 14400
## number of total genes: 5000
## Running with single core, may take some time 

## Testing With Projection Kernel
## Testing With Gaussian Kernel 1
## Testing With Gaussian Kernel 2
## Testing With Gaussian Kernel 3
## Testing With Gaussian Kernel 4
## Testing With Gaussian Kernel 5
## Testing With Cosine Kernel 1
## Testing With Cosine Kernel 2
## Testing With Cosine Kernel 3
## Testing With Cosine Kernel 4
## Testing With Cosine Kernel 5
Calculating gene variances
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Calculating feature variances of standardized and clipped values
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Find the spatially variables genes by SPARK-X...

## ===== SPARK-X INPUT INFORMATION ====
## number of total samples: 18746
## number of total genes: 5000
## Running with single core, may take some time 

## Testing With Projection Kernel
## Testing With Gaussian Kernel 1
## Testing With Gaussian Kernel 2
## Testing With Gaussian Kernel 3
## Testing With Gaussian Kernel 4
## Testing With Gaussian Kernel 5
## Testing With Cosine Kernel 1
## Testing With Cosine Kernel 2
## Testing With Cosine Kernel 3
## Testing With Cosine Kernel 4
## Testing With Cosine Kernel 5
Calculating gene variances
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Calculating feature variances of standardized and clipped values
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Find the spatially variables genes by SPARK-X...

## ===== SPARK-X INPUT INFORMATION ====
## number of total samples: 20693
## number of total genes: 5000
## Running with single core, may take some time 

## Testing With Projection Kernel
## Testing With Gaussian Kernel 1
## Testing With Gaussian Kernel 2
## Testing With Gaussian Kernel 3
## Testing With Gaussian Kernel 4
## Testing With Gaussian Kernel 5
## Testing With Cosine Kernel 1
## Testing With Cosine Kernel 2
## Testing With Cosine Kernel 3
## Testing With Cosine Kernel 4
## Testing With Cosine Kernel 5
Calculating gene variances
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Calculating feature variances of standardized and clipped values
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Find the spatially variables genes by SPARK-X...

## ===== SPARK-X INPUT INFORMATION ====
## number of total samples: 8390
## number of total genes: 5000
## Running with single core, may take some time 

## Testing With Projection Kernel
## Testing With Gaussian Kernel 1
## Testing With Gaussian Kernel 2
## Testing With Gaussian Kernel 3
## Testing With Gaussian Kernel 4
## Testing With Gaussian Kernel 5
## Testing With Cosine Kernel 1
## Testing With Cosine Kernel 2
## Testing With Cosine Kernel 3
## Testing With Cosine Kernel 4
## Testing With Cosine Kernel 5
Calculating gene variances
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Calculating feature variances of standardized and clipped values
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Find the spatially variables genes by SPARK-X...

## ===== SPARK-X INPUT INFORMATION ====
## number of total samples: 18159
## number of total genes: 5000
## Running with single core, may take some time 

## Testing With Projection Kernel
## Testing With Gaussian Kernel 1
## Testing With Gaussian Kernel 2
## Testing With Gaussian Kernel 3
## Testing With Gaussian Kernel 4
## Testing With Gaussian Kernel 5
## Testing With Cosine Kernel 1
## Testing With Cosine Kernel 2
## Testing With Cosine Kernel 3
## Testing With Cosine Kernel 4
## Testing With Cosine Kernel 5
Calculating gene variances
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Calculating feature variances of standardized and clipped values
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Find the spatially variables genes by SPARK-X...

## ===== SPARK-X INPUT INFORMATION ====
## number of total samples: 15520
## number of total genes: 5000
## Running with single core, may take some time 

## Testing With Projection Kernel
## Testing With Gaussian Kernel 1
## Testing With Gaussian Kernel 2
## Testing With Gaussian Kernel 3
## Testing With Gaussian Kernel 4
## Testing With Gaussian Kernel 5
## Testing With Cosine Kernel 1
## Testing With Cosine Kernel 2
## Testing With Cosine Kernel 3
## Testing With Cosine Kernel 4
## Testing With Cosine Kernel 5
Select common top variable genes  for multiple samples...
Filter spots and features from SVGs(HVGs) count data...
Performing log-normalization
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Performing log-normalization
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Performing log-normalization
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Performing log-normalization
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Performing log-normalization
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Performing log-normalization
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Performing log-normalization
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Performing log-normalization
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Performing log-normalization
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Performing log-normalization
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Warning messages:
1: In FUN(newX[, i], ...) : There are p-values that are exactly 1!
2: In FUN(newX[, i], ...) : There are p-values that are exactly 1!
[[1]]
An object of class Seurat 
2000 features across 14140 samples within 1 assay 
Active assay: RNA (2000 features, 1403 variable features)

[[2]]
An object of class Seurat 
2000 features across 19639 samples within 1 assay 
Active assay: RNA (2000 features, 1524 variable features)

[[3]]
An object of class Seurat 
2000 features across 14101 samples within 1 assay 
Active assay: RNA (2000 features, 1447 variable features)

[[4]]
An object of class Seurat 
2000 features across 8661 samples within 1 assay 
Active assay: RNA (2000 features, 1367 variable features)

[[5]]
An object of class Seurat 
2000 features across 14381 samples within 1 assay 
Active assay: RNA (2000 features, 1494 variable features)

[[6]]
An object of class Seurat 
2000 features across 18701 samples within 1 assay 
Active assay: RNA (2000 features, 1146 variable features)

[[7]]
An object of class Seurat 
2000 features across 20598 samples within 1 assay 
Active assay: RNA (2000 features, 1623 variable features)

[[8]]
An object of class Seurat 
2000 features across 8389 samples within 1 assay 
Active assay: RNA (2000 features, 1214 variable features)

[[9]]
An object of class Seurat 
2000 features across 18016 samples within 1 assay 
Active assay: RNA (2000 features, 1363 variable features)

[[10]]
An object of class Seurat 
2000 features across 15345 samples within 1 assay 
Active assay: RNA (2000 features, 1509 variable features)

Neighbors were identified for 14140 out of 14140 spots.
Neighbors were identified for 19639 out of 19639 spots.
Neighbors were identified for 14101 out of 14101 spots.
Neighbors were identified for 8661 out of 8661 spots.
Neighbors were identified for 14381 out of 14381 spots.
Neighbors were identified for 18701 out of 18701 spots.
Neighbors were identified for 20595 out of 20598 spots.
Neighbors were identified for 8389 out of 8389 spots.
Neighbors were identified for 18012 out of 18016 spots.
Neighbors were identified for 15343 out of 15345 spots.
Intergrative data info.: 10 samples, 2000 genes X 151971 spots------
PRECAST model setting: error_heter=TRUE, Sigma_equal=FALSE, Sigma_diag=TRUE, mix_prop_heter=TRUE
Start computing intial values... 

fitting ...
  |                                                                              |                                                                      |   0%  |                                                                              |===================================                                   |  50%  |                                                                              |======================================================================| 100%
----Fitting PRECAST model----------------

variable initialize finish! 
predict Y and V! 
diff Energy = 2.732854 
Finish ICM step! 
iter = 2, loglik= -79869344.000000, dloglik=0.962808 
predict Y and V! 
diff Energy = 45.480497 
diff Energy = 96.295789 
diff Energy = 8.488618 
diff Energy = 0.893360 
diff Energy = 101.894283 
diff Energy = 2.973982 
diff Energy = 57.869665 
diff Energy = 11.954153 
diff Energy = 110.097259 
Finish ICM step! 
iter = 3, loglik= -78819920.000000, dloglik=0.013139 
predict Y and V! 
diff Energy = 46.517887 
diff Energy = 135.592069 
diff Energy = 108.441675 
diff Energy = 36.626214 
diff Energy = 111.323615 
diff Energy = 82.582090 
diff Energy = 136.607664 
diff Energy = 13.222204 
diff Energy = 141.531513 
diff Energy = 162.820661 
Finish ICM step! 
iter = 4, loglik= -78478472.000000, dloglik=0.004332 
predict Y and V! 
diff Energy = 44.833787 
diff Energy = 93.838302 
diff Energy = 108.838147 
diff Energy = 100.421144 
diff Energy = 179.666396 
diff Energy = 89.062586 
diff Energy = 142.624734 
diff Energy = 25.482279 
diff Energy = 163.210364 
diff Energy = 151.436335 
Finish ICM step! 
iter = 5, loglik= -78301592.000000, dloglik=0.002254 
predict Y and V! 
diff Energy = 44.117819 
diff Energy = 105.230650 
diff Energy = 74.066484 
diff Energy = 59.973327 
diff Energy = 58.940482 
diff Energy = 69.062952 
diff Energy = 151.820963 
diff Energy = 10.020652 
diff Energy = 117.465375 
diff Energy = 87.619236 
Finish ICM step! 
iter = 6, loglik= -78192296.000000, dloglik=0.001396 
predict Y and V! 
diff Energy = 35.552198 
diff Energy = 79.801836 
diff Energy = 36.326152 
diff Energy = 55.178392 
diff Energy = 72.184973 
diff Energy = 73.170310 
diff Energy = 20.061741 
diff Energy = 0.155479 
diff Energy = 87.808799 
diff Energy = 64.742972 
Finish ICM step! 
iter = 7, loglik= -78119744.000000, dloglik=0.000928 
predict Y and V! 
diff Energy = 50.170973 
diff Energy = 76.120552 
diff Energy = 34.182402 
diff Energy = 51.418370 
diff Energy = 10.933270 
diff Energy = 35.387863 
diff Energy = 51.521414 
diff Energy = 3.370673 
diff Energy = 133.564048 
diff Energy = 8.572814 
Finish ICM step! 
iter = 8, loglik= -78067664.000000, dloglik=0.000667 
predict Y and V! 
diff Energy = 40.841867 
diff Energy = 0.920469 
diff Energy = 10.333332 
diff Energy = 2.491530 
diff Energy = 15.773094 
diff Energy = 11.934090 
diff Energy = 4.551814 
diff Energy = 13.934753 
diff Energy = 12.673105 
Finish ICM step! 
iter = 9, loglik= -78027344.000000, dloglik=0.000516 
predict Y and V! 
diff Energy = 70.345056 
diff Energy = 4.644272 
diff Energy = 0.497899 
diff Energy = 45.032877 
diff Energy = 3.215527 
diff Energy = 6.249674 
diff Energy = 4.201533 
Finish ICM step! 
iter = 10, loglik= -77994520.000000, dloglik=0.000421 
predict Y and V! 
diff Energy = 6.385132 
diff Energy = 2.951539 
diff Energy = 3.194928 
diff Energy = 7.049821 
diff Energy = 37.956109 
diff Energy = 0.254102 
diff Energy = 10.702095 
diff Energy = 6.804176 
diff Energy = 9.532083 
diff Energy = 0.583147 
Finish ICM step! 
iter = 11, loglik= -77967136.000000, dloglik=0.000351 
predict Y and V! 
diff Energy = 13.892487 
diff Energy = 2.315276 
diff Energy = 1.214681 
diff Energy = 1.754231 
diff Energy = 4.747781 
diff Energy = 15.160164 
diff Energy = 1.536731 
diff Energy = 15.634329 
diff Energy = 61.530695 
diff Energy = 11.498211 
Finish ICM step! 
iter = 12, loglik= -77945280.000000, dloglik=0.000280 
predict Y and V! 
diff Energy = 4.887048 
diff Energy = 4.465787 
diff Energy = 0.547451 
diff Energy = 22.716134 
diff Energy = 0.405794 
diff Energy = 79.559256 
diff Energy = 8.564376 
diff Energy = 5.579916 
Finish ICM step! 
iter = 13, loglik= -77928256.000000, dloglik=0.000218 
predict Y and V! 
diff Energy = 9.523704 
diff Energy = 0.440066 
diff Energy = 2.814954 
diff Energy = 15.997489 
diff Energy = 46.177596 
diff Energy = 0.592336 
diff Energy = 25.237576 
diff Energy = 6.275327 
Finish ICM step! 
iter = 14, loglik= -77914672.000000, dloglik=0.000174 
predict Y and V! 
diff Energy = 3.986937 
diff Energy = 1.283370 
diff Energy = 14.792325 
diff Energy = 1.721518 
diff Energy = 2.706602 
diff Energy = 1.215761 
diff Energy = 0.235183 
diff Energy = 1.654169 
diff Energy = 3.664319 
diff Energy = 1.844181 
Finish ICM step! 
iter = 15, loglik= -77903384.000000, dloglik=0.000145 
predict Y and V! 
diff Energy = 7.601252 
diff Energy = 2.587235 
diff Energy = 2.069635 
diff Energy = 3.510401 
diff Energy = 5.188411 
diff Energy = 7.114497 
diff Energy = 8.245040 
diff Energy = 16.257321 
diff Energy = 0.001848 
Finish ICM step! 
iter = 16, loglik= -77894032.000000, dloglik=0.000120 
predict Y and V! 
diff Energy = 2.102703 
diff Energy = 41.300984 
diff Energy = 1.038639 
diff Energy = 3.201197 
diff Energy = 2.987565 
diff Energy = 0.274402 
diff Energy = 12.969994 
diff Energy = 7.514515 
Finish ICM step! 
iter = 17, loglik= -77885840.000000, dloglik=0.000105 
predict Y and V! 
diff Energy = 0.632908 
diff Energy = 4.009243 
diff Energy = 1.344100 
diff Energy = 1.674264 
diff Energy = 12.149795 
diff Energy = 3.633734 
diff Energy = 11.525168 
diff Energy = 4.463746 
diff Energy = 63.078694 
Finish ICM step! 
iter = 18, loglik= -77878376.000000, dloglik=0.000096 
predict Y and V! 
diff Energy = 3.276585 
diff Energy = 1.315826 
diff Energy = 2.969355 
diff Energy = 1.067785 
diff Energy = 6.278065 
diff Energy = 2.888071 
diff Energy = 16.166965 
diff Energy = 8.715821 
Finish ICM step! 
iter = 19, loglik= -77871424.000000, dloglik=0.000089 
predict Y and V! 
diff Energy = 3.415883 
diff Energy = 6.218997 
diff Energy = 0.110346 
diff Energy = 5.439208 
diff Energy = 3.651306 
diff Energy = 5.211555 
diff Energy = 7.092949 
diff Energy = 13.867287 
Finish ICM step! 
iter = 20, loglik= -77865176.000000, dloglik=0.000080 
predict Y and V! 
diff Energy = 1.455266 
diff Energy = 0.460603 
diff Energy = 0.206096 
diff Energy = 2.511720 
diff Energy = 2.850181 
diff Energy = 2.285485 
diff Energy = 0.868615 
diff Energy = 6.336358 
diff Energy = 15.070047 
diff Energy = 7.249262 
Finish ICM step! 
iter = 21, loglik= -77859120.000000, dloglik=0.000078 
predict Y and V! 
diff Energy = 20.516995 
diff Energy = 1.850709 
diff Energy = 3.075099 
diff Energy = 4.214198 
diff Energy = 0.216701 
diff Energy = 2.061903 
diff Energy = 2.432757 
diff Energy = 5.994950 
diff Energy = 21.550337 
diff Energy = 8.680482 
Finish ICM step! 
iter = 22, loglik= -77852960.000000, dloglik=0.000079 
predict Y and V! 
diff Energy = 0.818907 
diff Energy = 3.014993 
diff Energy = 3.151767 
diff Energy = 3.329076 
diff Energy = 0.245659 
diff Energy = 14.114675 
diff Energy = 2.684223 
diff Energy = 12.328126 
diff Energy = 19.404813 
Finish ICM step! 
iter = 23, loglik= -77846296.000000, dloglik=0.000086 
predict Y and V! 
diff Energy = 4.167561 
diff Energy = 0.737531 
diff Energy = 0.387205 
diff Energy = 9.658289 
diff Energy = 9.788882 
diff Energy = 20.776460 
diff Energy = 0.099483 
diff Energy = 3.726084 
diff Energy = 7.647915 
diff Energy = 0.909352 
Finish ICM step! 
iter = 24, loglik= -77839296.000000, dloglik=0.000090 
predict Y and V! 
diff Energy = 11.203662 
diff Energy = 3.057336 
diff Energy = 0.234194 
diff Energy = 2.193446 
diff Energy = 15.074192 
diff Energy = 27.168262 
diff Energy = 1.802910 
diff Energy = 0.574951 
diff Energy = 11.987471 
diff Energy = 8.949894 
Finish ICM step! 
iter = 25, loglik= -77832432.000000, dloglik=0.000088 
predict Y and V! 
diff Energy = 1.869491 
diff Energy = 22.955498 
diff Energy = 2.231172 
diff Energy = 2.719604 
diff Energy = 24.577410 
diff Energy = 2.353346 
diff Energy = 9.553352 
diff Energy = 4.888416 
Finish ICM step! 
iter = 26, loglik= -77824736.000000, dloglik=0.000099 
predict Y and V! 
diff Energy = 6.014772 
diff Energy = 7.630865 
diff Energy = 6.896354 
diff Energy = 8.057196 
diff Energy = 1.505561 
diff Energy = 0.814840 
diff Energy = 9.032995 
diff Energy = 9.881570 
Finish ICM step! 
iter = 27, loglik= -77816520.000000, dloglik=0.000106 
predict Y and V! 
diff Energy = 5.665562 
diff Energy = 4.596355 
diff Energy = 5.405531 
diff Energy = 0.110502 
diff Energy = 0.258636 
diff Energy = 10.579604 
diff Energy = 3.587255 
diff Energy = 3.984882 
Finish ICM step! 
iter = 28, loglik= -77807448.000000, dloglik=0.000117 
predict Y and V! 
diff Energy = 4.953008 
diff Energy = 1.752031 
diff Energy = 3.264784 
diff Energy = 2.842165 
diff Energy = 6.647560 
diff Energy = 8.736737 
diff Energy = 16.614801 
Finish ICM step! 
iter = 29, loglik= -77798136.000000, dloglik=0.000120 
predict Y and V! 
diff Energy = 36.654016 
diff Energy = 2.250671 
diff Energy = 0.347744 
diff Energy = 0.127530 
diff Energy = 1.371937 
diff Energy = 4.398147 
diff Energy = 3.081154 
diff Energy = 15.808810 
diff Energy = 2.512407 
Finish ICM step! 
iter = 30, loglik= -77788624.000000, dloglik=0.000122 
25211.945 sec elapsed
**** Job ends ****
Wed Mar 22 03:54:36 EDT 2023
**** Job starts ****
Thu Mar 30 00:55:17 EDT 2023
**** JHPCE info ****
User: enelson
Job id: 3084530
Job name: PRECAST_k16-25
Hostname: compute-097.cm.cluster
Task id: 17
Loading conda_R/4.2.x

Currently Loaded Modules:
  1) matlab/R2019a     6) COMMUNITY_CENTOS7_DEFAULT_ENV
  2) stata/17          7) JHPCE_CENTOS7_DEFAULT_ENV
  3) JHPCE_tools/1.0   8) conda/3-4.11.0
  4) sge/8.1.9         9) conda_R/4.2.x
  5) gcc/4.4.7

 

Filter spots and features from Raw count data...
 
 
Find the spatially variables genes by SPARK-X...

## ===== SPARK-X INPUT INFORMATION ====
## number of total samples: 7569
## number of total genes: 23689
## Running with single core, may take some time 

## Testing With Projection Kernel
## Testing With Gaussian Kernel 1
## Testing With Gaussian Kernel 2
## Testing With Gaussian Kernel 3
## Testing With Gaussian Kernel 4
## Testing With Gaussian Kernel 5
## Testing With Cosine Kernel 1
## Testing With Cosine Kernel 2
## Testing With Cosine Kernel 3
## Testing With Cosine Kernel 4
## Testing With Cosine Kernel 5
Find the spatially variables genes by SPARK-X...

## ===== SPARK-X INPUT INFORMATION ====
## number of total samples: 8089
## number of total genes: 24208
## Running with single core, may take some time 

## Testing With Projection Kernel
## Testing With Gaussian Kernel 1
## Testing With Gaussian Kernel 2
## Testing With Gaussian Kernel 3
## Testing With Gaussian Kernel 4
## Testing With Gaussian Kernel 5
## Testing With Cosine Kernel 1
## Testing With Cosine Kernel 2
## Testing With Cosine Kernel 3
## Testing With Cosine Kernel 4
## Testing With Cosine Kernel 5
Find the spatially variables genes by SPARK-X...

## ===== SPARK-X INPUT INFORMATION ====
## number of total samples: 16334
## number of total genes: 25336
## Running with single core, may take some time 

## Testing With Projection Kernel
## Testing With Gaussian Kernel 1
## Testing With Gaussian Kernel 2
## Testing With Gaussian Kernel 3
## Testing With Gaussian Kernel 4
## Testing With Gaussian Kernel 5
## Testing With Cosine Kernel 1
## Testing With Cosine Kernel 2
## Testing With Cosine Kernel 3
## Testing With Cosine Kernel 4
## Testing With Cosine Kernel 5
Find the spatially variables genes by SPARK-X...

## ===== SPARK-X INPUT INFORMATION ====
## number of total samples: 14105
## number of total genes: 26447
## Running with single core, may take some time 

## Testing With Projection Kernel
## Testing With Gaussian Kernel 1
## Testing With Gaussian Kernel 2
## Testing With Gaussian Kernel 3
## Testing With Gaussian Kernel 4
## Testing With Gaussian Kernel 5
## Testing With Cosine Kernel 1
## Testing With Cosine Kernel 2
## Testing With Cosine Kernel 3
## Testing With Cosine Kernel 4
## Testing With Cosine Kernel 5
Find the spatially variables genes by SPARK-X...

## ===== SPARK-X INPUT INFORMATION ====
## number of total samples: 8670
## number of total genes: 24039
## Running with single core, may take some time 

## Testing With Projection Kernel
## Testing With Gaussian Kernel 1
## Testing With Gaussian Kernel 2
## Testing With Gaussian Kernel 3
## Testing With Gaussian Kernel 4
## Testing With Gaussian Kernel 5
## Testing With Cosine Kernel 1
## Testing With Cosine Kernel 2
## Testing With Cosine Kernel 3
## Testing With Cosine Kernel 4
## Testing With Cosine Kernel 5
Find the spatially variables genes by SPARK-X...

## ===== SPARK-X INPUT INFORMATION ====
## number of total samples: 6071
## number of total genes: 23183
## Running with single core, may take some time 

## Testing With Projection Kernel
## Testing With Gaussian Kernel 1
## Testing With Gaussian Kernel 2
## Testing With Gaussian Kernel 3
## Testing With Gaussian Kernel 4
## Testing With Gaussian Kernel 5
## Testing With Cosine Kernel 1
## Testing With Cosine Kernel 2
## Testing With Cosine Kernel 3
## Testing With Cosine Kernel 4
## Testing With Cosine Kernel 5
Find the spatially variables genes by SPARK-X...

## ===== SPARK-X INPUT INFORMATION ====
## number of total samples: 9895
## number of total genes: 24035
## Running with single core, may take some time 

## Testing With Projection Kernel
## Testing With Gaussian Kernel 1
## Testing With Gaussian Kernel 2
## Testing With Gaussian Kernel 3
## Testing With Gaussian Kernel 4
## Testing With Gaussian Kernel 5
## Testing With Cosine Kernel 1
## Testing With Cosine Kernel 2
## Testing With Cosine Kernel 3
## Testing With Cosine Kernel 4
## Testing With Cosine Kernel 5
Find the spatially variables genes by SPARK-X...

## ===== SPARK-X INPUT INFORMATION ====
## number of total samples: 17222
## number of total genes: 26256
## Running with single core, may take some time 

## Testing With Projection Kernel
## Testing With Gaussian Kernel 1
## Testing With Gaussian Kernel 2
## Testing With Gaussian Kernel 3
## Testing With Gaussian Kernel 4
## Testing With Gaussian Kernel 5
## Testing With Cosine Kernel 1
## Testing With Cosine Kernel 2
## Testing With Cosine Kernel 3
## Testing With Cosine Kernel 4
## Testing With Cosine Kernel 5
Find the spatially variables genes by SPARK-X...

## ===== SPARK-X INPUT INFORMATION ====
## number of total samples: 15785
## number of total genes: 25978
## Running with single core, may take some time 

## Testing With Projection Kernel
## Testing With Gaussian Kernel 1
## Testing With Gaussian Kernel 2
## Testing With Gaussian Kernel 3
## Testing With Gaussian Kernel 4
## Testing With Gaussian Kernel 5
## Testing With Cosine Kernel 1
## Testing With Cosine Kernel 2
## Testing With Cosine Kernel 3
## Testing With Cosine Kernel 4
## Testing With Cosine Kernel 5
Find the spatially variables genes by SPARK-X...

## ===== SPARK-X INPUT INFORMATION ====
## number of total samples: 12039
## number of total genes: 24495
## Running with single core, may take some time 

## Testing With Projection Kernel
## Testing With Gaussian Kernel 1
## Testing With Gaussian Kernel 2
## Testing With Gaussian Kernel 3
## Testing With Gaussian Kernel 4
## Testing With Gaussian Kernel 5
## Testing With Cosine Kernel 1
## Testing With Cosine Kernel 2
## Testing With Cosine Kernel 3
## Testing With Cosine Kernel 4
## Testing With Cosine Kernel 5
Find the spatially variables genes by SPARK-X...

## ===== SPARK-X INPUT INFORMATION ====
## number of total samples: 13970
## number of total genes: 24879
## Running with single core, may take some time 

## Testing With Projection Kernel
## Testing With Gaussian Kernel 1
## Testing With Gaussian Kernel 2
## Testing With Gaussian Kernel 3
## Testing With Gaussian Kernel 4
## Testing With Gaussian Kernel 5
## Testing With Cosine Kernel 1
## Testing With Cosine Kernel 2
## Testing With Cosine Kernel 3
## Testing With Cosine Kernel 4
## Testing With Cosine Kernel 5
Select common top variable genes  for multiple samples...
Filter spots and features from SVGs(HVGs) count data...
Performing log-normalization
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Performing log-normalization
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Performing log-normalization
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Performing log-normalization
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Performing log-normalization
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Performing log-normalization
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Performing log-normalization
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Performing log-normalization
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Performing log-normalization
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Performing log-normalization
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Performing log-normalization
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
There were 24 warnings (use warnings() to see them)
[[1]]
An object of class Seurat 
2000 features across 7538 samples within 1 assay 
Active assay: RNA (2000 features, 467 variable features)

[[2]]
An object of class Seurat 
2000 features across 8079 samples within 1 assay 
Active assay: RNA (2000 features, 458 variable features)

[[3]]
An object of class Seurat 
2000 features across 16022 samples within 1 assay 
Active assay: RNA (2000 features, 459 variable features)

[[4]]
An object of class Seurat 
2000 features across 14065 samples within 1 assay 
Active assay: RNA (2000 features, 449 variable features)

[[5]]
An object of class Seurat 
2000 features across 8637 samples within 1 assay 
Active assay: RNA (2000 features, 482 variable features)

[[6]]
An object of class Seurat 
2000 features across 5952 samples within 1 assay 
Active assay: RNA (2000 features, 453 variable features)

[[7]]
An object of class Seurat 
2000 features across 9490 samples within 1 assay 
Active assay: RNA (2000 features, 482 variable features)

[[8]]
An object of class Seurat 
2000 features across 16998 samples within 1 assay 
Active assay: RNA (2000 features, 457 variable features)

[[9]]
An object of class Seurat 
2000 features across 15390 samples within 1 assay 
Active assay: RNA (2000 features, 420 variable features)

[[10]]
An object of class Seurat 
2000 features across 11862 samples within 1 assay 
Active assay: RNA (2000 features, 461 variable features)

[[11]]
An object of class Seurat 
2000 features across 13539 samples within 1 assay 
Active assay: RNA (2000 features, 444 variable features)

Neighbors were identified for 7538 out of 7538 spots.
Neighbors were identified for 8079 out of 8079 spots.
Neighbors were identified for 16022 out of 16022 spots.
Neighbors were identified for 14065 out of 14065 spots.
Neighbors were identified for 8637 out of 8637 spots.
Neighbors were identified for 5951 out of 5952 spots.
Neighbors were identified for 9489 out of 9490 spots.
Neighbors were identified for 16998 out of 16998 spots.
Neighbors were identified for 15390 out of 15390 spots.
Neighbors were identified for 11862 out of 11862 spots.
Neighbors were identified for 13539 out of 13539 spots.
Intergrative data info.: 11 samples, 2000 genes X 127572 spots------
PRECAST model setting: error_heter=TRUE, Sigma_equal=FALSE, Sigma_diag=TRUE, mix_prop_heter=TRUE
Start computing intial values... 

fitting ...
  |                                                                              |                                                                      |   0%  |                                                                              |===================================                                   |  50%  |                                                                              |======================================================================| 100%
----Fitting PRECAST model----------------

variable initialize finish! 
predict Y and V! 
diff Energy = 185.632539 
diff Energy = 467.029408 
diff Energy = 149.694630 
diff Energy = 723.356519 
diff Energy = 130.969017 
diff Energy = 81.692613 
diff Energy = 3.726674 
Finish ICM step! 
iter = 2, loglik= 75897984.000000, dloglik=1.035343 
predict Y and V! 
diff Energy = 103.073567 
diff Energy = 287.698779 
diff Energy = 41.044427 
diff Energy = 9.310227 
diff Energy = 101.842173 
diff Energy = 156.597053 
diff Energy = 151.809751 
diff Energy = 17.910855 
diff Energy = 203.447767 
Finish ICM step! 
iter = 3, loglik= 76347248.000000, dloglik=0.005919 
predict Y and V! 
diff Energy = 59.109189 
diff Energy = 29.538849 
diff Energy = 78.782030 
diff Energy = 235.120607 
diff Energy = 73.062365 
diff Energy = 68.583017 
diff Energy = 28.896925 
diff Energy = 157.245605 
diff Energy = 48.979387 
diff Energy = 5.333563 
diff Energy = 80.539945 
Finish ICM step! 
iter = 4, loglik= 76473552.000000, dloglik=0.001654 
predict Y and V! 
diff Energy = 25.670922 
diff Energy = 37.749636 
diff Energy = 14.119007 
diff Energy = 87.313218 
diff Energy = 41.575521 
diff Energy = 87.266693 
diff Energy = 5.721999 
diff Energy = 108.088852 
diff Energy = 90.956567 
diff Energy = 21.899715 
diff Energy = 26.726568 
Finish ICM step! 
iter = 5, loglik= 76532840.000000, dloglik=0.000775 
predict Y and V! 
diff Energy = 34.251481 
diff Energy = 46.868193 
diff Energy = 14.595791 
diff Energy = 48.266186 
diff Energy = 43.414344 
diff Energy = 42.564451 
diff Energy = 17.495570 
diff Energy = 20.555706 
diff Energy = 69.036864 
diff Energy = 20.823216 
diff Energy = 49.160774 
Finish ICM step! 
iter = 6, loglik= 76569184.000000, dloglik=0.000475 
predict Y and V! 
diff Energy = 35.563873 
diff Energy = 11.030971 
diff Energy = 25.829424 
diff Energy = 11.842462 
diff Energy = 37.149429 
diff Energy = 31.018412 
diff Energy = 21.459963 
diff Energy = 35.939830 
diff Energy = 20.803644 
diff Energy = 8.967079 
diff Energy = 41.446585 
Finish ICM step! 
iter = 7, loglik= 76595528.000000, dloglik=0.000344 
predict Y and V! 
diff Energy = 7.092848 
diff Energy = 0.480702 
diff Energy = 1.913033 
diff Energy = 20.074584 
diff Energy = 21.364538 
diff Energy = 16.967256 
diff Energy = 8.446638 
diff Energy = 38.293663 
diff Energy = 27.766100 
diff Energy = 0.966140 
Finish ICM step! 
iter = 8, loglik= 76616496.000000, dloglik=0.000274 
predict Y and V! 
diff Energy = 6.845269 
diff Energy = 5.091349 
diff Energy = 4.954460 
diff Energy = 30.363061 
diff Energy = 5.969741 
diff Energy = 10.302725 
diff Energy = 17.439179 
diff Energy = 7.859467 
diff Energy = 6.039366 
Finish ICM step! 
iter = 9, loglik= 76635248.000000, dloglik=0.000245 
predict Y and V! 
diff Energy = 19.978011 
diff Energy = 11.788785 
diff Energy = 6.442249 
diff Energy = 3.714297 
diff Energy = 8.845560 
diff Energy = 3.428747 
diff Energy = 14.393832 
diff Energy = 16.814124 
diff Energy = 1.472628 
Finish ICM step! 
iter = 10, loglik= 76653496.000000, dloglik=0.000238 
predict Y and V! 
diff Energy = 12.455907 
diff Energy = 6.158027 
diff Energy = 8.635034 
diff Energy = 21.516700 
diff Energy = 102.572443 
diff Energy = 1.777308 
diff Energy = 24.013713 
diff Energy = 7.206710 
diff Energy = 6.256163 
Finish ICM step! 
iter = 11, loglik= 76672432.000000, dloglik=0.000247 
predict Y and V! 
diff Energy = 6.327358 
diff Energy = 10.027390 
diff Energy = 7.694979 
diff Energy = 4.592779 
diff Energy = 6.718944 
diff Energy = 19.916995 
diff Energy = 178.556595 
diff Energy = 9.687874 
diff Energy = 1.444281 
Finish ICM step! 
iter = 12, loglik= 76693104.000000, dloglik=0.000270 
predict Y and V! 
diff Energy = 3.460991 
diff Energy = 7.469097 
diff Energy = 0.214465 
diff Energy = 0.723447 
diff Energy = 6.687141 
diff Energy = 11.726869 
diff Energy = 3.660257 
diff Energy = 10.142075 
diff Energy = 0.699751 
diff Energy = 1.790508 
Finish ICM step! 
iter = 13, loglik= 76712648.000000, dloglik=0.000255 
predict Y and V! 
diff Energy = 16.589951 
diff Energy = 6.292234 
diff Energy = 11.716578 
diff Energy = 5.464558 
diff Energy = 2.745258 
diff Energy = 5.906752 
diff Energy = 3.067413 
diff Energy = 142.040932 
diff Energy = 4.192478 
Finish ICM step! 
iter = 14, loglik= 76729336.000000, dloglik=0.000218 
predict Y and V! 
diff Energy = 26.986719 
diff Energy = 11.364273 
diff Energy = 130.745290 
diff Energy = 69.642474 
diff Energy = 2.750164 
diff Energy = 18.361854 
diff Energy = 201.694346 
Finish ICM step! 
iter = 15, loglik= 76744200.000000, dloglik=0.000194 
predict Y and V! 
diff Energy = 10.908679 
diff Energy = 12.075347 
diff Energy = 16.782577 
diff Energy = 2.961588 
diff Energy = 19.673660 
diff Energy = 8.650433 
diff Energy = 8.991614 
diff Energy = 17.768572 
Finish ICM step! 
iter = 16, loglik= 76757400.000000, dloglik=0.000172 
predict Y and V! 
diff Energy = 6.980203 
diff Energy = 2.363797 
diff Energy = 163.977320 
diff Energy = 31.213613 
diff Energy = 5.776965 
diff Energy = 1.767750 
diff Energy = 8.942569 
diff Energy = 32.692867 
diff Energy = 2.137486 
Finish ICM step! 
iter = 17, loglik= 76770792.000000, dloglik=0.000174 
predict Y and V! 
diff Energy = 15.000203 
diff Energy = 50.415402 
diff Energy = 21.452169 
diff Energy = 8.230899 
diff Energy = 2.072601 
diff Energy = 1.728577 
diff Energy = 22.294231 
diff Energy = 25.752351 
Finish ICM step! 
iter = 18, loglik= 76783304.000000, dloglik=0.000163 
predict Y and V! 
diff Energy = 3.885657 
diff Energy = 3.160018 
diff Energy = 37.286799 
diff Energy = 18.196670 
diff Energy = 8.109524 
diff Energy = 4.137256 
diff Energy = 1.958425 
diff Energy = 35.136326 
diff Energy = 13.858746 
Finish ICM step! 
iter = 19, loglik= 76795520.000000, dloglik=0.000159 
predict Y and V! 
diff Energy = 2.884462 
diff Energy = 4.038197 
diff Energy = 28.537612 
diff Energy = 7.897354 
diff Energy = 0.937523 
diff Energy = 7.700624 
diff Energy = 16.585316 
diff Energy = 7.651792 
Finish ICM step! 
iter = 20, loglik= 76807576.000000, dloglik=0.000157 
predict Y and V! 
diff Energy = 16.485326 
diff Energy = 0.536704 
diff Energy = 17.177433 
diff Energy = 29.720201 
diff Energy = 5.466458 
diff Energy = 0.946901 
diff Energy = 0.839832 
diff Energy = 0.045080 
diff Energy = 15.803153 
Finish ICM step! 
iter = 21, loglik= 76819512.000000, dloglik=0.000155 
predict Y and V! 
diff Energy = 6.501108 
diff Energy = 38.777586 
diff Energy = 1.379221 
diff Energy = 6.562923 
diff Energy = 14.209570 
diff Energy = 7.669558 
diff Energy = 20.602918 
Finish ICM step! 
iter = 22, loglik= 76831472.000000, dloglik=0.000156 
predict Y and V! 
diff Energy = 5.116889 
diff Energy = 18.482424 
diff Energy = 13.203925 
diff Energy = 3.973443 
diff Energy = 11.861532 
diff Energy = 14.071515 
Finish ICM step! 
iter = 23, loglik= 76843392.000000, dloglik=0.000155 
predict Y and V! 
diff Energy = 16.512008 
diff Energy = 2.390011 
diff Energy = 16.951689 
diff Energy = 23.429739 
diff Energy = 0.005395 
diff Energy = 4.942042 
diff Energy = 21.932336 
diff Energy = 14.250731 
Finish ICM step! 
iter = 24, loglik= 76855432.000000, dloglik=0.000157 
predict Y and V! 
diff Energy = 17.059744 
diff Energy = 2.521752 
diff Energy = 73.443333 
diff Energy = 7.725674 
diff Energy = 4.345632 
Finish ICM step! 
iter = 25, loglik= 76868176.000000, dloglik=0.000166 
predict Y and V! 
diff Energy = 2.948457 
diff Energy = 14.404071 
diff Energy = 5.846005 
diff Energy = 5.327324 
diff Energy = 9.769081 
diff Energy = 7.381162 
Finish ICM step! 
iter = 26, loglik= 76882136.000000, dloglik=0.000182 
predict Y and V! 
diff Energy = 2.296614 
diff Energy = 1.909160 
diff Energy = 5.852085 
diff Energy = 24.749345 
diff Energy = 29.236442 
Finish ICM step! 
iter = 27, loglik= 76898120.000000, dloglik=0.000208 
predict Y and V! 
diff Energy = 1.320942 
diff Energy = 91.111114 
diff Energy = 49.831803 
diff Energy = 6.696876 
Finish ICM step! 
iter = 28, loglik= 76916800.000000, dloglik=0.000243 
predict Y and V! 
diff Energy = 32.919645 
diff Energy = 6.939411 
diff Energy = 35.975508 
Finish ICM step! 
iter = 29, loglik= 76937328.000000, dloglik=0.000267 
predict Y and V! 
diff Energy = 28.434985 
diff Energy = 23.599782 
diff Energy = 1.074036 
Finish ICM step! 
iter = 30, loglik= 76959064.000000, dloglik=0.000283 
21824.449 sec elapsed
**** Job ends ****
Thu Mar 30 07:24:19 EDT 2023
