Adding LIBD modules
Loading git
Loading LIBD module for git-status-size/github
Loading LIBD module for git-lfs/2.8.0
Loading LIBD module for rmate/1.5.9
Loading LIBD module for ruby/2.6.4p104
Loading conda_R/4.1.x
**** Job starts ****
Wed Nov  2 17:06:36 EDT 2022
**** JHPCE info ****
User: mtippani
Job id: 621925
Job name: PRECAST_k16-20
Hostname: compute-095.cm.cluster
Task id: 20
Unloading conda_R/4.1.x
Loading conda_R/devel

The following have been reloaded with a version change:
  1) conda_R/4.1.x => conda_R/devel


Currently Loaded Modules:
  1) matlab/R2019a     6) COMMUNITY_CENTOS7_DEFAULT_ENV  11) ruby/2.6.4p104
  2) stata/17          7) JHPCE_CENTOS7_DEFAULT_ENV      12) rmate/1.5.9
  3) JHPCE_tools/1.0   8) git-status-size/github         13) conda/3-4.6.14
  4) sge/8.1.9         9) git/2.28.0                     14) conda_R/devel
  5) gcc/4.4.7        10) git-lfs/2.8.0

 

Filter spots and features from Raw count data...
 
 
Calculating gene variances
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Calculating feature variances of standardized and clipped values
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Find the spatially variables genes by SPARK-X...

## ===== SPARK-X INPUT INFORMATION ====
## number of total samples: 14172
## number of total genes: 5000
## Running with single core, may take some time 

## Testing With Projection Kernel
## Testing With Gaussian Kernel 1
## Testing With Gaussian Kernel 2
## Testing With Gaussian Kernel 3
## Testing With Gaussian Kernel 4
## Testing With Gaussian Kernel 5
## Testing With Cosine Kernel 1
## Testing With Cosine Kernel 2
## Testing With Cosine Kernel 3
## Testing With Cosine Kernel 4
## Testing With Cosine Kernel 5
Calculating gene variances
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Calculating feature variances of standardized and clipped values
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Find the spatially variables genes by SPARK-X...

## ===== SPARK-X INPUT INFORMATION ====
## number of total samples: 19762
## number of total genes: 5000
## Running with single core, may take some time 

## Testing With Projection Kernel
## Testing With Gaussian Kernel 1
## Testing With Gaussian Kernel 2
## Testing With Gaussian Kernel 3
## Testing With Gaussian Kernel 4
## Testing With Gaussian Kernel 5
## Testing With Cosine Kernel 1
## Testing With Cosine Kernel 2
## Testing With Cosine Kernel 3
## Testing With Cosine Kernel 4
## Testing With Cosine Kernel 5
Calculating gene variances
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Calculating feature variances of standardized and clipped values
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Find the spatially variables genes by SPARK-X...

## ===== SPARK-X INPUT INFORMATION ====
## number of total samples: 14117
## number of total genes: 5000
## Running with single core, may take some time 

## Testing With Projection Kernel
## Testing With Gaussian Kernel 1
## Testing With Gaussian Kernel 2
## Testing With Gaussian Kernel 3
## Testing With Gaussian Kernel 4
## Testing With Gaussian Kernel 5
## Testing With Cosine Kernel 1
## Testing With Cosine Kernel 2
## Testing With Cosine Kernel 3
## Testing With Cosine Kernel 4
## Testing With Cosine Kernel 5
Calculating gene variances
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Calculating feature variances of standardized and clipped values
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Find the spatially variables genes by SPARK-X...

## ===== SPARK-X INPUT INFORMATION ====
## number of total samples: 8670
## number of total genes: 5000
## Running with single core, may take some time 

## Testing With Projection Kernel
## Testing With Gaussian Kernel 1
## Testing With Gaussian Kernel 2
## Testing With Gaussian Kernel 3
## Testing With Gaussian Kernel 4
## Testing With Gaussian Kernel 5
## Testing With Cosine Kernel 1
## Testing With Cosine Kernel 2
## Testing With Cosine Kernel 3
## Testing With Cosine Kernel 4
## Testing With Cosine Kernel 5
Calculating gene variances
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Calculating feature variances of standardized and clipped values
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Find the spatially variables genes by SPARK-X...

## ===== SPARK-X INPUT INFORMATION ====
## number of total samples: 14400
## number of total genes: 5000
## Running with single core, may take some time 

## Testing With Projection Kernel
## Testing With Gaussian Kernel 1
## Testing With Gaussian Kernel 2
## Testing With Gaussian Kernel 3
## Testing With Gaussian Kernel 4
## Testing With Gaussian Kernel 5
## Testing With Cosine Kernel 1
## Testing With Cosine Kernel 2
## Testing With Cosine Kernel 3
## Testing With Cosine Kernel 4
## Testing With Cosine Kernel 5
Calculating gene variances
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Calculating feature variances of standardized and clipped values
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Find the spatially variables genes by SPARK-X...

## ===== SPARK-X INPUT INFORMATION ====
## number of total samples: 18746
## number of total genes: 5000
## Running with single core, may take some time 

## Testing With Projection Kernel
## Testing With Gaussian Kernel 1
## Testing With Gaussian Kernel 2
## Testing With Gaussian Kernel 3
## Testing With Gaussian Kernel 4
## Testing With Gaussian Kernel 5
## Testing With Cosine Kernel 1
## Testing With Cosine Kernel 2
## Testing With Cosine Kernel 3
## Testing With Cosine Kernel 4
## Testing With Cosine Kernel 5
Calculating gene variances
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Calculating feature variances of standardized and clipped values
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Find the spatially variables genes by SPARK-X...

## ===== SPARK-X INPUT INFORMATION ====
## number of total samples: 20693
## number of total genes: 5000
## Running with single core, may take some time 

## Testing With Projection Kernel
## Testing With Gaussian Kernel 1
## Testing With Gaussian Kernel 2
## Testing With Gaussian Kernel 3
## Testing With Gaussian Kernel 4
## Testing With Gaussian Kernel 5
## Testing With Cosine Kernel 1
## Testing With Cosine Kernel 2
## Testing With Cosine Kernel 3
## Testing With Cosine Kernel 4
## Testing With Cosine Kernel 5
Calculating gene variances
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Calculating feature variances of standardized and clipped values
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Find the spatially variables genes by SPARK-X...

## ===== SPARK-X INPUT INFORMATION ====
## number of total samples: 8390
## number of total genes: 5000
## Running with single core, may take some time 

## Testing With Projection Kernel
## Testing With Gaussian Kernel 1
## Testing With Gaussian Kernel 2
## Testing With Gaussian Kernel 3
## Testing With Gaussian Kernel 4
## Testing With Gaussian Kernel 5
## Testing With Cosine Kernel 1
## Testing With Cosine Kernel 2
## Testing With Cosine Kernel 3
## Testing With Cosine Kernel 4
## Testing With Cosine Kernel 5
Calculating gene variances
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Calculating feature variances of standardized and clipped values
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Find the spatially variables genes by SPARK-X...

## ===== SPARK-X INPUT INFORMATION ====
## number of total samples: 18159
## number of total genes: 5000
## Running with single core, may take some time 

## Testing With Projection Kernel
## Testing With Gaussian Kernel 1
## Testing With Gaussian Kernel 2
## Testing With Gaussian Kernel 3
## Testing With Gaussian Kernel 4
## Testing With Gaussian Kernel 5
## Testing With Cosine Kernel 1
## Testing With Cosine Kernel 2
## Testing With Cosine Kernel 3
## Testing With Cosine Kernel 4
## Testing With Cosine Kernel 5
Select common top variable genes  for multiple samples...
Filter spots and features from SVGs(HVGs) count data...
Performing log-normalization
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Performing log-normalization
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Performing log-normalization
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Performing log-normalization
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Performing log-normalization
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Performing log-normalization
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Performing log-normalization
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Performing log-normalization
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Performing log-normalization
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Warning messages:
1: In FUN(newX[, i], ...) : There are p-values that are exactly 1!
2: In FUN(newX[, i], ...) : There are p-values that are exactly 1!
[[1]]
An object of class Seurat 
2000 features across 14143 samples within 1 assay 
Active assay: RNA (2000 features, 1397 variable features)

[[2]]
An object of class Seurat 
2000 features across 19678 samples within 1 assay 
Active assay: RNA (2000 features, 1541 variable features)

[[3]]
An object of class Seurat 
2000 features across 14104 samples within 1 assay 
Active assay: RNA (2000 features, 1447 variable features)

[[4]]
An object of class Seurat 
2000 features across 8662 samples within 1 assay 
Active assay: RNA (2000 features, 1374 variable features)

[[5]]
An object of class Seurat 
2000 features across 14390 samples within 1 assay 
Active assay: RNA (2000 features, 1495 variable features)

[[6]]
An object of class Seurat 
2000 features across 18709 samples within 1 assay 
Active assay: RNA (2000 features, 1159 variable features)

[[7]]
An object of class Seurat 
2000 features across 20614 samples within 1 assay 
Active assay: RNA (2000 features, 1612 variable features)

[[8]]
An object of class Seurat 
2000 features across 8389 samples within 1 assay 
Active assay: RNA (2000 features, 1200 variable features)

[[9]]
An object of class Seurat 
2000 features across 18041 samples within 1 assay 
Active assay: RNA (2000 features, 1385 variable features)

Neighbors were identified for 14143 out of 14143 spots.
Neighbors were identified for 19678 out of 19678 spots.
Neighbors were identified for 14104 out of 14104 spots.
Neighbors were identified for 8662 out of 8662 spots.
Neighbors were identified for 14390 out of 14390 spots.
Neighbors were identified for 18709 out of 18709 spots.
Neighbors were identified for 20611 out of 20614 spots.
Neighbors were identified for 8389 out of 8389 spots.
Neighbors were identified for 18038 out of 18041 spots.
Intergrative data info.: 9 samples, 2000 genes X 136730 spots------
PRECAST model setting: error_heter=TRUE, Sigma_equal=FALSE, Sigma_diag=TRUE, mix_prop_heter=TRUE
Start computing intial values... 

fitting ...
  |                                                                              |                                                                      |   0%  |                                                                              |===================================                                   |  50%  |                                                                              |======================================================================| 100%
----Fitting PRECAST model----------------

variable initialize finish! 
predict Y and V! 
diff Energy = 47.565360 
Finish ICM step! 
iter = 2, loglik= -69737616.000000, dloglik=0.967526 
predict Y and V! 
diff Energy = 47.817094 
diff Energy = 66.449447 
diff Energy = 24.156305 
diff Energy = 151.946724 
diff Energy = 6.493108 
diff Energy = 42.746161 
diff Energy = 43.655861 
Finish ICM step! 
iter = 3, loglik= -68933192.000000, dloglik=0.011535 
predict Y and V! 
diff Energy = 271.751988 
diff Energy = 438.207077 
diff Energy = 290.170618 
diff Energy = 32.837688 
diff Energy = 406.021893 
diff Energy = 302.256270 
diff Energy = 458.340844 
diff Energy = 174.713208 
diff Energy = 50.658072 
Finish ICM step! 
iter = 4, loglik= -68631376.000000, dloglik=0.004378 
predict Y and V! 
diff Energy = 143.460244 
diff Energy = 195.042762 
diff Energy = 112.175596 
diff Energy = 12.854779 
diff Energy = 124.368726 
diff Energy = 188.017475 
diff Energy = 218.298576 
diff Energy = 120.402955 
diff Energy = 5.348670 
Finish ICM step! 
iter = 5, loglik= -68460832.000000, dloglik=0.002485 
predict Y and V! 
diff Energy = 99.591886 
diff Energy = 107.675082 
diff Energy = 103.810843 
diff Energy = 18.808792 
diff Energy = 144.828409 
diff Energy = 88.965134 
diff Energy = 177.490023 
diff Energy = 55.085914 
diff Energy = 36.639468 
Finish ICM step! 
iter = 6, loglik= -68357200.000000, dloglik=0.001514 
predict Y and V! 
diff Energy = 84.535392 
diff Energy = 69.111959 
diff Energy = 44.351638 
diff Energy = 3.111372 
diff Energy = 85.172672 
diff Energy = 72.403440 
diff Energy = 140.891495 
diff Energy = 23.883501 
diff Energy = 25.080715 
Finish ICM step! 
iter = 7, loglik= -68288824.000000, dloglik=0.001000 
predict Y and V! 
diff Energy = 50.644675 
diff Energy = 20.012760 
diff Energy = 32.691155 
diff Energy = 109.856821 
diff Energy = 76.487006 
diff Energy = 73.865541 
diff Energy = 43.118231 
diff Energy = 88.138277 
Finish ICM step! 
iter = 8, loglik= -68239320.000000, dloglik=0.000725 
predict Y and V! 
diff Energy = 52.709609 
diff Energy = 117.141255 
diff Energy = 65.479784 
diff Energy = 4.428372 
diff Energy = 37.409285 
diff Energy = 110.640348 
diff Energy = 9.289119 
diff Energy = 11.628345 
Finish ICM step! 
iter = 9, loglik= -68202280.000000, dloglik=0.000543 
predict Y and V! 
diff Energy = 46.286431 
diff Energy = 30.869034 
diff Energy = 32.240110 
diff Energy = 4.261728 
diff Energy = 27.894781 
diff Energy = 14.049805 
diff Energy = 34.576909 
diff Energy = 45.256717 
diff Energy = 4.808760 
Finish ICM step! 
iter = 10, loglik= -68174016.000000, dloglik=0.000414 
predict Y and V! 
diff Energy = 23.781521 
diff Energy = 25.554272 
diff Energy = 10.199249 
diff Energy = 3.201866 
diff Energy = 27.529803 
diff Energy = 7.218769 
diff Energy = 9.971905 
diff Energy = 15.433654 
Finish ICM step! 
iter = 11, loglik= -68152064.000000, dloglik=0.000322 
predict Y and V! 
diff Energy = 49.248305 
diff Energy = 11.024916 
diff Energy = 18.901506 
diff Energy = 3.868682 
diff Energy = 15.078434 
diff Energy = 22.301274 
diff Energy = 7.010077 
diff Energy = 11.866240 
Finish ICM step! 
iter = 12, loglik= -68135032.000000, dloglik=0.000250 
predict Y and V! 
diff Energy = 17.971080 
diff Energy = 6.930852 
diff Energy = 10.135304 
diff Energy = 1.911707 
diff Energy = 34.112694 
diff Energy = 2.836695 
diff Energy = 17.052193 
diff Energy = 5.557477 
diff Energy = 21.467929 
Finish ICM step! 
iter = 13, loglik= -68121024.000000, dloglik=0.000206 
predict Y and V! 
diff Energy = 37.310596 
diff Energy = 7.636100 
diff Energy = 7.626651 
diff Energy = 14.287317 
diff Energy = 4.965733 
diff Energy = 6.220453 
diff Energy = 1.383265 
Finish ICM step! 
iter = 14, loglik= -68109296.000000, dloglik=0.000172 
predict Y and V! 
diff Energy = 0.660080 
diff Energy = 2.952058 
diff Energy = 9.167154 
diff Energy = 2.914171 
diff Energy = 25.853876 
diff Energy = 49.457538 
diff Energy = 23.369482 
diff Energy = 15.674740 
Finish ICM step! 
iter = 15, loglik= -68099432.000000, dloglik=0.000145 
predict Y and V! 
diff Energy = 8.303540 
diff Energy = 5.743532 
diff Energy = 8.492048 
diff Energy = 4.917869 
diff Energy = 73.869833 
diff Energy = 7.345167 
diff Energy = 1.649967 
diff Energy = 55.378790 
Finish ICM step! 
iter = 16, loglik= -68090976.000000, dloglik=0.000124 
predict Y and V! 
diff Energy = 12.254426 
diff Energy = 2.667680 
diff Energy = 1.017137 
diff Energy = 0.147747 
diff Energy = 0.752022 
diff Energy = 22.100189 
diff Energy = 3.268694 
diff Energy = 8.145724 
diff Energy = 2.041573 
Finish ICM step! 
iter = 17, loglik= -68083424.000000, dloglik=0.000111 
predict Y and V! 
diff Energy = 1.691217 
diff Energy = 8.996603 
diff Energy = 7.107848 
diff Energy = 0.146843 
diff Energy = 29.316695 
diff Energy = 0.786407 
diff Energy = 19.346985 
diff Energy = 13.843350 
diff Energy = 3.422263 
Finish ICM step! 
iter = 18, loglik= -68076632.000000, dloglik=0.000100 
predict Y and V! 
diff Energy = 10.485613 
diff Energy = 7.089455 
diff Energy = 41.609348 
diff Energy = 16.737100 
diff Energy = 38.414079 
diff Energy = 3.529786 
diff Energy = 11.364488 
diff Energy = 25.406306 
Finish ICM step! 
iter = 19, loglik= -68070432.000000, dloglik=0.000091 
predict Y and V! 
diff Energy = 4.918667 
diff Energy = 9.453107 
diff Energy = 0.163713 
diff Energy = 4.851359 
diff Energy = 17.118953 
diff Energy = 4.882069 
diff Energy = 6.028842 
diff Energy = 6.593499 
diff Energy = 5.791193 
Finish ICM step! 
iter = 20, loglik= -68064392.000000, dloglik=0.000089 
predict Y and V! 
diff Energy = 9.091217 
diff Energy = 0.238446 
diff Energy = 2.059805 
diff Energy = 0.137606 
diff Energy = 5.322762 
diff Energy = 11.061409 
diff Energy = 27.300006 
diff Energy = 19.110986 
Finish ICM step! 
iter = 21, loglik= -68058544.000000, dloglik=0.000086 
predict Y and V! 
diff Energy = 9.645388 
diff Energy = 13.505701 
diff Energy = 0.030424 
diff Energy = 12.658876 
diff Energy = 4.573601 
diff Energy = 7.849354 
diff Energy = 4.655288 
diff Energy = 2.533858 
diff Energy = 22.220199 
Finish ICM step! 
iter = 22, loglik= -68052808.000000, dloglik=0.000084 
predict Y and V! 
diff Energy = 3.270441 
diff Energy = 15.336450 
diff Energy = 3.204437 
diff Energy = 5.813213 
diff Energy = 27.534833 
diff Energy = 20.869017 
diff Energy = 1.133805 
diff Energy = 34.530462 
diff Energy = 16.602597 
Finish ICM step! 
iter = 23, loglik= -68046920.000000, dloglik=0.000087 
predict Y and V! 
diff Energy = 6.537920 
diff Energy = 5.115696 
diff Energy = 11.645073 
diff Energy = 1.905071 
diff Energy = 11.002865 
diff Energy = 20.371800 
diff Energy = 6.259288 
diff Energy = 4.033480 
Finish ICM step! 
iter = 24, loglik= -68040832.000000, dloglik=0.000089 
predict Y and V! 
diff Energy = 12.923031 
diff Energy = 1.676494 
diff Energy = 2.543059 
diff Energy = 7.569268 
diff Energy = 6.725761 
diff Energy = 19.399578 
diff Energy = 73.514150 
diff Energy = 2.455318 
diff Energy = 0.540502 
Finish ICM step! 
iter = 25, loglik= -68034584.000000, dloglik=0.000092 
predict Y and V! 
diff Energy = 8.236588 
diff Energy = 19.665844 
diff Energy = 0.149590 
diff Energy = 2.572614 
diff Energy = 0.659213 
diff Energy = 22.176366 
diff Energy = 2.644801 
diff Energy = 1.878774 
diff Energy = 8.410909 
Finish ICM step! 
iter = 26, loglik= -68027872.000000, dloglik=0.000099 
predict Y and V! 
diff Energy = 13.896241 
diff Energy = 10.003444 
diff Energy = 3.957180 
diff Energy = 2.958488 
diff Energy = 9.474291 
diff Energy = 11.299362 
diff Energy = 17.599617 
diff Energy = 13.407339 
Finish ICM step! 
iter = 27, loglik= -68020904.000000, dloglik=0.000102 
predict Y and V! 
diff Energy = 4.737705 
diff Energy = 2.203078 
diff Energy = 1.540440 
diff Energy = 16.529979 
diff Energy = 30.473314 
diff Energy = 6.161914 
diff Energy = 18.498967 
Finish ICM step! 
iter = 28, loglik= -68013712.000000, dloglik=0.000106 
predict Y and V! 
diff Energy = 2.898494 
diff Energy = 3.592851 
diff Energy = 9.293856 
diff Energy = 15.752884 
diff Energy = 13.405958 
diff Energy = 18.511577 
diff Energy = 5.306122 
diff Energy = 11.001652 
Finish ICM step! 
iter = 29, loglik= -68006600.000000, dloglik=0.000105 
predict Y and V! 
diff Energy = 0.147317 
diff Energy = 5.067000 
diff Energy = 1.008140 
diff Energy = 6.020156 
diff Energy = 47.191470 
diff Energy = 13.176220 
Finish ICM step! 
iter = 30, loglik= -67999216.000000, dloglik=0.000109 
21899.138 sec elapsed
**** Job ends ****
Wed Nov  2 23:22:22 EDT 2022
**** Job starts ****
Tue Mar 21 19:53:08 EDT 2023
**** JHPCE info ****
User: enelson
Job id: 3066427
Job name: PRECAST_k16-24
Hostname: compute-098.cm.cluster
Task id: 20
Loading conda_R/devel

Currently Loaded Modules:
  1) matlab/R2019a     6) COMMUNITY_CENTOS7_DEFAULT_ENV
  2) stata/17          7) JHPCE_CENTOS7_DEFAULT_ENV
  3) JHPCE_tools/1.0   8) conda/3-4.6.14
  4) sge/8.1.9         9) conda_R/devel
  5) gcc/4.4.7

 

Error in library(Seurat) : there is no package called ‘Seurat’
Calls: suppressPackageStartupMessages -> withCallingHandlers -> library
Execution halted
**** Job ends ****
Tue Mar 21 19:53:11 EDT 2023
**** Job starts ****
Tue Mar 21 20:03:23 EDT 2023
**** JHPCE info ****
User: enelson
Job id: 3066438
Job name: PRECAST_k16-24
Hostname: compute-098.cm.cluster
Task id: 20
Loading conda_R/devel

Currently Loaded Modules:
  1) matlab/R2019a     6) COMMUNITY_CENTOS7_DEFAULT_ENV
  2) stata/17          7) JHPCE_CENTOS7_DEFAULT_ENV
  3) JHPCE_tools/1.0   8) conda/3-4.6.14
  4) sge/8.1.9         9) conda_R/devel
  5) gcc/4.4.7

 

Error in library("Seurat") : there is no package called ‘Seurat’
Calls: suppressPackageStartupMessages -> withCallingHandlers -> library
Execution halted
**** Job ends ****
Tue Mar 21 20:03:25 EDT 2023
**** Job starts ****
Wed Mar 22 03:54:43 EDT 2023
**** JHPCE info ****
User: enelson
Job id: 3066458
Job name: PRECAST_k16-24
Hostname: compute-097.cm.cluster
Task id: 20
Loading conda_R/4.2.x

Currently Loaded Modules:
  1) matlab/R2019a     6) COMMUNITY_CENTOS7_DEFAULT_ENV
  2) stata/17          7) JHPCE_CENTOS7_DEFAULT_ENV
  3) JHPCE_tools/1.0   8) conda/3-4.11.0
  4) sge/8.1.9         9) conda_R/4.2.x
  5) gcc/4.4.7

 

Filter spots and features from Raw count data...
 
 
Calculating gene variances
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Calculating feature variances of standardized and clipped values
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Find the spatially variables genes by SPARK-X...

## ===== SPARK-X INPUT INFORMATION ====
## number of total samples: 14172
## number of total genes: 5000
## Running with single core, may take some time 

## Testing With Projection Kernel
## Testing With Gaussian Kernel 1
## Testing With Gaussian Kernel 2
## Testing With Gaussian Kernel 3
## Testing With Gaussian Kernel 4
## Testing With Gaussian Kernel 5
## Testing With Cosine Kernel 1
## Testing With Cosine Kernel 2
## Testing With Cosine Kernel 3
## Testing With Cosine Kernel 4
## Testing With Cosine Kernel 5
Calculating gene variances
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Calculating feature variances of standardized and clipped values
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Find the spatially variables genes by SPARK-X...

## ===== SPARK-X INPUT INFORMATION ====
## number of total samples: 19762
## number of total genes: 5000
## Running with single core, may take some time 

## Testing With Projection Kernel
## Testing With Gaussian Kernel 1
## Testing With Gaussian Kernel 2
## Testing With Gaussian Kernel 3
## Testing With Gaussian Kernel 4
## Testing With Gaussian Kernel 5
## Testing With Cosine Kernel 1
## Testing With Cosine Kernel 2
## Testing With Cosine Kernel 3
## Testing With Cosine Kernel 4
## Testing With Cosine Kernel 5
Calculating gene variances
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Calculating feature variances of standardized and clipped values
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Find the spatially variables genes by SPARK-X...

## ===== SPARK-X INPUT INFORMATION ====
## number of total samples: 14117
## number of total genes: 5000
## Running with single core, may take some time 

## Testing With Projection Kernel
## Testing With Gaussian Kernel 1
## Testing With Gaussian Kernel 2
## Testing With Gaussian Kernel 3
## Testing With Gaussian Kernel 4
## Testing With Gaussian Kernel 5
## Testing With Cosine Kernel 1
## Testing With Cosine Kernel 2
## Testing With Cosine Kernel 3
## Testing With Cosine Kernel 4
## Testing With Cosine Kernel 5
Calculating gene variances
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Calculating feature variances of standardized and clipped values
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Find the spatially variables genes by SPARK-X...

## ===== SPARK-X INPUT INFORMATION ====
## number of total samples: 8670
## number of total genes: 5000
## Running with single core, may take some time 

## Testing With Projection Kernel
## Testing With Gaussian Kernel 1
## Testing With Gaussian Kernel 2
## Testing With Gaussian Kernel 3
## Testing With Gaussian Kernel 4
## Testing With Gaussian Kernel 5
## Testing With Cosine Kernel 1
## Testing With Cosine Kernel 2
## Testing With Cosine Kernel 3
## Testing With Cosine Kernel 4
## Testing With Cosine Kernel 5
Calculating gene variances
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Calculating feature variances of standardized and clipped values
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Find the spatially variables genes by SPARK-X...

## ===== SPARK-X INPUT INFORMATION ====
## number of total samples: 14400
## number of total genes: 5000
## Running with single core, may take some time 

## Testing With Projection Kernel
## Testing With Gaussian Kernel 1
## Testing With Gaussian Kernel 2
## Testing With Gaussian Kernel 3
## Testing With Gaussian Kernel 4
## Testing With Gaussian Kernel 5
## Testing With Cosine Kernel 1
## Testing With Cosine Kernel 2
## Testing With Cosine Kernel 3
## Testing With Cosine Kernel 4
## Testing With Cosine Kernel 5
Calculating gene variances
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Calculating feature variances of standardized and clipped values
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Find the spatially variables genes by SPARK-X...

## ===== SPARK-X INPUT INFORMATION ====
## number of total samples: 18746
## number of total genes: 5000
## Running with single core, may take some time 

## Testing With Projection Kernel
## Testing With Gaussian Kernel 1
## Testing With Gaussian Kernel 2
## Testing With Gaussian Kernel 3
## Testing With Gaussian Kernel 4
## Testing With Gaussian Kernel 5
## Testing With Cosine Kernel 1
## Testing With Cosine Kernel 2
## Testing With Cosine Kernel 3
## Testing With Cosine Kernel 4
## Testing With Cosine Kernel 5
Calculating gene variances
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Calculating feature variances of standardized and clipped values
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Find the spatially variables genes by SPARK-X...

## ===== SPARK-X INPUT INFORMATION ====
## number of total samples: 20693
## number of total genes: 5000
## Running with single core, may take some time 

## Testing With Projection Kernel
## Testing With Gaussian Kernel 1
## Testing With Gaussian Kernel 2
## Testing With Gaussian Kernel 3
## Testing With Gaussian Kernel 4
## Testing With Gaussian Kernel 5
## Testing With Cosine Kernel 1
## Testing With Cosine Kernel 2
## Testing With Cosine Kernel 3
## Testing With Cosine Kernel 4
## Testing With Cosine Kernel 5
Calculating gene variances
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Calculating feature variances of standardized and clipped values
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Find the spatially variables genes by SPARK-X...

## ===== SPARK-X INPUT INFORMATION ====
## number of total samples: 8390
## number of total genes: 5000
## Running with single core, may take some time 

## Testing With Projection Kernel
## Testing With Gaussian Kernel 1
## Testing With Gaussian Kernel 2
## Testing With Gaussian Kernel 3
## Testing With Gaussian Kernel 4
## Testing With Gaussian Kernel 5
## Testing With Cosine Kernel 1
## Testing With Cosine Kernel 2
## Testing With Cosine Kernel 3
## Testing With Cosine Kernel 4
## Testing With Cosine Kernel 5
Calculating gene variances
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Calculating feature variances of standardized and clipped values
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Find the spatially variables genes by SPARK-X...

## ===== SPARK-X INPUT INFORMATION ====
## number of total samples: 18159
## number of total genes: 5000
## Running with single core, may take some time 

## Testing With Projection Kernel
## Testing With Gaussian Kernel 1
## Testing With Gaussian Kernel 2
## Testing With Gaussian Kernel 3
## Testing With Gaussian Kernel 4
## Testing With Gaussian Kernel 5
## Testing With Cosine Kernel 1
## Testing With Cosine Kernel 2
## Testing With Cosine Kernel 3
## Testing With Cosine Kernel 4
## Testing With Cosine Kernel 5
Calculating gene variances
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Calculating feature variances of standardized and clipped values
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Find the spatially variables genes by SPARK-X...

## ===== SPARK-X INPUT INFORMATION ====
## number of total samples: 15520
## number of total genes: 5000
## Running with single core, may take some time 

## Testing With Projection Kernel
## Testing With Gaussian Kernel 1
## Testing With Gaussian Kernel 2
## Testing With Gaussian Kernel 3
## Testing With Gaussian Kernel 4
## Testing With Gaussian Kernel 5
## Testing With Cosine Kernel 1
## Testing With Cosine Kernel 2
## Testing With Cosine Kernel 3
## Testing With Cosine Kernel 4
## Testing With Cosine Kernel 5
Select common top variable genes  for multiple samples...
Filter spots and features from SVGs(HVGs) count data...
Performing log-normalization
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Performing log-normalization
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Performing log-normalization
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Performing log-normalization
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Performing log-normalization
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Performing log-normalization
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Performing log-normalization
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Performing log-normalization
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Performing log-normalization
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Performing log-normalization
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Warning messages:
1: In FUN(newX[, i], ...) : There are p-values that are exactly 1!
2: In FUN(newX[, i], ...) : There are p-values that are exactly 1!
[[1]]
An object of class Seurat 
2000 features across 14140 samples within 1 assay 
Active assay: RNA (2000 features, 1403 variable features)

[[2]]
An object of class Seurat 
2000 features across 19639 samples within 1 assay 
Active assay: RNA (2000 features, 1524 variable features)

[[3]]
An object of class Seurat 
2000 features across 14101 samples within 1 assay 
Active assay: RNA (2000 features, 1447 variable features)

[[4]]
An object of class Seurat 
2000 features across 8661 samples within 1 assay 
Active assay: RNA (2000 features, 1367 variable features)

[[5]]
An object of class Seurat 
2000 features across 14381 samples within 1 assay 
Active assay: RNA (2000 features, 1494 variable features)

[[6]]
An object of class Seurat 
2000 features across 18701 samples within 1 assay 
Active assay: RNA (2000 features, 1146 variable features)

[[7]]
An object of class Seurat 
2000 features across 20598 samples within 1 assay 
Active assay: RNA (2000 features, 1623 variable features)

[[8]]
An object of class Seurat 
2000 features across 8389 samples within 1 assay 
Active assay: RNA (2000 features, 1214 variable features)

[[9]]
An object of class Seurat 
2000 features across 18016 samples within 1 assay 
Active assay: RNA (2000 features, 1363 variable features)

[[10]]
An object of class Seurat 
2000 features across 15345 samples within 1 assay 
Active assay: RNA (2000 features, 1509 variable features)

Neighbors were identified for 14140 out of 14140 spots.
Neighbors were identified for 19639 out of 19639 spots.
Neighbors were identified for 14101 out of 14101 spots.
Neighbors were identified for 8661 out of 8661 spots.
Neighbors were identified for 14381 out of 14381 spots.
Neighbors were identified for 18701 out of 18701 spots.
Neighbors were identified for 20595 out of 20598 spots.
Neighbors were identified for 8389 out of 8389 spots.
Neighbors were identified for 18012 out of 18016 spots.
Neighbors were identified for 15343 out of 15345 spots.
Intergrative data info.: 10 samples, 2000 genes X 151971 spots------
PRECAST model setting: error_heter=TRUE, Sigma_equal=FALSE, Sigma_diag=TRUE, mix_prop_heter=TRUE
Start computing intial values... 

fitting ...
  |                                                                              |                                                                      |   0%  |                                                                              |===================================                                   |  50%  |                                                                              |======================================================================| 100%
----Fitting PRECAST model----------------

variable initialize finish! 
predict Y and V! 
Finish ICM step! 
iter = 2, loglik= -79860440.000000, dloglik=0.962812 
predict Y and V! 
diff Energy = 53.721003 
diff Energy = 101.019564 
diff Energy = 4.748321 
diff Energy = 6.331098 
diff Energy = 110.492050 
diff Energy = 11.269884 
diff Energy = 8.316353 
diff Energy = 3.938526 
diff Energy = 46.412266 
Finish ICM step! 
iter = 3, loglik= -78806696.000000, dloglik=0.013195 
predict Y and V! 
diff Energy = 133.098068 
diff Energy = 134.476030 
diff Energy = 102.714903 
diff Energy = 58.871343 
diff Energy = 114.056053 
diff Energy = 70.614759 
diff Energy = 103.752194 
diff Energy = 41.980147 
diff Energy = 208.810640 
diff Energy = 116.446740 
Finish ICM step! 
iter = 4, loglik= -78465672.000000, dloglik=0.004327 
predict Y and V! 
diff Energy = 110.932617 
diff Energy = 153.447241 
diff Energy = 32.268108 
diff Energy = 90.049011 
diff Energy = 140.594245 
diff Energy = 41.965689 
diff Energy = 132.684838 
diff Energy = 19.058729 
diff Energy = 175.852358 
diff Energy = 177.914615 
Finish ICM step! 
iter = 5, loglik= -78289376.000000, dloglik=0.002247 
predict Y and V! 
diff Energy = 54.898113 
diff Energy = 96.452416 
diff Energy = 76.393410 
diff Energy = 73.361544 
diff Energy = 111.618150 
diff Energy = 58.037229 
diff Energy = 111.228115 
diff Energy = 18.736583 
diff Energy = 190.514205 
diff Energy = 164.661772 
Finish ICM step! 
iter = 6, loglik= -78181376.000000, dloglik=0.001379 
predict Y and V! 
diff Energy = 52.646360 
diff Energy = 68.638843 
diff Energy = 2.962289 
diff Energy = 56.337336 
diff Energy = 63.421321 
diff Energy = 17.852758 
diff Energy = 76.606745 
diff Energy = 3.688668 
diff Energy = 153.657946 
diff Energy = 56.436385 
Finish ICM step! 
iter = 7, loglik= -78109360.000000, dloglik=0.000921 
predict Y and V! 
diff Energy = 76.444294 
diff Energy = 24.538699 
diff Energy = 6.361219 
diff Energy = 37.595141 
diff Energy = 75.826431 
diff Energy = 44.443835 
diff Energy = 2.454706 
diff Energy = 11.925057 
diff Energy = 75.580899 
diff Energy = 82.711360 
Finish ICM step! 
iter = 8, loglik= -78057736.000000, dloglik=0.000661 
predict Y and V! 
diff Energy = 37.300598 
diff Energy = 3.462305 
diff Energy = 19.333465 
diff Energy = 37.675093 
diff Energy = 6.398393 
diff Energy = 10.240594 
diff Energy = 25.749109 
diff Energy = 47.738054 
diff Energy = 18.381395 
Finish ICM step! 
iter = 9, loglik= -78018024.000000, dloglik=0.000509 
predict Y and V! 
diff Energy = 4.410926 
diff Energy = 11.722659 
diff Energy = 12.366952 
diff Energy = 46.355537 
diff Energy = 42.650099 
diff Energy = 20.712176 
diff Energy = 16.284647 
diff Energy = 27.836172 
diff Energy = 20.787802 
Finish ICM step! 
iter = 10, loglik= -77985480.000000, dloglik=0.000417 
predict Y and V! 
diff Energy = 25.953976 
diff Energy = 7.416888 
diff Energy = 12.507792 
diff Energy = 1.680235 
diff Energy = 11.749746 
diff Energy = 3.155023 
diff Energy = 3.286537 
diff Energy = 13.701690 
diff Energy = 18.761032 
diff Energy = 24.104466 
Finish ICM step! 
iter = 11, loglik= -77959240.000000, dloglik=0.000336 
predict Y and V! 
diff Energy = 6.920706 
diff Energy = 0.117227 
diff Energy = 23.733759 
diff Energy = 12.877277 
diff Energy = 2.059224 
diff Energy = 9.786337 
diff Energy = 1.602366 
Finish ICM step! 
iter = 12, loglik= -77936984.000000, dloglik=0.000285 
predict Y and V! 
diff Energy = 8.834950 
diff Energy = 4.671091 
diff Energy = 2.057738 
diff Energy = 2.808896 
diff Energy = 9.819882 
diff Energy = 10.149865 
diff Energy = 11.214848 
diff Energy = 2.272144 
diff Energy = 23.676674 
diff Energy = 58.322933 
Finish ICM step! 
iter = 13, loglik= -77919744.000000, dloglik=0.000221 
predict Y and V! 
diff Energy = 35.506071 
diff Energy = 7.784549 
diff Energy = 4.502064 
diff Energy = 15.927791 
diff Energy = 5.019238 
diff Energy = 1.278697 
diff Energy = 40.196934 
diff Energy = 7.689013 
Finish ICM step! 
iter = 14, loglik= -77905848.000000, dloglik=0.000178 
