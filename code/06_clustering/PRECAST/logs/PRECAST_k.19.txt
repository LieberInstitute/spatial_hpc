Adding LIBD modules
Loading git
Loading LIBD module for git-status-size/github
Loading LIBD module for git-lfs/2.8.0
Loading LIBD module for rmate/1.5.9
Loading LIBD module for ruby/2.6.4p104
Loading conda_R/4.1.x
**** Job starts ****
Wed Nov  2 16:10:28 EDT 2022
**** JHPCE info ****
User: mtippani
Job id: 621925
Job name: PRECAST_k16-20
Hostname: compute-097.cm.cluster
Task id: 19
Unloading conda_R/4.1.x
Loading conda_R/devel

The following have been reloaded with a version change:
  1) conda_R/4.1.x => conda_R/devel


Currently Loaded Modules:
  1) matlab/R2019a     6) COMMUNITY_CENTOS7_DEFAULT_ENV  11) ruby/2.6.4p104
  2) stata/17          7) JHPCE_CENTOS7_DEFAULT_ENV      12) rmate/1.5.9
  3) JHPCE_tools/1.0   8) git-status-size/github         13) conda/3-4.6.14
  4) sge/8.1.9         9) git/2.28.0                     14) conda_R/devel
  5) gcc/4.4.7        10) git-lfs/2.8.0

 

Filter spots and features from Raw count data...
 
 
Calculating gene variances
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Calculating feature variances of standardized and clipped values
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Find the spatially variables genes by SPARK-X...

## ===== SPARK-X INPUT INFORMATION ====
## number of total samples: 14172
## number of total genes: 5000
## Running with single core, may take some time 

## Testing With Projection Kernel
## Testing With Gaussian Kernel 1
## Testing With Gaussian Kernel 2
## Testing With Gaussian Kernel 3
## Testing With Gaussian Kernel 4
## Testing With Gaussian Kernel 5
## Testing With Cosine Kernel 1
## Testing With Cosine Kernel 2
## Testing With Cosine Kernel 3
## Testing With Cosine Kernel 4
## Testing With Cosine Kernel 5
Calculating gene variances
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Calculating feature variances of standardized and clipped values
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Find the spatially variables genes by SPARK-X...

## ===== SPARK-X INPUT INFORMATION ====
## number of total samples: 19762
## number of total genes: 5000
## Running with single core, may take some time 

## Testing With Projection Kernel
## Testing With Gaussian Kernel 1
## Testing With Gaussian Kernel 2
## Testing With Gaussian Kernel 3
## Testing With Gaussian Kernel 4
## Testing With Gaussian Kernel 5
## Testing With Cosine Kernel 1
## Testing With Cosine Kernel 2
## Testing With Cosine Kernel 3
## Testing With Cosine Kernel 4
## Testing With Cosine Kernel 5
Calculating gene variances
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Calculating feature variances of standardized and clipped values
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Find the spatially variables genes by SPARK-X...

## ===== SPARK-X INPUT INFORMATION ====
## number of total samples: 14117
## number of total genes: 5000
## Running with single core, may take some time 

## Testing With Projection Kernel
## Testing With Gaussian Kernel 1
## Testing With Gaussian Kernel 2
## Testing With Gaussian Kernel 3
## Testing With Gaussian Kernel 4
## Testing With Gaussian Kernel 5
## Testing With Cosine Kernel 1
## Testing With Cosine Kernel 2
## Testing With Cosine Kernel 3
## Testing With Cosine Kernel 4
## Testing With Cosine Kernel 5
Calculating gene variances
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Calculating feature variances of standardized and clipped values
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Find the spatially variables genes by SPARK-X...

## ===== SPARK-X INPUT INFORMATION ====
## number of total samples: 8670
## number of total genes: 5000
## Running with single core, may take some time 

## Testing With Projection Kernel
## Testing With Gaussian Kernel 1
## Testing With Gaussian Kernel 2
## Testing With Gaussian Kernel 3
## Testing With Gaussian Kernel 4
## Testing With Gaussian Kernel 5
## Testing With Cosine Kernel 1
## Testing With Cosine Kernel 2
## Testing With Cosine Kernel 3
## Testing With Cosine Kernel 4
## Testing With Cosine Kernel 5
Calculating gene variances
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Calculating feature variances of standardized and clipped values
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Find the spatially variables genes by SPARK-X...

## ===== SPARK-X INPUT INFORMATION ====
## number of total samples: 14400
## number of total genes: 5000
## Running with single core, may take some time 

## Testing With Projection Kernel
## Testing With Gaussian Kernel 1
## Testing With Gaussian Kernel 2
## Testing With Gaussian Kernel 3
## Testing With Gaussian Kernel 4
## Testing With Gaussian Kernel 5
## Testing With Cosine Kernel 1
## Testing With Cosine Kernel 2
## Testing With Cosine Kernel 3
## Testing With Cosine Kernel 4
## Testing With Cosine Kernel 5
Calculating gene variances
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Calculating feature variances of standardized and clipped values
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Find the spatially variables genes by SPARK-X...

## ===== SPARK-X INPUT INFORMATION ====
## number of total samples: 18746
## number of total genes: 5000
## Running with single core, may take some time 

## Testing With Projection Kernel
## Testing With Gaussian Kernel 1
## Testing With Gaussian Kernel 2
## Testing With Gaussian Kernel 3
## Testing With Gaussian Kernel 4
## Testing With Gaussian Kernel 5
## Testing With Cosine Kernel 1
## Testing With Cosine Kernel 2
## Testing With Cosine Kernel 3
## Testing With Cosine Kernel 4
## Testing With Cosine Kernel 5
Calculating gene variances
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Calculating feature variances of standardized and clipped values
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Find the spatially variables genes by SPARK-X...

## ===== SPARK-X INPUT INFORMATION ====
## number of total samples: 20693
## number of total genes: 5000
## Running with single core, may take some time 

## Testing With Projection Kernel
## Testing With Gaussian Kernel 1
## Testing With Gaussian Kernel 2
## Testing With Gaussian Kernel 3
## Testing With Gaussian Kernel 4
## Testing With Gaussian Kernel 5
## Testing With Cosine Kernel 1
## Testing With Cosine Kernel 2
## Testing With Cosine Kernel 3
## Testing With Cosine Kernel 4
## Testing With Cosine Kernel 5
Calculating gene variances
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Calculating feature variances of standardized and clipped values
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Find the spatially variables genes by SPARK-X...

## ===== SPARK-X INPUT INFORMATION ====
## number of total samples: 8390
## number of total genes: 5000
## Running with single core, may take some time 

## Testing With Projection Kernel
## Testing With Gaussian Kernel 1
## Testing With Gaussian Kernel 2
## Testing With Gaussian Kernel 3
## Testing With Gaussian Kernel 4
## Testing With Gaussian Kernel 5
## Testing With Cosine Kernel 1
## Testing With Cosine Kernel 2
## Testing With Cosine Kernel 3
## Testing With Cosine Kernel 4
## Testing With Cosine Kernel 5
Calculating gene variances
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Calculating feature variances of standardized and clipped values
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Find the spatially variables genes by SPARK-X...

## ===== SPARK-X INPUT INFORMATION ====
## number of total samples: 18159
## number of total genes: 5000
## Running with single core, may take some time 

## Testing With Projection Kernel
## Testing With Gaussian Kernel 1
## Testing With Gaussian Kernel 2
## Testing With Gaussian Kernel 3
## Testing With Gaussian Kernel 4
## Testing With Gaussian Kernel 5
## Testing With Cosine Kernel 1
## Testing With Cosine Kernel 2
## Testing With Cosine Kernel 3
## Testing With Cosine Kernel 4
## Testing With Cosine Kernel 5
Select common top variable genes  for multiple samples...
Filter spots and features from SVGs(HVGs) count data...
Performing log-normalization
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Performing log-normalization
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Performing log-normalization
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Performing log-normalization
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Performing log-normalization
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Performing log-normalization
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Performing log-normalization
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Performing log-normalization
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Performing log-normalization
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Warning messages:
1: In FUN(newX[, i], ...) : There are p-values that are exactly 1!
2: In FUN(newX[, i], ...) : There are p-values that are exactly 1!
[[1]]
An object of class Seurat 
2000 features across 14143 samples within 1 assay 
Active assay: RNA (2000 features, 1397 variable features)

[[2]]
An object of class Seurat 
2000 features across 19678 samples within 1 assay 
Active assay: RNA (2000 features, 1541 variable features)

[[3]]
An object of class Seurat 
2000 features across 14104 samples within 1 assay 
Active assay: RNA (2000 features, 1447 variable features)

[[4]]
An object of class Seurat 
2000 features across 8662 samples within 1 assay 
Active assay: RNA (2000 features, 1374 variable features)

[[5]]
An object of class Seurat 
2000 features across 14390 samples within 1 assay 
Active assay: RNA (2000 features, 1495 variable features)

[[6]]
An object of class Seurat 
2000 features across 18709 samples within 1 assay 
Active assay: RNA (2000 features, 1159 variable features)

[[7]]
An object of class Seurat 
2000 features across 20614 samples within 1 assay 
Active assay: RNA (2000 features, 1612 variable features)

[[8]]
An object of class Seurat 
2000 features across 8389 samples within 1 assay 
Active assay: RNA (2000 features, 1200 variable features)

[[9]]
An object of class Seurat 
2000 features across 18041 samples within 1 assay 
Active assay: RNA (2000 features, 1385 variable features)

Neighbors were identified for 14143 out of 14143 spots.
Neighbors were identified for 19678 out of 19678 spots.
Neighbors were identified for 14104 out of 14104 spots.
Neighbors were identified for 8662 out of 8662 spots.
Neighbors were identified for 14390 out of 14390 spots.
Neighbors were identified for 18709 out of 18709 spots.
Neighbors were identified for 20611 out of 20614 spots.
Neighbors were identified for 8389 out of 8389 spots.
Neighbors were identified for 18038 out of 18041 spots.
Intergrative data info.: 9 samples, 2000 genes X 136730 spots------
PRECAST model setting: error_heter=TRUE, Sigma_equal=FALSE, Sigma_diag=TRUE, mix_prop_heter=TRUE
Start computing intial values... 

fitting ...
  |                                                                              |                                                                      |   0%  |                                                                              |===================================                                   |  50%  |                                                                              |======================================================================| 100%
----Fitting PRECAST model----------------

variable initialize finish! 
predict Y and V! 
diff Energy = 10.588395 
diff Energy = 10.169071 
diff Energy = 0.985143 
Finish ICM step! 
iter = 2, loglik= -69740888.000000, dloglik=0.967524 
predict Y and V! 
diff Energy = 73.635553 
diff Energy = 39.907963 
diff Energy = 26.251321 
diff Energy = 85.859673 
diff Energy = 2.075605 
diff Energy = 43.968213 
diff Energy = 82.632985 
diff Energy = 23.686028 
Finish ICM step! 
iter = 3, loglik= -68935584.000000, dloglik=0.011547 
predict Y and V! 
diff Energy = 289.896142 
diff Energy = 374.516060 
diff Energy = 55.504270 
diff Energy = 259.039998 
diff Energy = 349.806785 
diff Energy = 99.551964 
diff Energy = 417.838386 
diff Energy = 170.276301 
diff Energy = 519.139039 
Finish ICM step! 
iter = 4, loglik= -68631880.000000, dloglik=0.004406 
predict Y and V! 
diff Energy = 138.574638 
diff Energy = 175.822532 
diff Energy = 74.102663 
diff Energy = 80.840068 
diff Energy = 134.199596 
diff Energy = 197.037120 
diff Energy = 209.668928 
diff Energy = 109.212461 
diff Energy = 234.447367 
Finish ICM step! 
iter = 5, loglik= -68462176.000000, dloglik=0.002473 
predict Y and V! 
diff Energy = 123.770643 
diff Energy = 61.208961 
diff Energy = 100.396948 
diff Energy = 78.720888 
diff Energy = 124.327473 
diff Energy = 113.401046 
diff Energy = 159.791103 
diff Energy = 62.472667 
diff Energy = 188.920367 
Finish ICM step! 
iter = 6, loglik= -68358248.000000, dloglik=0.001518 
predict Y and V! 
diff Energy = 85.505447 
diff Energy = 48.068130 
diff Energy = 43.045140 
diff Energy = 66.227843 
diff Energy = 101.347508 
diff Energy = 97.467924 
diff Energy = 72.877244 
diff Energy = 72.777613 
diff Energy = 110.152355 
Finish ICM step! 
iter = 7, loglik= -68289384.000000, dloglik=0.001007 
predict Y and V! 
diff Energy = 77.676406 
diff Energy = 120.801801 
diff Energy = 92.201961 
diff Energy = 65.128418 
diff Energy = 28.789634 
diff Energy = 35.440761 
diff Energy = 86.668299 
diff Energy = 63.068419 
diff Energy = 123.183209 
Finish ICM step! 
iter = 8, loglik= -68239496.000000, dloglik=0.000731 
predict Y and V! 
diff Energy = 10.470289 
diff Energy = 4.018676 
diff Energy = 36.907458 
diff Energy = 15.645416 
diff Energy = 15.414818 
diff Energy = 16.315075 
diff Energy = 29.570149 
diff Energy = 54.065227 
diff Energy = 44.700997 
Finish ICM step! 
iter = 9, loglik= -68201928.000000, dloglik=0.000551 
predict Y and V! 
diff Energy = 70.747977 
diff Energy = 1.002334 
diff Energy = 16.829545 
diff Energy = 10.764572 
diff Energy = 12.473701 
diff Energy = 12.425187 
diff Energy = 6.919513 
diff Energy = 35.068369 
diff Energy = 20.366552 
Finish ICM step! 
iter = 10, loglik= -68173392.000000, dloglik=0.000418 
predict Y and V! 
diff Energy = 2.274426 
diff Energy = 6.136076 
diff Energy = 23.872938 
diff Energy = 21.309434 
diff Energy = 18.530335 
diff Energy = 14.364295 
diff Energy = 40.898026 
diff Energy = 10.796254 
diff Energy = 4.349720 
Finish ICM step! 
iter = 11, loglik= -68151608.000000, dloglik=0.000320 
predict Y and V! 
diff Energy = 3.587632 
diff Energy = 0.553523 
diff Energy = 21.181158 
diff Energy = 5.194754 
diff Energy = 8.965812 
diff Energy = 8.689801 
diff Energy = 13.662682 
diff Energy = 7.354985 
diff Energy = 8.818955 
Finish ICM step! 
iter = 12, loglik= -68134568.000000, dloglik=0.000250 
predict Y and V! 
diff Energy = 25.632833 
diff Energy = 4.722115 
diff Energy = 5.051696 
diff Energy = 7.051686 
diff Energy = 73.982969 
diff Energy = 67.461301 
diff Energy = 34.830202 
diff Energy = 100.810212 
Finish ICM step! 
iter = 13, loglik= -68120976.000000, dloglik=0.000199 
predict Y and V! 
diff Energy = 1.388574 
diff Energy = 6.157237 
diff Energy = 7.155938 
diff Energy = 6.645331 
diff Energy = 15.776175 
diff Energy = 8.663691 
diff Energy = 24.774426 
diff Energy = 2.180503 
Finish ICM step! 
iter = 14, loglik= -68109488.000000, dloglik=0.000169 
predict Y and V! 
diff Energy = 13.150317 
diff Energy = 4.829249 
diff Energy = 26.977756 
diff Energy = 6.533671 
diff Energy = 17.728646 
diff Energy = 1.454233 
diff Energy = 3.251429 
Finish ICM step! 
iter = 15, loglik= -68099472.000000, dloglik=0.000147 
predict Y and V! 
diff Energy = 6.777329 
diff Energy = 4.587538 
diff Energy = 12.303013 
diff Energy = 37.099591 
diff Energy = 21.404016 
diff Energy = 26.377405 
diff Energy = 13.982450 
diff Energy = 12.777131 
diff Energy = 1.108322 
Finish ICM step! 
iter = 16, loglik= -68091144.000000, dloglik=0.000122 
predict Y and V! 
diff Energy = 2.502014 
diff Energy = 2.914881 
diff Energy = 0.607462 
diff Energy = 6.045366 
diff Energy = 4.267571 
diff Energy = 7.114131 
diff Energy = 0.818203 
diff Energy = 8.369221 
Finish ICM step! 
iter = 17, loglik= -68083328.000000, dloglik=0.000115 
predict Y and V! 
diff Energy = 9.026831 
diff Energy = 9.223897 
diff Energy = 2.064780 
diff Energy = 19.883106 
diff Energy = 0.255120 
diff Energy = 18.806353 
diff Energy = 5.698783 
diff Energy = 28.287826 
Finish ICM step! 
iter = 18, loglik= -68076568.000000, dloglik=0.000099 
predict Y and V! 
diff Energy = 2.539274 
diff Energy = 11.482324 
diff Energy = 6.160981 
diff Energy = 37.441481 
diff Energy = 9.158143 
diff Energy = 6.152342 
diff Energy = 55.833793 
diff Energy = 23.520770 
Finish ICM step! 
iter = 19, loglik= -68070016.000000, dloglik=0.000096 
predict Y and V! 
diff Energy = 10.652469 
diff Energy = 4.024335 
diff Energy = 15.169948 
diff Energy = 9.619748 
diff Energy = 51.650887 
diff Energy = 10.602493 
diff Energy = 9.499606 
Finish ICM step! 
iter = 20, loglik= -68063936.000000, dloglik=0.000089 
predict Y and V! 
diff Energy = 5.307451 
diff Energy = 0.232942 
diff Energy = 0.199011 
diff Energy = 6.604477 
diff Energy = 10.932463 
diff Energy = 33.140896 
diff Energy = 2.400191 
diff Energy = 1.486238 
diff Energy = 6.635382 
Finish ICM step! 
iter = 21, loglik= -68058040.000000, dloglik=0.000087 
predict Y and V! 
diff Energy = 1.640825 
diff Energy = 9.841177 
diff Energy = 5.952238 
diff Energy = 6.041269 
diff Energy = 3.515213 
diff Energy = 0.752871 
diff Energy = 3.897702 
Finish ICM step! 
iter = 22, loglik= -68052152.000000, dloglik=0.000087 
predict Y and V! 
diff Energy = 1.300326 
diff Energy = 2.400619 
diff Energy = 1.980600 
diff Energy = 7.275939 
diff Energy = 32.523419 
diff Energy = 16.783914 
diff Energy = 2.023666 
diff Energy = 11.764086 
Finish ICM step! 
iter = 23, loglik= -68046152.000000, dloglik=0.000088 
predict Y and V! 
diff Energy = 1.259669 
diff Energy = 0.627300 
diff Energy = 12.543236 
diff Energy = 2.015701 
diff Energy = 15.535690 
diff Energy = 1.948905 
Finish ICM step! 
iter = 24, loglik= -68039496.000000, dloglik=0.000098 
predict Y and V! 
diff Energy = 11.466491 
diff Energy = 11.800729 
diff Energy = 1.207035 
diff Energy = 9.464240 
diff Energy = 10.314638 
diff Energy = 12.555626 
diff Energy = 8.212891 
diff Energy = 1.450158 
diff Energy = 4.953981 
Finish ICM step! 
iter = 25, loglik= -68032968.000000, dloglik=0.000096 
predict Y and V! 
diff Energy = 0.141033 
diff Energy = 3.530036 
diff Energy = 8.748499 
diff Energy = 4.012137 
diff Energy = 0.377588 
diff Energy = 5.950748 
Finish ICM step! 
iter = 26, loglik= -68025824.000000, dloglik=0.000105 
predict Y and V! 
diff Energy = 1.697130 
diff Energy = 2.564315 
diff Energy = 0.312586 
diff Energy = 2.273572 
diff Energy = 4.919872 
diff Energy = 6.174803 
diff Energy = 13.429368 
Finish ICM step! 
iter = 27, loglik= -68018792.000000, dloglik=0.000103 
predict Y and V! 
diff Energy = 0.587973 
diff Energy = 4.601427 
diff Energy = 0.829703 
diff Energy = 12.240967 
diff Energy = 1.777614 
diff Energy = 2.078835 
diff Energy = 3.132640 
diff Energy = 25.854709 
Finish ICM step! 
iter = 28, loglik= -68011472.000000, dloglik=0.000108 
predict Y and V! 
diff Energy = 2.872036 
diff Energy = 2.559477 
diff Energy = 2.169642 
diff Energy = 2.100632 
diff Energy = 18.557622 
diff Energy = 33.709589 
diff Energy = 5.094135 
diff Energy = 13.376965 
Finish ICM step! 
iter = 29, loglik= -68004016.000000, dloglik=0.000110 
predict Y and V! 
diff Energy = 7.012514 
diff Energy = 2.391509 
diff Energy = 4.679202 
diff Energy = 6.865575 
diff Energy = 1.976074 
diff Energy = 63.497095 
diff Energy = 0.423772 
diff Energy = 4.841882 
Finish ICM step! 
iter = 30, loglik= -67996552.000000, dloglik=0.000110 
28148.098 sec elapsed
**** Job ends ****
Thu Nov  3 00:12:39 EDT 2022
