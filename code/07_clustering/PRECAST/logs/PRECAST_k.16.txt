Adding LIBD modules
Loading git
Loading LIBD module for git-status-size/github
Loading LIBD module for git-lfs/2.8.0
Loading LIBD module for rmate/1.5.9
Loading LIBD module for ruby/2.6.4p104
Loading conda_R/4.1.x
**** Job starts ****
Wed Nov  2 15:12:17 EDT 2022
**** JHPCE info ****
User: mtippani
Job id: 621925
Job name: PRECAST_k16-20
Hostname: compute-095.cm.cluster
Task id: 16
Unloading conda_R/4.1.x
Loading conda_R/devel

The following have been reloaded with a version change:
  1) conda_R/4.1.x => conda_R/devel


Currently Loaded Modules:
  1) matlab/R2019a     6) COMMUNITY_CENTOS7_DEFAULT_ENV  11) ruby/2.6.4p104
  2) stata/17          7) JHPCE_CENTOS7_DEFAULT_ENV      12) rmate/1.5.9
  3) JHPCE_tools/1.0   8) git-status-size/github         13) conda/3-4.6.14
  4) sge/8.1.9         9) git/2.28.0                     14) conda_R/devel
  5) gcc/4.4.7        10) git-lfs/2.8.0

 

Filter spots and features from Raw count data...
 
 
Calculating gene variances
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Calculating feature variances of standardized and clipped values
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Find the spatially variables genes by SPARK-X...

## ===== SPARK-X INPUT INFORMATION ====
## number of total samples: 14172
## number of total genes: 5000
## Running with single core, may take some time 

## Testing With Projection Kernel
## Testing With Gaussian Kernel 1
## Testing With Gaussian Kernel 2
## Testing With Gaussian Kernel 3
## Testing With Gaussian Kernel 4
## Testing With Gaussian Kernel 5
## Testing With Cosine Kernel 1
## Testing With Cosine Kernel 2
## Testing With Cosine Kernel 3
## Testing With Cosine Kernel 4
## Testing With Cosine Kernel 5
Calculating gene variances
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Calculating feature variances of standardized and clipped values
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Find the spatially variables genes by SPARK-X...

## ===== SPARK-X INPUT INFORMATION ====
## number of total samples: 19762
## number of total genes: 5000
## Running with single core, may take some time 

## Testing With Projection Kernel
## Testing With Gaussian Kernel 1
## Testing With Gaussian Kernel 2
## Testing With Gaussian Kernel 3
## Testing With Gaussian Kernel 4
## Testing With Gaussian Kernel 5
## Testing With Cosine Kernel 1
## Testing With Cosine Kernel 2
## Testing With Cosine Kernel 3
## Testing With Cosine Kernel 4
## Testing With Cosine Kernel 5
Calculating gene variances
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Calculating feature variances of standardized and clipped values
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Find the spatially variables genes by SPARK-X...

## ===== SPARK-X INPUT INFORMATION ====
## number of total samples: 14117
## number of total genes: 5000
## Running with single core, may take some time 

## Testing With Projection Kernel
## Testing With Gaussian Kernel 1
## Testing With Gaussian Kernel 2
## Testing With Gaussian Kernel 3
## Testing With Gaussian Kernel 4
## Testing With Gaussian Kernel 5
## Testing With Cosine Kernel 1
## Testing With Cosine Kernel 2
## Testing With Cosine Kernel 3
## Testing With Cosine Kernel 4
## Testing With Cosine Kernel 5
Calculating gene variances
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Calculating feature variances of standardized and clipped values
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Find the spatially variables genes by SPARK-X...

## ===== SPARK-X INPUT INFORMATION ====
## number of total samples: 8670
## number of total genes: 5000
## Running with single core, may take some time 

## Testing With Projection Kernel
## Testing With Gaussian Kernel 1
## Testing With Gaussian Kernel 2
## Testing With Gaussian Kernel 3
## Testing With Gaussian Kernel 4
## Testing With Gaussian Kernel 5
## Testing With Cosine Kernel 1
## Testing With Cosine Kernel 2
## Testing With Cosine Kernel 3
## Testing With Cosine Kernel 4
## Testing With Cosine Kernel 5
Calculating gene variances
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Calculating feature variances of standardized and clipped values
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Find the spatially variables genes by SPARK-X...

## ===== SPARK-X INPUT INFORMATION ====
## number of total samples: 14400
## number of total genes: 5000
## Running with single core, may take some time 

## Testing With Projection Kernel
## Testing With Gaussian Kernel 1
## Testing With Gaussian Kernel 2
## Testing With Gaussian Kernel 3
## Testing With Gaussian Kernel 4
## Testing With Gaussian Kernel 5
## Testing With Cosine Kernel 1
## Testing With Cosine Kernel 2
## Testing With Cosine Kernel 3
## Testing With Cosine Kernel 4
## Testing With Cosine Kernel 5
Calculating gene variances
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Calculating feature variances of standardized and clipped values
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Find the spatially variables genes by SPARK-X...

## ===== SPARK-X INPUT INFORMATION ====
## number of total samples: 18746
## number of total genes: 5000
## Running with single core, may take some time 

## Testing With Projection Kernel
## Testing With Gaussian Kernel 1
## Testing With Gaussian Kernel 2
## Testing With Gaussian Kernel 3
## Testing With Gaussian Kernel 4
## Testing With Gaussian Kernel 5
## Testing With Cosine Kernel 1
## Testing With Cosine Kernel 2
## Testing With Cosine Kernel 3
## Testing With Cosine Kernel 4
## Testing With Cosine Kernel 5
Calculating gene variances
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Calculating feature variances of standardized and clipped values
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Find the spatially variables genes by SPARK-X...

## ===== SPARK-X INPUT INFORMATION ====
## number of total samples: 20693
## number of total genes: 5000
## Running with single core, may take some time 

## Testing With Projection Kernel
## Testing With Gaussian Kernel 1
## Testing With Gaussian Kernel 2
## Testing With Gaussian Kernel 3
## Testing With Gaussian Kernel 4
## Testing With Gaussian Kernel 5
## Testing With Cosine Kernel 1
## Testing With Cosine Kernel 2
## Testing With Cosine Kernel 3
## Testing With Cosine Kernel 4
## Testing With Cosine Kernel 5
Calculating gene variances
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Calculating feature variances of standardized and clipped values
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Find the spatially variables genes by SPARK-X...

## ===== SPARK-X INPUT INFORMATION ====
## number of total samples: 8390
## number of total genes: 5000
## Running with single core, may take some time 

## Testing With Projection Kernel
## Testing With Gaussian Kernel 1
## Testing With Gaussian Kernel 2
## Testing With Gaussian Kernel 3
## Testing With Gaussian Kernel 4
## Testing With Gaussian Kernel 5
## Testing With Cosine Kernel 1
## Testing With Cosine Kernel 2
## Testing With Cosine Kernel 3
## Testing With Cosine Kernel 4
## Testing With Cosine Kernel 5
Calculating gene variances
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Calculating feature variances of standardized and clipped values
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Find the spatially variables genes by SPARK-X...

## ===== SPARK-X INPUT INFORMATION ====
## number of total samples: 18159
## number of total genes: 5000
## Running with single core, may take some time 

## Testing With Projection Kernel
## Testing With Gaussian Kernel 1
## Testing With Gaussian Kernel 2
## Testing With Gaussian Kernel 3
## Testing With Gaussian Kernel 4
## Testing With Gaussian Kernel 5
## Testing With Cosine Kernel 1
## Testing With Cosine Kernel 2
## Testing With Cosine Kernel 3
## Testing With Cosine Kernel 4
## Testing With Cosine Kernel 5
Select common top variable genes  for multiple samples...
Filter spots and features from SVGs(HVGs) count data...
Performing log-normalization
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Performing log-normalization
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Performing log-normalization
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Performing log-normalization
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Performing log-normalization
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Performing log-normalization
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Performing log-normalization
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Performing log-normalization
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Performing log-normalization
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Warning messages:
1: In FUN(newX[, i], ...) : There are p-values that are exactly 1!
2: In FUN(newX[, i], ...) : There are p-values that are exactly 1!
[[1]]
An object of class Seurat 
2000 features across 14143 samples within 1 assay 
Active assay: RNA (2000 features, 1397 variable features)

[[2]]
An object of class Seurat 
2000 features across 19678 samples within 1 assay 
Active assay: RNA (2000 features, 1541 variable features)

[[3]]
An object of class Seurat 
2000 features across 14104 samples within 1 assay 
Active assay: RNA (2000 features, 1447 variable features)

[[4]]
An object of class Seurat 
2000 features across 8662 samples within 1 assay 
Active assay: RNA (2000 features, 1374 variable features)

[[5]]
An object of class Seurat 
2000 features across 14390 samples within 1 assay 
Active assay: RNA (2000 features, 1495 variable features)

[[6]]
An object of class Seurat 
2000 features across 18709 samples within 1 assay 
Active assay: RNA (2000 features, 1159 variable features)

[[7]]
An object of class Seurat 
2000 features across 20614 samples within 1 assay 
Active assay: RNA (2000 features, 1612 variable features)

[[8]]
An object of class Seurat 
2000 features across 8389 samples within 1 assay 
Active assay: RNA (2000 features, 1200 variable features)

[[9]]
An object of class Seurat 
2000 features across 18041 samples within 1 assay 
Active assay: RNA (2000 features, 1385 variable features)

Neighbors were identified for 14143 out of 14143 spots.
Neighbors were identified for 19678 out of 19678 spots.
Neighbors were identified for 14104 out of 14104 spots.
Neighbors were identified for 8662 out of 8662 spots.
Neighbors were identified for 14390 out of 14390 spots.
Neighbors were identified for 18709 out of 18709 spots.
Neighbors were identified for 20611 out of 20614 spots.
Neighbors were identified for 8389 out of 8389 spots.
Neighbors were identified for 18038 out of 18041 spots.
Intergrative data info.: 9 samples, 2000 genes X 136730 spots------
PRECAST model setting: error_heter=TRUE, Sigma_equal=FALSE, Sigma_diag=TRUE, mix_prop_heter=TRUE
Start computing intial values... 

fitting ...
  |                                                                              |                                                                      |   0%  |                                                                              |===================================                                   |  50%  |                                                                              |======================================================================| 100%
----Fitting PRECAST model----------------

variable initialize finish! 
predict Y and V! 
diff Energy = 28.624997 
diff Energy = 37.530116 
diff Energy = 52.392343 
Finish ICM step! 
iter = 2, loglik= -69756856.000000, dloglik=0.967517 
predict Y and V! 
diff Energy = 10.735705 
diff Energy = 104.772831 
diff Energy = 38.927264 
diff Energy = 56.931346 
diff Energy = 114.952932 
diff Energy = 15.084352 
diff Energy = 56.525043 
diff Energy = 62.331534 
Finish ICM step! 
iter = 3, loglik= -68950560.000000, dloglik=0.011559 
predict Y and V! 
diff Energy = 271.670835 
diff Energy = 361.648446 
diff Energy = 261.133029 
diff Energy = 230.280439 
diff Energy = 365.035070 
diff Energy = 15.172445 
diff Energy = 398.946675 
diff Energy = 259.558443 
diff Energy = 521.908510 
Finish ICM step! 
iter = 4, loglik= -68647432.000000, dloglik=0.004396 
predict Y and V! 
diff Energy = 158.909731 
diff Energy = 166.937020 
diff Energy = 102.587972 
diff Energy = 111.596244 
diff Energy = 156.279791 
diff Energy = 191.948710 
diff Energy = 122.806233 
diff Energy = 151.520922 
Finish ICM step! 
iter = 5, loglik= -68475120.000000, dloglik=0.002510 
predict Y and V! 
diff Energy = 128.146293 
diff Energy = 110.322444 
diff Energy = 47.145237 
diff Energy = 89.337378 
diff Energy = 143.279670 
diff Energy = 12.844675 
diff Energy = 94.277613 
diff Energy = 81.629951 
diff Energy = 128.026819 
Finish ICM step! 
iter = 6, loglik= -68369720.000000, dloglik=0.001539 
predict Y and V! 
diff Energy = 67.898389 
diff Energy = 93.230766 
diff Energy = 34.091719 
diff Energy = 77.037827 
diff Energy = 83.383934 
diff Energy = 1.893253 
diff Energy = 136.746126 
diff Energy = 83.871862 
diff Energy = 132.030031 
Finish ICM step! 
iter = 7, loglik= -68300480.000000, dloglik=0.001013 
predict Y and V! 
diff Energy = 52.849894 
diff Energy = 31.763763 
diff Energy = 49.517634 
diff Energy = 32.797036 
diff Energy = 40.941720 
diff Energy = 4.840389 
diff Energy = 11.300077 
diff Energy = 37.202946 
diff Energy = 22.178005 
Finish ICM step! 
iter = 8, loglik= -68250488.000000, dloglik=0.000732 
predict Y and V! 
diff Energy = 37.264896 
diff Energy = 12.329904 
diff Energy = 43.599506 
diff Energy = 19.904446 
diff Energy = 48.648693 
diff Energy = 1.061020 
diff Energy = 2.692147 
diff Energy = 33.384678 
diff Energy = 3.475171 
Finish ICM step! 
iter = 9, loglik= -68213112.000000, dloglik=0.000548 
predict Y and V! 
diff Energy = 19.487296 
diff Energy = 11.350879 
diff Energy = 20.466057 
diff Energy = 6.376690 
diff Energy = 13.874716 
diff Energy = 15.398321 
diff Energy = 8.212200 
diff Energy = 13.517434 
diff Energy = 31.766804 
Finish ICM step! 
iter = 10, loglik= -68184688.000000, dloglik=0.000417 
predict Y and V! 
diff Energy = 5.407932 
diff Energy = 6.474015 
diff Energy = 63.136613 
diff Energy = 52.531263 
diff Energy = 27.431657 
diff Energy = 8.361419 
diff Energy = 5.344642 
diff Energy = 56.399991 
Finish ICM step! 
iter = 11, loglik= -68163216.000000, dloglik=0.000315 
predict Y and V! 
diff Energy = 17.952674 
diff Energy = 18.731860 
diff Energy = 16.851431 
diff Energy = 18.417369 
diff Energy = 28.785338 
diff Energy = 2.205309 
diff Energy = 26.688750 
diff Energy = 2.274140 
diff Energy = 13.512811 
Finish ICM step! 
iter = 12, loglik= -68146592.000000, dloglik=0.000244 
predict Y and V! 
diff Energy = 0.770953 
diff Energy = 64.335603 
diff Energy = 9.320969 
diff Energy = 18.464300 
diff Energy = 21.938078 
diff Energy = 1.721294 
diff Energy = 42.853473 
diff Energy = 47.064564 
Finish ICM step! 
iter = 13, loglik= -68132928.000000, dloglik=0.000201 
predict Y and V! 
diff Energy = 9.337635 
diff Energy = 3.865315 
diff Energy = 12.710894 
diff Energy = 5.575058 
diff Energy = 9.476981 
diff Energy = 2.916557 
diff Energy = 17.665965 
diff Energy = 13.840568 
diff Energy = 4.571485 
Finish ICM step! 
iter = 14, loglik= -68121768.000000, dloglik=0.000164 
predict Y and V! 
diff Energy = 13.724661 
diff Energy = 0.221585 
diff Energy = 2.859980 
diff Energy = 7.985540 
diff Energy = 1.689450 
diff Energy = 3.160890 
diff Energy = 5.029873 
diff Energy = 6.065939 
diff Energy = 8.026684 
Finish ICM step! 
iter = 15, loglik= -68112296.000000, dloglik=0.000139 
predict Y and V! 
diff Energy = 6.901300 
diff Energy = 6.014183 
diff Energy = 3.447958 
diff Energy = 7.437591 
diff Energy = 5.449479 
diff Energy = 0.360992 
diff Energy = 1.402045 
diff Energy = 17.186289 
diff Energy = 4.890086 
Finish ICM step! 
iter = 16, loglik= -68104272.000000, dloglik=0.000118 
predict Y and V! 
diff Energy = 28.628453 
diff Energy = 2.905823 
diff Energy = 6.975068 
diff Energy = 5.794233 
diff Energy = 4.957062 
diff Energy = 4.570173 
diff Energy = 7.297215 
diff Energy = 4.840608 
diff Energy = 5.869638 
Finish ICM step! 
iter = 17, loglik= -68097000.000000, dloglik=0.000107 
predict Y and V! 
diff Energy = 7.931058 
diff Energy = 5.193998 
diff Energy = 4.776281 
diff Energy = 5.624558 
diff Energy = 27.807917 
diff Energy = 1.078625 
diff Energy = 4.249440 
diff Energy = 21.062032 
diff Energy = 8.705500 
Finish ICM step! 
iter = 18, loglik= -68090704.000000, dloglik=0.000092 
predict Y and V! 
diff Energy = 9.422311 
diff Energy = 2.924924 
diff Energy = 14.868614 
diff Energy = 4.591822 
diff Energy = 15.165880 
diff Energy = 3.225559 
diff Energy = 13.599785 
diff Energy = 9.873747 
diff Energy = 22.404316 
Finish ICM step! 
iter = 19, loglik= -68084768.000000, dloglik=0.000087 
predict Y and V! 
diff Energy = 4.498899 
diff Energy = 1.596192 
diff Energy = 11.300261 
diff Energy = 4.622663 
diff Energy = 16.936071 
diff Energy = 0.296940 
diff Energy = 10.452978 
diff Energy = 15.923636 
diff Energy = 10.668229 
Finish ICM step! 
iter = 20, loglik= -68079096.000000, dloglik=0.000083 
predict Y and V! 
diff Energy = 5.183802 
diff Energy = 2.577804 
diff Energy = 10.006163 
diff Energy = 16.261355 
diff Energy = 34.144096 
diff Energy = 2.228469 
diff Energy = 11.573086 
diff Energy = 3.536202 
diff Energy = 2.610361 
Finish ICM step! 
iter = 21, loglik= -68073728.000000, dloglik=0.000079 
predict Y and V! 
diff Energy = 10.940183 
diff Energy = 3.297171 
diff Energy = 7.699185 
diff Energy = 8.737013 
diff Energy = 19.271412 
diff Energy = 30.684877 
diff Energy = 2.841999 
diff Energy = 26.010344 
Finish ICM step! 
iter = 22, loglik= -68068488.000000, dloglik=0.000077 
predict Y and V! 
diff Energy = 12.533996 
diff Energy = 15.473418 
diff Energy = 5.925680 
diff Energy = 11.580299 
diff Energy = 18.889779 
diff Energy = 17.045276 
diff Energy = 0.994119 
diff Energy = 7.992435 
Finish ICM step! 
iter = 23, loglik= -68062712.000000, dloglik=0.000085 
predict Y and V! 
diff Energy = 21.026559 
diff Energy = 8.070772 
diff Energy = 6.581910 
diff Energy = 7.304440 
diff Energy = 14.359621 
diff Energy = 0.855829 
diff Energy = 15.125069 
diff Energy = 4.214486 
diff Energy = 3.827939 
Finish ICM step! 
iter = 24, loglik= -68056640.000000, dloglik=0.000089 
predict Y and V! 
diff Energy = 23.745506 
diff Energy = 3.364108 
diff Energy = 8.875179 
diff Energy = 17.511856 
diff Energy = 17.480146 
diff Energy = 4.593543 
Finish ICM step! 
iter = 25, loglik= -68050240.000000, dloglik=0.000094 
predict Y and V! 
diff Energy = 16.403490 
diff Energy = 6.081589 
diff Energy = 4.520160 
diff Energy = 5.159005 
diff Energy = 6.399442 
diff Energy = 2.374133 
Finish ICM step! 
iter = 26, loglik= -68043768.000000, dloglik=0.000095 
predict Y and V! 
diff Energy = 17.462581 
diff Energy = 6.937417 
diff Energy = 4.370438 
diff Energy = 1.134011 
diff Energy = 9.620141 
diff Energy = 36.933418 
diff Energy = 24.238562 
diff Energy = 5.919719 
diff Energy = 14.315355 
Finish ICM step! 
iter = 27, loglik= -68036840.000000, dloglik=0.000102 
predict Y and V! 
diff Energy = 32.174396 
diff Energy = 0.620108 
diff Energy = 2.291778 
diff Energy = 1.657828 
diff Energy = 13.872390 
diff Energy = 0.627130 
diff Energy = 35.171635 
diff Energy = 1.652863 
diff Energy = 7.533657 
Finish ICM step! 
iter = 28, loglik= -68029864.000000, dloglik=0.000103 
predict Y and V! 
diff Energy = 24.502774 
diff Energy = 9.157578 
diff Energy = 3.782658 
diff Energy = 15.216741 
diff Energy = 35.732326 
diff Energy = 6.432440 
diff Energy = 7.584196 
Finish ICM step! 
iter = 29, loglik= -68022888.000000, dloglik=0.000103 
predict Y and V! 
diff Energy = 13.701390 
diff Energy = 0.968805 
diff Energy = 0.409862 
diff Energy = 4.568231 
diff Energy = 12.863240 
diff Energy = 1.701499 
diff Energy = 34.276298 
diff Energy = 7.879799 
diff Energy = 1.077222 
Finish ICM step! 
iter = 30, loglik= -68015576.000000, dloglik=0.000107 
18217.538 sec elapsed
**** Job ends ****
Wed Nov  2 20:26:42 EDT 2022
**** Job starts ****
Tue Mar 21 19:52:39 EDT 2023
**** JHPCE info ****
User: enelson
Job id: 3066427
Job name: PRECAST_k16-24
Hostname: compute-098.cm.cluster
Task id: 16
Loading conda_R/devel

Currently Loaded Modules:
  1) matlab/R2019a     6) COMMUNITY_CENTOS7_DEFAULT_ENV
  2) stata/17          7) JHPCE_CENTOS7_DEFAULT_ENV
  3) JHPCE_tools/1.0   8) conda/3-4.6.14
  4) sge/8.1.9         9) conda_R/devel
  5) gcc/4.4.7

 

Error in library(Seurat) : there is no package called ‘Seurat’
Calls: suppressPackageStartupMessages -> withCallingHandlers -> library
Execution halted
**** Job ends ****
Tue Mar 21 19:52:44 EDT 2023
**** Job starts ****
Tue Mar 21 20:02:53 EDT 2023
**** JHPCE info ****
User: enelson
Job id: 3066438
Job name: PRECAST_k16-24
Hostname: compute-098.cm.cluster
Task id: 16
Loading conda_R/devel

Currently Loaded Modules:
  1) matlab/R2019a     6) COMMUNITY_CENTOS7_DEFAULT_ENV
  2) stata/17          7) JHPCE_CENTOS7_DEFAULT_ENV
  3) JHPCE_tools/1.0   8) conda/3-4.6.14
  4) sge/8.1.9         9) conda_R/devel
  5) gcc/4.4.7

 

Error in library("Seurat") : there is no package called ‘Seurat’
Calls: suppressPackageStartupMessages -> withCallingHandlers -> library
Execution halted
**** Job ends ****
Tue Mar 21 20:02:56 EDT 2023
**** Job starts ****
Tue Mar 21 20:08:59 EDT 2023
**** JHPCE info ****
User: enelson
Job id: 3066443
Job name: PRECAST_k16-24
Hostname: compute-098.cm.cluster
Task id: 16
Loading conda_R/4.2.x

Currently Loaded Modules:
  1) matlab/R2019a     6) COMMUNITY_CENTOS7_DEFAULT_ENV
  2) stata/17          7) JHPCE_CENTOS7_DEFAULT_ENV
  3) JHPCE_tools/1.0   8) conda/3-4.11.0
  4) sge/8.1.9         9) conda_R/4.2.x
  5) gcc/4.4.7

 

Filter spots and features from Raw count data...
 
 
Calculating gene variances
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Calculating feature variances of standardized and clipped values
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Find the spatially variables genes by SPARK-X...

## ===== SPARK-X INPUT INFORMATION ====
## number of total samples: 14172
## number of total genes: 5000
## Running with single core, may take some time 

## Testing With Projection Kernel
## Testing With Gaussian Kernel 1
## Testing With Gaussian Kernel 2
## Testing With Gaussian Kernel 3
## Testing With Gaussian Kernel 4
## Testing With Gaussian Kernel 5
## Testing With Cosine Kernel 1
## Testing With Cosine Kernel 2
## Testing With Cosine Kernel 3
## Testing With Cosine Kernel 4
## Testing With Cosine Kernel 5
Calculating gene variances
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Calculating feature variances of standardized and clipped values
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Find the spatially variables genes by SPARK-X...

## ===== SPARK-X INPUT INFORMATION ====
## number of total samples: 19762
## number of total genes: 5000
## Running with single core, may take some time 

## Testing With Projection Kernel
## Testing With Gaussian Kernel 1
## Testing With Gaussian Kernel 2
## Testing With Gaussian Kernel 3
## Testing With Gaussian Kernel 4
## Testing With Gaussian Kernel 5
## Testing With Cosine Kernel 1
## Testing With Cosine Kernel 2
## Testing With Cosine Kernel 3
## Testing With Cosine Kernel 4
## Testing With Cosine Kernel 5
Calculating gene variances
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Calculating feature variances of standardized and clipped values
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Find the spatially variables genes by SPARK-X...

## ===== SPARK-X INPUT INFORMATION ====
## number of total samples: 14117
## number of total genes: 5000
## Running with single core, may take some time 

## Testing With Projection Kernel
## Testing With Gaussian Kernel 1
## Testing With Gaussian Kernel 2
## Testing With Gaussian Kernel 3
## Testing With Gaussian Kernel 4
## Testing With Gaussian Kernel 5
## Testing With Cosine Kernel 1
## Testing With Cosine Kernel 2
## Testing With Cosine Kernel 3
## Testing With Cosine Kernel 4
## Testing With Cosine Kernel 5
Calculating gene variances
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Calculating feature variances of standardized and clipped values
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Find the spatially variables genes by SPARK-X...

## ===== SPARK-X INPUT INFORMATION ====
## number of total samples: 8670
## number of total genes: 5000
## Running with single core, may take some time 

## Testing With Projection Kernel
## Testing With Gaussian Kernel 1
## Testing With Gaussian Kernel 2
## Testing With Gaussian Kernel 3
## Testing With Gaussian Kernel 4
## Testing With Gaussian Kernel 5
## Testing With Cosine Kernel 1
## Testing With Cosine Kernel 2
## Testing With Cosine Kernel 3
## Testing With Cosine Kernel 4
## Testing With Cosine Kernel 5
Calculating gene variances
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Calculating feature variances of standardized and clipped values
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Find the spatially variables genes by SPARK-X...

## ===== SPARK-X INPUT INFORMATION ====
## number of total samples: 14400
## number of total genes: 5000
## Running with single core, may take some time 

## Testing With Projection Kernel
## Testing With Gaussian Kernel 1
## Testing With Gaussian Kernel 2
## Testing With Gaussian Kernel 3
## Testing With Gaussian Kernel 4
## Testing With Gaussian Kernel 5
## Testing With Cosine Kernel 1
## Testing With Cosine Kernel 2
## Testing With Cosine Kernel 3
## Testing With Cosine Kernel 4
## Testing With Cosine Kernel 5
Calculating gene variances
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Calculating feature variances of standardized and clipped values
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Find the spatially variables genes by SPARK-X...

## ===== SPARK-X INPUT INFORMATION ====
## number of total samples: 18746
## number of total genes: 5000
## Running with single core, may take some time 

## Testing With Projection Kernel
## Testing With Gaussian Kernel 1
## Testing With Gaussian Kernel 2
## Testing With Gaussian Kernel 3
## Testing With Gaussian Kernel 4
## Testing With Gaussian Kernel 5
## Testing With Cosine Kernel 1
## Testing With Cosine Kernel 2
## Testing With Cosine Kernel 3
## Testing With Cosine Kernel 4
## Testing With Cosine Kernel 5
Calculating gene variances
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Calculating feature variances of standardized and clipped values
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Find the spatially variables genes by SPARK-X...

## ===== SPARK-X INPUT INFORMATION ====
## number of total samples: 20693
## number of total genes: 5000
## Running with single core, may take some time 

## Testing With Projection Kernel
## Testing With Gaussian Kernel 1
## Testing With Gaussian Kernel 2
## Testing With Gaussian Kernel 3
## Testing With Gaussian Kernel 4
## Testing With Gaussian Kernel 5
## Testing With Cosine Kernel 1
## Testing With Cosine Kernel 2
## Testing With Cosine Kernel 3
## Testing With Cosine Kernel 4
## Testing With Cosine Kernel 5
Calculating gene variances
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Calculating feature variances of standardized and clipped values
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Find the spatially variables genes by SPARK-X...

## ===== SPARK-X INPUT INFORMATION ====
## number of total samples: 8390
## number of total genes: 5000
## Running with single core, may take some time 

## Testing With Projection Kernel
## Testing With Gaussian Kernel 1
## Testing With Gaussian Kernel 2
## Testing With Gaussian Kernel 3
## Testing With Gaussian Kernel 4
## Testing With Gaussian Kernel 5
## Testing With Cosine Kernel 1
## Testing With Cosine Kernel 2
## Testing With Cosine Kernel 3
## Testing With Cosine Kernel 4
## Testing With Cosine Kernel 5
Calculating gene variances
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Calculating feature variances of standardized and clipped values
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Find the spatially variables genes by SPARK-X...

## ===== SPARK-X INPUT INFORMATION ====
## number of total samples: 18159
## number of total genes: 5000
## Running with single core, may take some time 

## Testing With Projection Kernel
## Testing With Gaussian Kernel 1
## Testing With Gaussian Kernel 2
## Testing With Gaussian Kernel 3
## Testing With Gaussian Kernel 4
## Testing With Gaussian Kernel 5
## Testing With Cosine Kernel 1
## Testing With Cosine Kernel 2
## Testing With Cosine Kernel 3
## Testing With Cosine Kernel 4
## Testing With Cosine Kernel 5
Calculating gene variances
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Calculating feature variances of standardized and clipped values
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Find the spatially variables genes by SPARK-X...

## ===== SPARK-X INPUT INFORMATION ====
## number of total samples: 15520
## number of total genes: 5000
## Running with single core, may take some time 

## Testing With Projection Kernel
## Testing With Gaussian Kernel 1
## Testing With Gaussian Kernel 2
## Testing With Gaussian Kernel 3
## Testing With Gaussian Kernel 4
## Testing With Gaussian Kernel 5
## Testing With Cosine Kernel 1
## Testing With Cosine Kernel 2
## Testing With Cosine Kernel 3
## Testing With Cosine Kernel 4
## Testing With Cosine Kernel 5
Select common top variable genes  for multiple samples...
Filter spots and features from SVGs(HVGs) count data...
Performing log-normalization
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Performing log-normalization
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Performing log-normalization
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Performing log-normalization
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Performing log-normalization
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Performing log-normalization
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Performing log-normalization
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Performing log-normalization
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Performing log-normalization
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Performing log-normalization
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Warning messages:
1: In FUN(newX[, i], ...) : There are p-values that are exactly 1!
2: In FUN(newX[, i], ...) : There are p-values that are exactly 1!
[[1]]
An object of class Seurat 
2000 features across 14140 samples within 1 assay 
Active assay: RNA (2000 features, 1403 variable features)

[[2]]
An object of class Seurat 
2000 features across 19639 samples within 1 assay 
Active assay: RNA (2000 features, 1524 variable features)

[[3]]
An object of class Seurat 
2000 features across 14101 samples within 1 assay 
Active assay: RNA (2000 features, 1447 variable features)

[[4]]
An object of class Seurat 
2000 features across 8661 samples within 1 assay 
Active assay: RNA (2000 features, 1367 variable features)

[[5]]
An object of class Seurat 
2000 features across 14381 samples within 1 assay 
Active assay: RNA (2000 features, 1494 variable features)

[[6]]
An object of class Seurat 
2000 features across 18701 samples within 1 assay 
Active assay: RNA (2000 features, 1146 variable features)

[[7]]
An object of class Seurat 
2000 features across 20598 samples within 1 assay 
Active assay: RNA (2000 features, 1623 variable features)

[[8]]
An object of class Seurat 
2000 features across 8389 samples within 1 assay 
Active assay: RNA (2000 features, 1214 variable features)

[[9]]
An object of class Seurat 
2000 features across 18016 samples within 1 assay 
Active assay: RNA (2000 features, 1363 variable features)

[[10]]
An object of class Seurat 
2000 features across 15345 samples within 1 assay 
Active assay: RNA (2000 features, 1509 variable features)

Neighbors were identified for 14140 out of 14140 spots.
Neighbors were identified for 19639 out of 19639 spots.
Neighbors were identified for 14101 out of 14101 spots.
Neighbors were identified for 8661 out of 8661 spots.
Neighbors were identified for 14381 out of 14381 spots.
Neighbors were identified for 18701 out of 18701 spots.
Neighbors were identified for 20595 out of 20598 spots.
Neighbors were identified for 8389 out of 8389 spots.
Neighbors were identified for 18012 out of 18016 spots.
Neighbors were identified for 15343 out of 15345 spots.
Intergrative data info.: 10 samples, 2000 genes X 151971 spots------
PRECAST model setting: error_heter=TRUE, Sigma_equal=FALSE, Sigma_diag=TRUE, mix_prop_heter=TRUE
Start computing intial values... 

**** Job starts ****
Tue Mar 21 20:42:41 EDT 2023
**** JHPCE info ****
User: enelson
Job id: 3066458
Job name: PRECAST_k16-24
Hostname: compute-098.cm.cluster
Task id: 16
Loading conda_R/4.2.x

Currently Loaded Modules:
  1) matlab/R2019a     6) COMMUNITY_CENTOS7_DEFAULT_ENV
  2) stata/17          7) JHPCE_CENTOS7_DEFAULT_ENV
  3) JHPCE_tools/1.0   8) conda/3-4.11.0
  4) sge/8.1.9         9) conda_R/4.2.x
  5) gcc/4.4.7

 

Filter spots and features from Raw count data...
 
 
Calculating gene variances
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Calculating feature variances of standardized and clipped values
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Find the spatially variables genes by SPARK-X...

## ===== SPARK-X INPUT INFORMATION ====
## number of total samples: 14172
## number of total genes: 5000
## Running with single core, may take some time 

## Testing With Projection Kernel
## Testing With Gaussian Kernel 1
## Testing With Gaussian Kernel 2
## Testing With Gaussian Kernel 3
## Testing With Gaussian Kernel 4
## Testing With Gaussian Kernel 5
## Testing With Cosine Kernel 1
## Testing With Cosine Kernel 2
## Testing With Cosine Kernel 3
## Testing With Cosine Kernel 4
## Testing With Cosine Kernel 5
Calculating gene variances
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Calculating feature variances of standardized and clipped values
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Find the spatially variables genes by SPARK-X...

## ===== SPARK-X INPUT INFORMATION ====
## number of total samples: 19762
## number of total genes: 5000
## Running with single core, may take some time 

## Testing With Projection Kernel
## Testing With Gaussian Kernel 1
## Testing With Gaussian Kernel 2
## Testing With Gaussian Kernel 3
## Testing With Gaussian Kernel 4
## Testing With Gaussian Kernel 5
## Testing With Cosine Kernel 1
## Testing With Cosine Kernel 2
## Testing With Cosine Kernel 3
## Testing With Cosine Kernel 4
## Testing With Cosine Kernel 5
Calculating gene variances
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Calculating feature variances of standardized and clipped values
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Find the spatially variables genes by SPARK-X...

## ===== SPARK-X INPUT INFORMATION ====
## number of total samples: 14117
## number of total genes: 5000
## Running with single core, may take some time 

## Testing With Projection Kernel
## Testing With Gaussian Kernel 1
## Testing With Gaussian Kernel 2
## Testing With Gaussian Kernel 3
## Testing With Gaussian Kernel 4
## Testing With Gaussian Kernel 5
## Testing With Cosine Kernel 1
## Testing With Cosine Kernel 2
## Testing With Cosine Kernel 3
## Testing With Cosine Kernel 4
## Testing With Cosine Kernel 5
Calculating gene variances
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Calculating feature variances of standardized and clipped values
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Find the spatially variables genes by SPARK-X...

## ===== SPARK-X INPUT INFORMATION ====
## number of total samples: 8670
## number of total genes: 5000
## Running with single core, may take some time 

## Testing With Projection Kernel
## Testing With Gaussian Kernel 1
## Testing With Gaussian Kernel 2
## Testing With Gaussian Kernel 3
## Testing With Gaussian Kernel 4
## Testing With Gaussian Kernel 5
## Testing With Cosine Kernel 1
## Testing With Cosine Kernel 2
## Testing With Cosine Kernel 3
## Testing With Cosine Kernel 4
## Testing With Cosine Kernel 5
Calculating gene variances
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Calculating feature variances of standardized and clipped values
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Find the spatially variables genes by SPARK-X...

## ===== SPARK-X INPUT INFORMATION ====
## number of total samples: 14400
## number of total genes: 5000
## Running with single core, may take some time 

## Testing With Projection Kernel
## Testing With Gaussian Kernel 1
## Testing With Gaussian Kernel 2
## Testing With Gaussian Kernel 3
## Testing With Gaussian Kernel 4
## Testing With Gaussian Kernel 5
## Testing With Cosine Kernel 1
## Testing With Cosine Kernel 2
## Testing With Cosine Kernel 3
## Testing With Cosine Kernel 4
## Testing With Cosine Kernel 5
Calculating gene variances
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Calculating feature variances of standardized and clipped values
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Find the spatially variables genes by SPARK-X...

## ===== SPARK-X INPUT INFORMATION ====
## number of total samples: 18746
## number of total genes: 5000
## Running with single core, may take some time 

## Testing With Projection Kernel
## Testing With Gaussian Kernel 1
## Testing With Gaussian Kernel 2
## Testing With Gaussian Kernel 3
## Testing With Gaussian Kernel 4
## Testing With Gaussian Kernel 5
## Testing With Cosine Kernel 1
## Testing With Cosine Kernel 2
## Testing With Cosine Kernel 3
## Testing With Cosine Kernel 4
## Testing With Cosine Kernel 5
Calculating gene variances
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Calculating feature variances of standardized and clipped values
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Find the spatially variables genes by SPARK-X...

## ===== SPARK-X INPUT INFORMATION ====
## number of total samples: 20693
## number of total genes: 5000
## Running with single core, may take some time 

## Testing With Projection Kernel
## Testing With Gaussian Kernel 1
## Testing With Gaussian Kernel 2
## Testing With Gaussian Kernel 3
## Testing With Gaussian Kernel 4
## Testing With Gaussian Kernel 5
## Testing With Cosine Kernel 1
## Testing With Cosine Kernel 2
## Testing With Cosine Kernel 3
## Testing With Cosine Kernel 4
## Testing With Cosine Kernel 5
Calculating gene variances
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Calculating feature variances of standardized and clipped values
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Find the spatially variables genes by SPARK-X...

## ===== SPARK-X INPUT INFORMATION ====
## number of total samples: 8390
## number of total genes: 5000
## Running with single core, may take some time 

## Testing With Projection Kernel
## Testing With Gaussian Kernel 1
## Testing With Gaussian Kernel 2
## Testing With Gaussian Kernel 3
## Testing With Gaussian Kernel 4
## Testing With Gaussian Kernel 5
## Testing With Cosine Kernel 1
## Testing With Cosine Kernel 2
## Testing With Cosine Kernel 3
## Testing With Cosine Kernel 4
## Testing With Cosine Kernel 5
Calculating gene variances
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Calculating feature variances of standardized and clipped values
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Find the spatially variables genes by SPARK-X...

## ===== SPARK-X INPUT INFORMATION ====
## number of total samples: 18159
## number of total genes: 5000
## Running with single core, may take some time 

## Testing With Projection Kernel
## Testing With Gaussian Kernel 1
## Testing With Gaussian Kernel 2
## Testing With Gaussian Kernel 3
## Testing With Gaussian Kernel 4
## Testing With Gaussian Kernel 5
## Testing With Cosine Kernel 1
## Testing With Cosine Kernel 2
## Testing With Cosine Kernel 3
## Testing With Cosine Kernel 4
## Testing With Cosine Kernel 5
Calculating gene variances
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Calculating feature variances of standardized and clipped values
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Find the spatially variables genes by SPARK-X...

## ===== SPARK-X INPUT INFORMATION ====
## number of total samples: 15520
## number of total genes: 5000
## Running with single core, may take some time 

## Testing With Projection Kernel
## Testing With Gaussian Kernel 1
## Testing With Gaussian Kernel 2
## Testing With Gaussian Kernel 3
## Testing With Gaussian Kernel 4
## Testing With Gaussian Kernel 5
## Testing With Cosine Kernel 1
## Testing With Cosine Kernel 2
## Testing With Cosine Kernel 3
## Testing With Cosine Kernel 4
## Testing With Cosine Kernel 5
Select common top variable genes  for multiple samples...
Filter spots and features from SVGs(HVGs) count data...
Performing log-normalization
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Performing log-normalization
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Performing log-normalization
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Performing log-normalization
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Performing log-normalization
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Performing log-normalization
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Performing log-normalization
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Performing log-normalization
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Performing log-normalization
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Performing log-normalization
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Warning messages:
1: In FUN(newX[, i], ...) : There are p-values that are exactly 1!
2: In FUN(newX[, i], ...) : There are p-values that are exactly 1!
[[1]]
An object of class Seurat 
2000 features across 14140 samples within 1 assay 
Active assay: RNA (2000 features, 1403 variable features)

[[2]]
An object of class Seurat 
2000 features across 19639 samples within 1 assay 
Active assay: RNA (2000 features, 1524 variable features)

[[3]]
An object of class Seurat 
2000 features across 14101 samples within 1 assay 
Active assay: RNA (2000 features, 1447 variable features)

[[4]]
An object of class Seurat 
2000 features across 8661 samples within 1 assay 
Active assay: RNA (2000 features, 1367 variable features)

[[5]]
An object of class Seurat 
2000 features across 14381 samples within 1 assay 
Active assay: RNA (2000 features, 1494 variable features)

[[6]]
An object of class Seurat 
2000 features across 18701 samples within 1 assay 
Active assay: RNA (2000 features, 1146 variable features)

[[7]]
An object of class Seurat 
2000 features across 20598 samples within 1 assay 
Active assay: RNA (2000 features, 1623 variable features)

[[8]]
An object of class Seurat 
2000 features across 8389 samples within 1 assay 
Active assay: RNA (2000 features, 1214 variable features)

[[9]]
An object of class Seurat 
2000 features across 18016 samples within 1 assay 
Active assay: RNA (2000 features, 1363 variable features)

[[10]]
An object of class Seurat 
2000 features across 15345 samples within 1 assay 
Active assay: RNA (2000 features, 1509 variable features)

Neighbors were identified for 14140 out of 14140 spots.
Neighbors were identified for 19639 out of 19639 spots.
Neighbors were identified for 14101 out of 14101 spots.
Neighbors were identified for 8661 out of 8661 spots.
Neighbors were identified for 14381 out of 14381 spots.
Neighbors were identified for 18701 out of 18701 spots.
Neighbors were identified for 20595 out of 20598 spots.
Neighbors were identified for 8389 out of 8389 spots.
Neighbors were identified for 18012 out of 18016 spots.
Neighbors were identified for 15343 out of 15345 spots.
Intergrative data info.: 10 samples, 2000 genes X 151971 spots------
PRECAST model setting: error_heter=TRUE, Sigma_equal=FALSE, Sigma_diag=TRUE, mix_prop_heter=TRUE
Start computing intial values... 

fitting ...
  |                                                                              |                                                                      |   0%  |                                                                              |===================================                                   |  50%  |                                                                              |======================================================================| 100%
----Fitting PRECAST model----------------

variable initialize finish! 
predict Y and V! 
Finish ICM step! 
iter = 2, loglik= -79875728.000000, dloglik=0.962805 
predict Y and V! 
diff Energy = 34.921026 
diff Energy = 76.441209 
diff Energy = 16.117403 
diff Energy = 18.441172 
diff Energy = 107.735958 
diff Energy = 9.595816 
diff Energy = 70.100687 
diff Energy = 3.661656 
diff Energy = 34.477599 
diff Energy = 84.023530 
Finish ICM step! 
iter = 3, loglik= -78825088.000000, dloglik=0.013153 
predict Y and V! 
diff Energy = 66.014752 
diff Energy = 119.119103 
diff Energy = 111.958564 
diff Energy = 61.771564 
diff Energy = 119.459028 
diff Energy = 122.528377 
diff Energy = 132.575367 
diff Energy = 65.507560 
diff Energy = 162.552613 
diff Energy = 149.430830 
Finish ICM step! 
iter = 4, loglik= -78485288.000000, dloglik=0.004311 
predict Y and V! 
diff Energy = 118.318736 
diff Energy = 99.439972 
diff Energy = 132.041983 
diff Energy = 92.460755 
diff Energy = 175.340549 
diff Energy = 101.257333 
diff Energy = 115.105247 
diff Energy = 56.845450 
diff Energy = 218.863046 
diff Energy = 173.580119 
Finish ICM step! 
iter = 5, loglik= -78306480.000000, dloglik=0.002278 
predict Y and V! 
diff Energy = 88.696275 
diff Energy = 78.618268 
diff Energy = 99.491796 
diff Energy = 64.168521 
diff Energy = 30.082589 
diff Energy = 63.772552 
diff Energy = 119.236412 
diff Energy = 41.393019 
diff Energy = 156.580411 
diff Energy = 58.976525 
Finish ICM step! 
iter = 6, loglik= -78196000.000000, dloglik=0.001411 
predict Y and V! 
diff Energy = 67.241917 
diff Energy = 49.928202 
diff Energy = 84.515302 
diff Energy = 44.436181 
diff Energy = 92.000784 
diff Energy = 107.465909 
diff Energy = 12.345258 
diff Energy = 13.300421 
diff Energy = 144.052593 
diff Energy = 39.805964 
Finish ICM step! 
iter = 7, loglik= -78122944.000000, dloglik=0.000934 
predict Y and V! 
diff Energy = 54.582583 
diff Energy = 68.478321 
diff Energy = 38.486159 
diff Energy = 53.332390 
diff Energy = 6.071336 
diff Energy = 15.836458 
diff Energy = 16.051491 
diff Energy = 29.461172 
diff Energy = 46.127115 
Finish ICM step! 
iter = 8, loglik= -78070064.000000, dloglik=0.000677 
predict Y and V! 
diff Energy = 100.287461 
diff Energy = 1.163442 
diff Energy = 27.497287 
diff Energy = 28.562711 
diff Energy = 37.232495 
diff Energy = 16.710070 
diff Energy = 5.777101 
diff Energy = 39.142720 
diff Energy = 18.302214 
Finish ICM step! 
iter = 9, loglik= -78029304.000000, dloglik=0.000522 
predict Y and V! 
diff Energy = 30.429133 
diff Energy = 23.346068 
diff Energy = 8.413649 
diff Energy = 6.863420 
diff Energy = 48.077311 
diff Energy = 5.340596 
diff Energy = 2.347226 
diff Energy = 10.710571 
Finish ICM step! 
iter = 10, loglik= -77995824.000000, dloglik=0.000429 
predict Y and V! 
diff Energy = 23.700114 
diff Energy = 13.338875 
diff Energy = 32.325771 
diff Energy = 18.542749 
diff Energy = 0.783839 
diff Energy = 37.140843 
diff Energy = 23.186205 
diff Energy = 20.092101 
diff Energy = 11.398398 
Finish ICM step! 
iter = 11, loglik= -77968576.000000, dloglik=0.000349 
predict Y and V! 
diff Energy = 36.888985 
diff Energy = 38.926458 
diff Energy = 38.796908 
diff Energy = 0.861300 
diff Energy = 1.782946 
diff Energy = 6.770521 
diff Energy = 12.430046 
Finish ICM step! 
iter = 12, loglik= -77947040.000000, dloglik=0.000276 
predict Y and V! 
diff Energy = 20.950425 
diff Energy = 52.862452 
diff Energy = 4.062366 
diff Energy = 6.956133 
diff Energy = 0.582649 
diff Energy = 21.749396 
diff Energy = 5.938515 
diff Energy = 13.605689 
diff Energy = 6.041103 
Finish ICM step! 
iter = 13, loglik= -77930032.000000, dloglik=0.000218 
predict Y and V! 
diff Energy = 13.943596 
diff Energy = 5.761904 
diff Energy = 4.278876 
diff Energy = 11.431483 
diff Energy = 5.598206 
diff Energy = 5.969730 
diff Energy = 14.791668 
Finish ICM step! 
iter = 14, loglik= -77916072.000000, dloglik=0.000179 
predict Y and V! 
diff Energy = 7.864641 
diff Energy = 1.293264 
diff Energy = 3.539894 
diff Energy = 8.587704 
diff Energy = 1.436132 
diff Energy = 0.790125 
diff Energy = 3.328560 
diff Energy = 3.494501 
diff Energy = 60.229026 
Finish ICM step! 
iter = 15, loglik= -77904728.000000, dloglik=0.000146 
predict Y and V! 
diff Energy = 18.533038 
diff Energy = 4.309947 
diff Energy = 19.309072 
diff Energy = 4.885477 
diff Energy = 19.711700 
diff Energy = 4.481120 
diff Energy = 6.103813 
Finish ICM step! 
iter = 16, loglik= -77894872.000000, dloglik=0.000127 
predict Y and V! 
diff Energy = 17.772675 
diff Energy = 1.480966 
diff Energy = 9.072545 
diff Energy = 3.449197 
diff Energy = 1.135961 
diff Energy = 1.593558 
diff Energy = 6.923463 
Finish ICM step! 
iter = 17, loglik= -77886304.000000, dloglik=0.000110 
predict Y and V! 
diff Energy = 13.876931 
diff Energy = 1.700308 
diff Energy = 2.518318 
diff Energy = 24.110578 
diff Energy = 0.098378 
diff Energy = 6.147507 
diff Energy = 3.532669 
diff Energy = 6.298736 
diff Energy = 7.983158 
diff Energy = 5.695732 
Finish ICM step! 
iter = 18, loglik= -77878680.000000, dloglik=0.000098 
predict Y and V! 
diff Energy = 43.999161 
diff Energy = 0.677518 
diff Energy = 0.589914 
diff Energy = 2.340172 
diff Energy = 1.153497 
diff Energy = 5.142222 
diff Energy = 6.817989 
Finish ICM step! 
iter = 19, loglik= -77871736.000000, dloglik=0.000089 
predict Y and V! 
diff Energy = 5.993096 
diff Energy = 2.933161 
diff Energy = 4.819978 
diff Energy = 8.792856 
diff Energy = 0.278119 
diff Energy = 12.200828 
diff Energy = 0.790574 
diff Energy = 14.587470 
diff Energy = 5.604078 
Finish ICM step! 
iter = 20, loglik= -77865296.000000, dloglik=0.000083 
predict Y and V! 
diff Energy = 11.666481 
diff Energy = 0.486840 
diff Energy = 9.872028 
diff Energy = 0.743062 
diff Energy = 0.600717 
diff Energy = 8.073660 
diff Energy = 4.674508 
Finish ICM step! 
iter = 21, loglik= -77858896.000000, dloglik=0.000082 
predict Y and V! 
diff Energy = 3.137793 
diff Energy = 1.819850 
diff Energy = 9.220920 
diff Energy = 5.848674 
diff Energy = 0.268921 
diff Energy = 1.698831 
diff Energy = 2.037224 
diff Energy = 9.898996 
diff Energy = 17.321723 
Finish ICM step! 
iter = 22, loglik= -77852440.000000, dloglik=0.000083 
predict Y and V! 
diff Energy = 15.918958 
diff Energy = 6.042485 
diff Energy = 6.087182 
diff Energy = 1.395377 
diff Energy = 9.884606 
diff Energy = 12.531685 
diff Energy = 1.117324 
diff Energy = 18.174333 
diff Energy = 4.174358 
diff Energy = 12.683116 
Finish ICM step! 
iter = 23, loglik= -77845352.000000, dloglik=0.000091 
predict Y and V! 
diff Energy = 6.802943 
diff Energy = 5.389326 
diff Energy = 3.682609 
diff Energy = 2.680137 
diff Energy = 13.526556 
diff Energy = 22.237170 
diff Energy = 2.548321 
diff Energy = 5.779365 
diff Energy = 27.840952 
diff Energy = 8.023236 
Finish ICM step! 
iter = 24, loglik= -77838000.000000, dloglik=0.000094 
predict Y and V! 
diff Energy = 4.593182 
diff Energy = 15.824804 
diff Energy = 16.452190 
diff Energy = 2.123038 
diff Energy = 2.763446 
diff Energy = 29.328602 
diff Energy = 7.194599 
diff Energy = 2.455460 
Finish ICM step! 
iter = 25, loglik= -77830240.000000, dloglik=0.000100 
predict Y and V! 
diff Energy = 3.387596 
diff Energy = 1.637996 
diff Energy = 7.343492 
diff Energy = 7.123844 
diff Energy = 7.195299 
diff Energy = 31.036615 
diff Energy = 2.000836 
diff Energy = 1.685921 
diff Energy = 7.078782 
diff Energy = 7.073364 
Finish ICM step! 
iter = 26, loglik= -77822224.000000, dloglik=0.000103 
predict Y and V! 
diff Energy = 9.942752 
diff Energy = 1.002566 
diff Energy = 2.088278 
diff Energy = 2.419200 
diff Energy = 7.295178 
diff Energy = 4.744779 
diff Energy = 5.720267 
Finish ICM step! 
iter = 27, loglik= -77813240.000000, dloglik=0.000115 
predict Y and V! 
diff Energy = 18.068491 
diff Energy = 0.372482 
diff Energy = 3.383319 
diff Energy = 8.622563 
diff Energy = 5.758103 
diff Energy = 1.207363 
diff Energy = 1.651774 
diff Energy = 0.210340 
Finish ICM step! 
iter = 28, loglik= -77803856.000000, dloglik=0.000121 
predict Y and V! 
diff Energy = 9.073465 
diff Energy = 2.287305 
diff Energy = 1.321109 
diff Energy = 1.453070 
diff Energy = 1.370766 
diff Energy = 65.842346 
diff Energy = 1.032556 
diff Energy = 0.168780 
diff Energy = 18.406369 
diff Energy = 6.394445 
Finish ICM step! 
iter = 29, loglik= -77793960.000000, dloglik=0.000127 
predict Y and V! 
diff Energy = 17.371610 
diff Energy = 2.964949 
diff Energy = 2.903677 
diff Energy = 7.095949 
diff Energy = 0.931266 
diff Energy = 0.903440 
diff Energy = 0.195141 
diff Energy = 5.783226 
diff Energy = 1.214114 
Finish ICM step! 
iter = 30, loglik= -77783584.000000, dloglik=0.000133 
19744.648 sec elapsed
**** Job ends ****
Wed Mar 22 02:22:05 EDT 2023
**** Job starts ****
Thu Mar 30 00:53:17 EDT 2023
**** JHPCE info ****
User: enelson
Job id: 3084530
Job name: PRECAST_k16-25
Hostname: compute-098.cm.cluster
Task id: 16
Loading conda_R/4.2.x

Currently Loaded Modules:
  1) matlab/R2019a     6) COMMUNITY_CENTOS7_DEFAULT_ENV
  2) stata/17          7) JHPCE_CENTOS7_DEFAULT_ENV
  3) JHPCE_tools/1.0   8) conda/3-4.11.0
  4) sge/8.1.9         9) conda_R/4.2.x
  5) gcc/4.4.7

 

Filter spots and features from Raw count data...
 
 
Find the spatially variables genes by SPARK-X...

## ===== SPARK-X INPUT INFORMATION ====
## number of total samples: 7569
## number of total genes: 23689
## Running with single core, may take some time 

## Testing With Projection Kernel
## Testing With Gaussian Kernel 1
## Testing With Gaussian Kernel 2
## Testing With Gaussian Kernel 3
## Testing With Gaussian Kernel 4
## Testing With Gaussian Kernel 5
## Testing With Cosine Kernel 1
## Testing With Cosine Kernel 2
## Testing With Cosine Kernel 3
## Testing With Cosine Kernel 4
## Testing With Cosine Kernel 5
Find the spatially variables genes by SPARK-X...

## ===== SPARK-X INPUT INFORMATION ====
## number of total samples: 8089
## number of total genes: 24208
## Running with single core, may take some time 

## Testing With Projection Kernel
## Testing With Gaussian Kernel 1
## Testing With Gaussian Kernel 2
## Testing With Gaussian Kernel 3
## Testing With Gaussian Kernel 4
## Testing With Gaussian Kernel 5
## Testing With Cosine Kernel 1
## Testing With Cosine Kernel 2
## Testing With Cosine Kernel 3
## Testing With Cosine Kernel 4
## Testing With Cosine Kernel 5
Find the spatially variables genes by SPARK-X...

## ===== SPARK-X INPUT INFORMATION ====
## number of total samples: 16334
## number of total genes: 25336
## Running with single core, may take some time 

## Testing With Projection Kernel
## Testing With Gaussian Kernel 1
## Testing With Gaussian Kernel 2
## Testing With Gaussian Kernel 3
## Testing With Gaussian Kernel 4
## Testing With Gaussian Kernel 5
## Testing With Cosine Kernel 1
## Testing With Cosine Kernel 2
## Testing With Cosine Kernel 3
## Testing With Cosine Kernel 4
## Testing With Cosine Kernel 5
Find the spatially variables genes by SPARK-X...

## ===== SPARK-X INPUT INFORMATION ====
## number of total samples: 14105
## number of total genes: 26447
## Running with single core, may take some time 

## Testing With Projection Kernel
## Testing With Gaussian Kernel 1
## Testing With Gaussian Kernel 2
## Testing With Gaussian Kernel 3
## Testing With Gaussian Kernel 4
## Testing With Gaussian Kernel 5
## Testing With Cosine Kernel 1
## Testing With Cosine Kernel 2
## Testing With Cosine Kernel 3
## Testing With Cosine Kernel 4
## Testing With Cosine Kernel 5
Find the spatially variables genes by SPARK-X...

## ===== SPARK-X INPUT INFORMATION ====
## number of total samples: 8670
## number of total genes: 24039
## Running with single core, may take some time 

## Testing With Projection Kernel
## Testing With Gaussian Kernel 1
## Testing With Gaussian Kernel 2
## Testing With Gaussian Kernel 3
## Testing With Gaussian Kernel 4
## Testing With Gaussian Kernel 5
## Testing With Cosine Kernel 1
## Testing With Cosine Kernel 2
## Testing With Cosine Kernel 3
## Testing With Cosine Kernel 4
## Testing With Cosine Kernel 5
Find the spatially variables genes by SPARK-X...

## ===== SPARK-X INPUT INFORMATION ====
## number of total samples: 6071
## number of total genes: 23183
## Running with single core, may take some time 

## Testing With Projection Kernel
## Testing With Gaussian Kernel 1
## Testing With Gaussian Kernel 2
## Testing With Gaussian Kernel 3
## Testing With Gaussian Kernel 4
## Testing With Gaussian Kernel 5
## Testing With Cosine Kernel 1
## Testing With Cosine Kernel 2
## Testing With Cosine Kernel 3
## Testing With Cosine Kernel 4
## Testing With Cosine Kernel 5
Find the spatially variables genes by SPARK-X...

## ===== SPARK-X INPUT INFORMATION ====
## number of total samples: 9895
## number of total genes: 24035
## Running with single core, may take some time 

## Testing With Projection Kernel
## Testing With Gaussian Kernel 1
## Testing With Gaussian Kernel 2
## Testing With Gaussian Kernel 3
## Testing With Gaussian Kernel 4
## Testing With Gaussian Kernel 5
## Testing With Cosine Kernel 1
## Testing With Cosine Kernel 2
## Testing With Cosine Kernel 3
## Testing With Cosine Kernel 4
## Testing With Cosine Kernel 5
Find the spatially variables genes by SPARK-X...

## ===== SPARK-X INPUT INFORMATION ====
## number of total samples: 17222
## number of total genes: 26256
## Running with single core, may take some time 

## Testing With Projection Kernel
## Testing With Gaussian Kernel 1
## Testing With Gaussian Kernel 2
## Testing With Gaussian Kernel 3
## Testing With Gaussian Kernel 4
## Testing With Gaussian Kernel 5
## Testing With Cosine Kernel 1
## Testing With Cosine Kernel 2
## Testing With Cosine Kernel 3
## Testing With Cosine Kernel 4
## Testing With Cosine Kernel 5
Find the spatially variables genes by SPARK-X...

## ===== SPARK-X INPUT INFORMATION ====
## number of total samples: 15785
## number of total genes: 25978
## Running with single core, may take some time 

## Testing With Projection Kernel
## Testing With Gaussian Kernel 1
## Testing With Gaussian Kernel 2
## Testing With Gaussian Kernel 3
## Testing With Gaussian Kernel 4
## Testing With Gaussian Kernel 5
## Testing With Cosine Kernel 1
## Testing With Cosine Kernel 2
## Testing With Cosine Kernel 3
## Testing With Cosine Kernel 4
## Testing With Cosine Kernel 5
Find the spatially variables genes by SPARK-X...

## ===== SPARK-X INPUT INFORMATION ====
## number of total samples: 12039
## number of total genes: 24495
## Running with single core, may take some time 

## Testing With Projection Kernel
## Testing With Gaussian Kernel 1
## Testing With Gaussian Kernel 2
## Testing With Gaussian Kernel 3
## Testing With Gaussian Kernel 4
## Testing With Gaussian Kernel 5
## Testing With Cosine Kernel 1
## Testing With Cosine Kernel 2
## Testing With Cosine Kernel 3
## Testing With Cosine Kernel 4
## Testing With Cosine Kernel 5
Find the spatially variables genes by SPARK-X...

## ===== SPARK-X INPUT INFORMATION ====
## number of total samples: 13970
## number of total genes: 24879
## Running with single core, may take some time 

## Testing With Projection Kernel
## Testing With Gaussian Kernel 1
## Testing With Gaussian Kernel 2
## Testing With Gaussian Kernel 3
## Testing With Gaussian Kernel 4
## Testing With Gaussian Kernel 5
## Testing With Cosine Kernel 1
## Testing With Cosine Kernel 2
## Testing With Cosine Kernel 3
## Testing With Cosine Kernel 4
## Testing With Cosine Kernel 5
Select common top variable genes  for multiple samples...
Filter spots and features from SVGs(HVGs) count data...
Performing log-normalization
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Performing log-normalization
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Performing log-normalization
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Performing log-normalization
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Performing log-normalization
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Performing log-normalization
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Performing log-normalization
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Performing log-normalization
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Performing log-normalization
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Performing log-normalization
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Performing log-normalization
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
There were 24 warnings (use warnings() to see them)
[[1]]
An object of class Seurat 
2000 features across 7538 samples within 1 assay 
Active assay: RNA (2000 features, 467 variable features)

[[2]]
An object of class Seurat 
2000 features across 8079 samples within 1 assay 
Active assay: RNA (2000 features, 458 variable features)

[[3]]
An object of class Seurat 
2000 features across 16022 samples within 1 assay 
Active assay: RNA (2000 features, 459 variable features)

[[4]]
An object of class Seurat 
2000 features across 14065 samples within 1 assay 
Active assay: RNA (2000 features, 449 variable features)

[[5]]
An object of class Seurat 
2000 features across 8637 samples within 1 assay 
Active assay: RNA (2000 features, 482 variable features)

[[6]]
An object of class Seurat 
2000 features across 5952 samples within 1 assay 
Active assay: RNA (2000 features, 453 variable features)

[[7]]
An object of class Seurat 
2000 features across 9490 samples within 1 assay 
Active assay: RNA (2000 features, 482 variable features)

[[8]]
An object of class Seurat 
2000 features across 16998 samples within 1 assay 
Active assay: RNA (2000 features, 457 variable features)

[[9]]
An object of class Seurat 
2000 features across 15390 samples within 1 assay 
Active assay: RNA (2000 features, 420 variable features)

[[10]]
An object of class Seurat 
2000 features across 11862 samples within 1 assay 
Active assay: RNA (2000 features, 461 variable features)

[[11]]
An object of class Seurat 
2000 features across 13539 samples within 1 assay 
Active assay: RNA (2000 features, 444 variable features)

Neighbors were identified for 7538 out of 7538 spots.
Neighbors were identified for 8079 out of 8079 spots.
Neighbors were identified for 16022 out of 16022 spots.
Neighbors were identified for 14065 out of 14065 spots.
Neighbors were identified for 8637 out of 8637 spots.
Neighbors were identified for 5951 out of 5952 spots.
Neighbors were identified for 9489 out of 9490 spots.
Neighbors were identified for 16998 out of 16998 spots.
Neighbors were identified for 15390 out of 15390 spots.
Neighbors were identified for 11862 out of 11862 spots.
Neighbors were identified for 13539 out of 13539 spots.
Intergrative data info.: 11 samples, 2000 genes X 127572 spots------
PRECAST model setting: error_heter=TRUE, Sigma_equal=FALSE, Sigma_diag=TRUE, mix_prop_heter=TRUE
Start computing intial values... 

fitting ...
  |                                                                              |                                                                      |   0%  |                                                                              |===================================                                   |  50%  |                                                                              |======================================================================| 100%
----Fitting PRECAST model----------------

variable initialize finish! 
predict Y and V! 
diff Energy = 59.810136 
diff Energy = 391.894795 
diff Energy = 202.846139 
diff Energy = 15.720108 
diff Energy = 86.273031 
diff Energy = 828.496592 
diff Energy = 255.697686 
diff Energy = 86.851823 
diff Energy = 112.426813 
Finish ICM step! 
iter = 2, loglik= 75903512.000000, dloglik=1.035345 
predict Y and V! 
diff Energy = 57.769166 
diff Energy = 17.255596 
diff Energy = 2.809598 
diff Energy = 59.307631 
diff Energy = 82.820182 
diff Energy = 20.808471 
diff Energy = 20.777198 
diff Energy = 117.105430 
diff Energy = 38.322303 
diff Energy = 8.548934 
diff Energy = 137.067134 
Finish ICM step! 
iter = 3, loglik= 76352088.000000, dloglik=0.005910 
predict Y and V! 
diff Energy = 58.458107 
diff Energy = 31.962284 
diff Energy = 11.781007 
diff Energy = 108.930598 
diff Energy = 106.472193 
diff Energy = 68.944968 
diff Energy = 31.039602 
diff Energy = 108.148511 
diff Energy = 26.430784 
diff Energy = 71.505124 
diff Energy = 53.023857 
Finish ICM step! 
iter = 4, loglik= 76475048.000000, dloglik=0.001610 
predict Y and V! 
diff Energy = 21.253869 
diff Energy = 28.061392 
diff Energy = 5.810088 
diff Energy = 42.103557 
diff Energy = 86.500014 
diff Energy = 39.370909 
diff Energy = 2.460451 
diff Energy = 7.990298 
diff Energy = 23.288642 
diff Energy = 1.994860 
diff Energy = 16.163993 
Finish ICM step! 
iter = 5, loglik= 76532648.000000, dloglik=0.000753 
predict Y and V! 
diff Energy = 3.733175 
diff Energy = 6.089025 
diff Energy = 32.573404 
diff Energy = 27.199391 
diff Energy = 19.352174 
diff Energy = 10.327465 
diff Energy = 20.238013 
diff Energy = 17.373156 
diff Energy = 2.218346 
diff Energy = 0.644720 
diff Energy = 11.043822 
Finish ICM step! 
iter = 6, loglik= 76569240.000000, dloglik=0.000478 
predict Y and V! 
diff Energy = 8.371002 
diff Energy = 5.223340 
diff Energy = 34.129550 
diff Energy = 43.165962 
diff Energy = 23.655924 
diff Energy = 12.633453 
diff Energy = 28.329014 
diff Energy = 3.566705 
diff Energy = 5.531107 
diff Energy = 12.674626 
Finish ICM step! 
iter = 7, loglik= 76597088.000000, dloglik=0.000364 
predict Y and V! 
diff Energy = 10.070816 
diff Energy = 15.552109 
diff Energy = 20.163458 
diff Energy = 72.744228 
diff Energy = 4.903694 
diff Energy = 32.923762 
diff Energy = 1.321684 
diff Energy = 5.795138 
diff Energy = 0.929457 
diff Energy = 1.288657 
Finish ICM step! 
iter = 8, loglik= 76621408.000000, dloglik=0.000318 
predict Y and V! 
diff Energy = 10.657705 
diff Energy = 7.058407 
diff Energy = 27.157776 
diff Energy = 1.545920 
diff Energy = 7.173372 
diff Energy = 11.537556 
diff Energy = 9.858764 
diff Energy = 7.847954 
diff Energy = 9.305172 
diff Energy = 8.013427 
Finish ICM step! 
iter = 9, loglik= 76642592.000000, dloglik=0.000276 
predict Y and V! 
diff Energy = 8.437454 
diff Energy = 3.602670 
diff Energy = 8.627644 
diff Energy = 21.203164 
diff Energy = 5.145323 
diff Energy = 15.732355 
diff Energy = 4.357386 
diff Energy = 1.229645 
diff Energy = 6.996700 
Finish ICM step! 
iter = 10, loglik= 76663120.000000, dloglik=0.000268 
predict Y and V! 
diff Energy = 61.589625 
diff Energy = 0.092854 
diff Energy = 5.630650 
diff Energy = 9.354853 
diff Energy = 15.474135 
diff Energy = 7.879051 
diff Energy = 120.840763 
diff Energy = 0.544516 
diff Energy = 181.032002 
Finish ICM step! 
iter = 11, loglik= 76685536.000000, dloglik=0.000292 
predict Y and V! 
diff Energy = 10.323328 
diff Energy = 5.472581 
diff Energy = 109.792015 
diff Energy = 4.879854 
diff Energy = 3.671688 
diff Energy = 10.521573 
diff Energy = 105.988889 
diff Energy = 2.819823 
diff Energy = 6.353577 
diff Energy = 31.522573 
diff Energy = 17.940399 
Finish ICM step! 
iter = 12, loglik= 76708288.000000, dloglik=0.000297 
predict Y and V! 
diff Energy = 5.023143 
diff Energy = 0.167891 
diff Energy = 18.735667 
diff Energy = 0.042272 
diff Energy = 1.927178 
diff Energy = 4.955952 
diff Energy = 6.400322 
diff Energy = 2.969959 
diff Energy = 0.320964 
diff Energy = 27.197721 
Finish ICM step! 
iter = 13, loglik= 76727504.000000, dloglik=0.000251 
predict Y and V! 
diff Energy = 2.052543 
diff Energy = 0.849195 
diff Energy = 24.633250 
diff Energy = 4.661923 
diff Energy = 89.704476 
diff Energy = 11.386952 
diff Energy = 1.563778 
diff Energy = 1.170411 
diff Energy = 2.551132 
diff Energy = 2.292438 
Finish ICM step! 
iter = 14, loglik= 76742792.000000, dloglik=0.000199 
predict Y and V! 
diff Energy = 6.167231 
diff Energy = 4.489359 
diff Energy = 21.431633 
diff Energy = 1.106707 
diff Energy = 12.162982 
diff Energy = 6.906664 
diff Energy = 2.937442 
diff Energy = 10.110233 
diff Energy = 14.242827 
diff Energy = 8.377812 
diff Energy = 3.944091 
Finish ICM step! 
iter = 15, loglik= 76755352.000000, dloglik=0.000164 
predict Y and V! 
diff Energy = 1.625288 
diff Energy = 15.869454 
diff Energy = 5.677313 
diff Energy = 8.074301 
diff Energy = 6.166519 
diff Energy = 0.267204 
diff Energy = 16.671237 
diff Energy = 15.538129 
Finish ICM step! 
iter = 16, loglik= 76766528.000000, dloglik=0.000146 
predict Y and V! 
diff Energy = 19.958994 
diff Energy = 35.494807 
diff Energy = 14.932117 
diff Energy = 10.346339 
diff Energy = 14.174175 
diff Energy = 3.583683 
diff Energy = 5.204213 
diff Energy = 0.054009 
diff Energy = 16.109502 
Finish ICM step! 
iter = 17, loglik= 76777192.000000, dloglik=0.000139 
predict Y and V! 
diff Energy = 16.202689 
diff Energy = 6.299475 
diff Energy = 5.825814 
diff Energy = 3.222285 
diff Energy = 4.151180 
diff Energy = 0.996840 
diff Energy = 3.320904 
diff Energy = 4.206630 
diff Energy = 2.950430 
diff Energy = 6.597757 
diff Energy = 21.870706 
Finish ICM step! 
iter = 18, loglik= 76787448.000000, dloglik=0.000134 
predict Y and V! 
diff Energy = 0.031129 
diff Energy = 0.408426 
diff Energy = 6.913519 
diff Energy = 1.164136 
diff Energy = 6.608058 
diff Energy = 2.593585 
diff Energy = 5.965868 
diff Energy = 2.565717 
diff Energy = 2.386374 
diff Energy = 8.901881 
diff Energy = 1.889452 
Finish ICM step! 
iter = 19, loglik= 76797704.000000, dloglik=0.000134 
predict Y and V! 
diff Energy = 4.625459 
diff Energy = 2.550642 
diff Energy = 2.943032 
diff Energy = 5.961172 
diff Energy = 0.616527 
diff Energy = 5.035416 
diff Energy = 0.021775 
diff Energy = 14.008163 
Finish ICM step! 
iter = 20, loglik= 76807824.000000, dloglik=0.000132 
predict Y and V! 
diff Energy = 1.150007 
diff Energy = 8.026126 
diff Energy = 19.093522 
diff Energy = 0.577128 
diff Energy = 5.078614 
diff Energy = 7.387454 
diff Energy = 1.783693 
diff Energy = 2.787612 
Finish ICM step! 
iter = 21, loglik= 76817744.000000, dloglik=0.000129 
predict Y and V! 
diff Energy = 5.306826 
diff Energy = 0.747186 
diff Energy = 5.444394 
diff Energy = 1.084490 
diff Energy = 2.848203 
diff Energy = 2.958116 
diff Energy = 3.444020 
diff Energy = 8.296583 
diff Energy = 0.170742 
Finish ICM step! 
iter = 22, loglik= 76827432.000000, dloglik=0.000126 
predict Y and V! 
diff Energy = 5.989903 
diff Energy = 2.952873 
diff Energy = 9.235525 
diff Energy = 6.074752 
diff Energy = 32.412218 
diff Energy = 9.264072 
diff Energy = 1.357189 
diff Energy = 9.258277 
diff Energy = 1.568627 
Finish ICM step! 
iter = 23, loglik= 76837096.000000, dloglik=0.000126 
predict Y and V! 
diff Energy = 2.687975 
diff Energy = 8.477577 
diff Energy = 6.241500 
diff Energy = 6.037400 
diff Energy = 2.058427 
diff Energy = 3.247780 
diff Energy = 12.744212 
diff Energy = 1.531286 
diff Energy = 4.215062 
Finish ICM step! 
iter = 24, loglik= 76847112.000000, dloglik=0.000130 
predict Y and V! 
diff Energy = 2.340958 
diff Energy = 0.627345 
diff Energy = 13.763215 
diff Energy = 17.974509 
diff Energy = 1.241452 
diff Energy = 0.955327 
diff Energy = 12.751037 
diff Energy = 4.701594 
Finish ICM step! 
iter = 25, loglik= 76858040.000000, dloglik=0.000142 
predict Y and V! 
diff Energy = 4.753957 
diff Energy = 1.071716 
diff Energy = 30.460522 
diff Energy = 16.868049 
diff Energy = 4.237881 
diff Energy = 1.898155 
diff Energy = 0.001668 
diff Energy = 8.200162 
diff Energy = 6.561708 
Finish ICM step! 
iter = 26, loglik= 76870776.000000, dloglik=0.000166 
predict Y and V! 
diff Energy = 10.846508 
diff Energy = 0.202570 
diff Energy = 4.333335 
diff Energy = 2.406290 
diff Energy = 3.771683 
diff Energy = 2.997356 
diff Energy = 1.576876 
diff Energy = 9.852210 
Finish ICM step! 
iter = 27, loglik= 76886984.000000, dloglik=0.000211 
predict Y and V! 
diff Energy = 15.076045 
diff Energy = 1.105111 
diff Energy = 7.593687 
diff Energy = 8.398606 
diff Energy = 11.559180 
diff Energy = 13.908596 
diff Energy = 23.715077 
diff Energy = 7.875718 
diff Energy = 12.951776 
diff Energy = 11.640213 
Finish ICM step! 
iter = 28, loglik= 76908720.000000, dloglik=0.000283 
predict Y and V! 
diff Energy = 18.301972 
diff Energy = 12.760270 
diff Energy = 18.722143 
diff Energy = 14.648185 
diff Energy = 0.622987 
diff Energy = 4.267983 
diff Energy = 11.137367 
diff Energy = 2.568914 
diff Energy = 6.863798 
diff Energy = 16.041535 
Finish ICM step! 
iter = 29, loglik= 76937056.000000, dloglik=0.000368 
predict Y and V! 
diff Energy = 21.494542 
diff Energy = 0.221482 
diff Energy = 6.485580 
diff Energy = 10.931151 
diff Energy = 7.876213 
diff Energy = 14.311082 
diff Energy = 30.367431 
diff Energy = 17.959174 
diff Energy = 7.407753 
Finish ICM step! 
iter = 30, loglik= 76969992.000000, dloglik=0.000428 
16042.083 sec elapsed
**** Job ends ****
Thu Mar 30 05:43:21 EDT 2023
**** Job starts ****
Wed May  3 22:53:35 EDT 2023
**** JHPCE info ****
User: enelson
Job id: 3133844
Job name: PRECAST_k10-30
Hostname: compute-096.cm.cluster
Task id: 16
Loading conda_R/4.2.x

Currently Loaded Modules:
  1) matlab/R2019a     6) COMMUNITY_CENTOS7_DEFAULT_ENV
  2) stata/17          7) JHPCE_CENTOS7_DEFAULT_ENV
  3) JHPCE_tools/1.0   8) conda/3-4.11.0
  4) sge/8.1.9         9) conda_R/4.2.x
  5) gcc/4.4.7

 

Filter spots and features from Raw count data...
 
 
Calculating gene variances
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Calculating feature variances of standardized and clipped values
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Calculating gene variances
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Calculating feature variances of standardized and clipped values
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Calculating gene variances
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Calculating feature variances of standardized and clipped values
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Calculating gene variances
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Calculating feature variances of standardized and clipped values
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Calculating gene variances
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Calculating feature variances of standardized and clipped values
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Calculating gene variances
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Calculating feature variances of standardized and clipped values
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Calculating gene variances
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Calculating feature variances of standardized and clipped values
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Calculating gene variances
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Calculating feature variances of standardized and clipped values
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Calculating gene variances
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Calculating feature variances of standardized and clipped values
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Calculating gene variances
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Calculating feature variances of standardized and clipped values
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Select common top variable genes  for multiple samples...
Filter spots and features from SVGs(HVGs) count data...
Performing log-normalization
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Performing log-normalization
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Performing log-normalization
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Performing log-normalization
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Performing log-normalization
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Performing log-normalization
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Performing log-normalization
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Performing log-normalization
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Performing log-normalization
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Performing log-normalization
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
[[1]]
An object of class Seurat 
2000 features across 14124 samples within 1 assay 
Active assay: RNA (2000 features, 1065 variable features)

[[2]]
An object of class Seurat 
2000 features across 19594 samples within 1 assay 
Active assay: RNA (2000 features, 1233 variable features)

[[3]]
An object of class Seurat 
2000 features across 14098 samples within 1 assay 
Active assay: RNA (2000 features, 1067 variable features)

[[4]]
An object of class Seurat 
2000 features across 8659 samples within 1 assay 
Active assay: RNA (2000 features, 988 variable features)

[[5]]
An object of class Seurat 
2000 features across 14358 samples within 1 assay 
Active assay: RNA (2000 features, 1105 variable features)

[[6]]
An object of class Seurat 
2000 features across 18676 samples within 1 assay 
Active assay: RNA (2000 features, 1039 variable features)

[[7]]
An object of class Seurat 
2000 features across 20573 samples within 1 assay 
Active assay: RNA (2000 features, 1179 variable features)

[[8]]
An object of class Seurat 
2000 features across 8387 samples within 1 assay 
Active assay: RNA (2000 features, 984 variable features)

[[9]]
An object of class Seurat 
2000 features across 17973 samples within 1 assay 
Active assay: RNA (2000 features, 1096 variable features)

[[10]]
An object of class Seurat 
2000 features across 15310 samples within 1 assay 
Active assay: RNA (2000 features, 1147 variable features)

Neighbors were identified for 14121 out of 14124 spots.
Neighbors were identified for 19593 out of 19594 spots.
Neighbors were identified for 14098 out of 14098 spots.
Neighbors were identified for 8659 out of 8659 spots.
Neighbors were identified for 14358 out of 14358 spots.
Neighbors were identified for 18676 out of 18676 spots.
Neighbors were identified for 20570 out of 20573 spots.
Neighbors were identified for 8387 out of 8387 spots.
Neighbors were identified for 17969 out of 17973 spots.
Neighbors were identified for 15310 out of 15310 spots.
Intergrative data info.: 10 samples, 2000 genes X 151752 spots------
PRECAST model setting: error_heter=TRUE, Sigma_equal=FALSE, Sigma_diag=TRUE, mix_prop_heter=TRUE
Start computing intial values... 

fitting ...
  |                                                                              |                                                                      |   0%  |                                                                              |===================================                                   |  50%  |                                                                              |======================================================================| 100%
----Fitting PRECAST model----------------

variable initialize finish! 
predict Y and V! 
diff Energy = 15.663820 
Finish ICM step! 
iter = 2, loglik= 136934704.000000, dloglik=1.063765 
predict Y and V! 
diff Energy = 7.020627 
diff Energy = 70.003257 
diff Energy = 9.748904 
diff Energy = 8.766358 
diff Energy = 38.264263 
diff Energy = 2.024316 
diff Energy = 0.822244 
diff Energy = 17.218042 
diff Energy = 9.219335 
diff Energy = 30.305357 
Finish ICM step! 
iter = 3, loglik= 138157456.000000, dloglik=0.008929 
predict Y and V! 
diff Energy = 78.286650 
diff Energy = 106.027304 
diff Energy = 53.313640 
diff Energy = 50.158107 
diff Energy = 83.119195 
diff Energy = 111.833966 
diff Energy = 57.697976 
diff Energy = 82.049932 
diff Energy = 130.959361 
diff Energy = 106.764352 
Finish ICM step! 
iter = 4, loglik= 138629008.000000, dloglik=0.003413 
predict Y and V! 
diff Energy = 111.532469 
diff Energy = 105.358679 
diff Energy = 103.425037 
diff Energy = 70.329735 
diff Energy = 100.821125 
diff Energy = 46.390492 
diff Energy = 106.644233 
diff Energy = 58.901577 
diff Energy = 129.450208 
diff Energy = 156.404221 
Finish ICM step! 
iter = 5, loglik= 138876496.000000, dloglik=0.001785 
predict Y and V! 
diff Energy = 73.494314 
diff Energy = 38.410130 
diff Energy = 68.997535 
diff Energy = 64.387986 
diff Energy = 62.855020 
diff Energy = 84.186915 
diff Energy = 10.332798 
diff Energy = 50.585859 
diff Energy = 75.131686 
diff Energy = 30.710972 
Finish ICM step! 
iter = 6, loglik= 139011872.000000, dloglik=0.000975 
predict Y and V! 
diff Energy = 58.781702 
diff Energy = 62.004863 
diff Energy = 11.721401 
diff Energy = 68.882356 
diff Energy = 0.919155 
diff Energy = 5.426496 
diff Energy = 40.455927 
diff Energy = 79.313879 
diff Energy = 54.192327 
diff Energy = 72.661316 
Finish ICM step! 
iter = 7, loglik= 139100208.000000, dloglik=0.000635 
predict Y and V! 
diff Energy = 97.015317 
diff Energy = 29.684390 
diff Energy = 7.168152 
diff Energy = 24.069008 
diff Energy = 4.621801 
diff Energy = 11.006448 
diff Energy = 0.209247 
diff Energy = 9.978137 
diff Energy = 36.338255 
diff Energy = 16.824485 
Finish ICM step! 
iter = 8, loglik= 139163184.000000, dloglik=0.000453 
predict Y and V! 
diff Energy = 46.747550 
diff Energy = 18.883367 
diff Energy = 20.602410 
diff Energy = 6.932646 
diff Energy = 35.048301 
diff Energy = 0.540131 
diff Energy = 11.739677 
diff Energy = 10.686518 
diff Energy = 12.194639 
diff Energy = 12.181676 
Finish ICM step! 
iter = 9, loglik= 139209360.000000, dloglik=0.000332 
predict Y and V! 
diff Energy = 8.468615 
diff Energy = 28.438872 
diff Energy = 27.453010 
diff Energy = 44.469594 
diff Energy = 29.462603 
diff Energy = 3.674848 
diff Energy = 96.449904 
diff Energy = 16.491402 
Finish ICM step! 
iter = 10, loglik= 139243936.000000, dloglik=0.000248 
predict Y and V! 
diff Energy = 27.254171 
diff Energy = 63.729289 
diff Energy = 3.172701 
diff Energy = 2.264446 
diff Energy = 11.518329 
diff Energy = 12.157546 
diff Energy = 12.442563 
diff Energy = 17.015774 
diff Energy = 13.773352 
Finish ICM step! 
iter = 11, loglik= 139270384.000000, dloglik=0.000190 
predict Y and V! 
diff Energy = 0.105744 
diff Energy = 3.091044 
diff Energy = 7.428453 
diff Energy = 5.309187 
diff Energy = 0.628190 
diff Energy = 40.822223 
diff Energy = 16.866191 
diff Energy = 1.811912 
diff Energy = 28.040039 
Finish ICM step! 
iter = 12, loglik= 139291280.000000, dloglik=0.000150 
predict Y and V! 
diff Energy = 5.166186 
diff Energy = 1.558689 
diff Energy = 10.167910 
diff Energy = 3.248511 
diff Energy = 18.524718 
diff Energy = 0.922214 
diff Energy = 0.907087 
diff Energy = 0.376691 
diff Energy = 10.110950 
diff Energy = 7.579424 
Finish ICM step! 
iter = 13, loglik= 139307968.000000, dloglik=0.000120 
predict Y and V! 
diff Energy = 21.552607 
diff Energy = 4.630308 
diff Energy = 3.846987 
diff Energy = 0.753796 
diff Energy = 12.226741 
diff Energy = 2.252328 
diff Energy = 3.310830 
diff Energy = 0.639689 
diff Energy = 7.042235 
diff Energy = 18.790683 
Finish ICM step! 
iter = 14, loglik= 139321360.000000, dloglik=0.000096 
predict Y and V! 
diff Energy = 22.703426 
diff Energy = 3.542679 
diff Energy = 4.944255 
diff Energy = 5.711651 
diff Energy = 0.552305 
diff Energy = 4.654374 
diff Energy = 7.675795 
diff Energy = 62.290713 
Finish ICM step! 
iter = 15, loglik= 139332608.000000, dloglik=0.000081 
predict Y and V! 
diff Energy = 4.450047 
diff Energy = 3.080420 
diff Energy = 5.039023 
diff Energy = 4.859709 
diff Energy = 5.741806 
diff Energy = 0.853747 
diff Energy = 5.349280 
diff Energy = 10.365160 
diff Energy = 19.706282 
diff Energy = 8.582144 
Finish ICM step! 
iter = 16, loglik= 139342288.000000, dloglik=0.000069 
predict Y and V! 
diff Energy = 18.377621 
diff Energy = 1.009419 
diff Energy = 1.059711 
diff Energy = 0.086527 
diff Energy = 5.508642 
diff Energy = 7.004097 
diff Energy = 15.467777 
diff Energy = 5.024291 
diff Energy = 20.247388 
diff Energy = 2.345003 
Finish ICM step! 
iter = 17, loglik= 139350656.000000, dloglik=0.000060 
predict Y and V! 
diff Energy = 2.427288 
diff Energy = 0.351853 
diff Energy = 1.275323 
diff Energy = 3.384818 
diff Energy = 24.203967 
diff Energy = 4.746810 
diff Energy = 1.597315 
diff Energy = 7.495489 
diff Energy = 13.281422 
diff Energy = 17.380751 
Finish ICM step! 
iter = 18, loglik= 139357920.000000, dloglik=0.000052 
predict Y and V! 
diff Energy = 5.122059 
diff Energy = 7.354691 
diff Energy = 2.869643 
diff Energy = 3.997148 
diff Energy = 5.775550 
diff Energy = 5.956724 
diff Energy = 15.472316 
diff Energy = 9.260866 
diff Energy = 12.306617 
Finish ICM step! 
iter = 19, loglik= 139364448.000000, dloglik=0.000047 
predict Y and V! 
diff Energy = 2.887780 
diff Energy = 0.913741 
diff Energy = 1.294883 
diff Energy = 44.155781 
diff Energy = 4.671017 
diff Energy = 2.539895 
diff Energy = 0.056853 
diff Energy = 10.992167 
diff Energy = 12.949189 
Finish ICM step! 
iter = 20, loglik= 139370944.000000, dloglik=0.000047 
predict Y and V! 
diff Energy = 7.033704 
diff Energy = 0.129676 
diff Energy = 5.630242 
diff Energy = 5.092951 
diff Energy = 11.534402 
diff Energy = 0.647283 
diff Energy = 17.452377 
diff Energy = 13.122838 
Finish ICM step! 
iter = 21, loglik= 139377456.000000, dloglik=0.000047 
predict Y and V! 
diff Energy = 10.367220 
diff Energy = 0.789499 
diff Energy = 2.655830 
diff Energy = 8.997402 
diff Energy = 16.754836 
diff Energy = 1.708339 
diff Energy = 10.173816 
diff Energy = 3.048235 
diff Energy = 37.595024 
Finish ICM step! 
iter = 22, loglik= 139384688.000000, dloglik=0.000052 
predict Y and V! 
diff Energy = 1.894596 
diff Energy = 0.309120 
diff Energy = 2.129906 
diff Energy = 4.111719 
diff Energy = 11.497598 
diff Energy = 5.930433 
diff Energy = 11.627609 
diff Energy = 12.691369 
diff Energy = 9.188949 
diff Energy = 15.166631 
Finish ICM step! 
iter = 23, loglik= 139392512.000000, dloglik=0.000056 
predict Y and V! 
diff Energy = 1.483350 
diff Energy = 0.199127 
diff Energy = 5.145527 
diff Energy = 0.555597 
diff Energy = 24.867248 
diff Energy = 0.184866 
diff Energy = 9.403811 
diff Energy = 2.950591 
diff Energy = 1.166256 
Finish ICM step! 
iter = 24, loglik= 139400688.000000, dloglik=0.000059 
predict Y and V! 
diff Energy = 4.793100 
diff Energy = 1.457126 
diff Energy = 2.877691 
diff Energy = 50.127261 
diff Energy = 0.584909 
diff Energy = 31.932723 
diff Energy = 11.140378 
diff Energy = 2.193206 
diff Energy = 13.804843 
Finish ICM step! 
iter = 25, loglik= 139409120.000000, dloglik=0.000060 
predict Y and V! 
diff Energy = 4.511474 
diff Energy = 6.262356 
diff Energy = 2.034147 
diff Energy = 4.400569 
diff Energy = 1.113023 
diff Energy = 32.022421 
diff Energy = 2.076453 
diff Energy = 4.301587 
diff Energy = 2.534888 
Finish ICM step! 
iter = 26, loglik= 139418384.000000, dloglik=0.000066 
predict Y and V! 
diff Energy = 2.971542 
diff Energy = 5.100069 
diff Energy = 1.912214 
diff Energy = 11.885422 
diff Energy = 1.070460 
diff Energy = 66.685678 
diff Energy = 0.588582 
diff Energy = 13.889395 
diff Energy = 15.850306 
Finish ICM step! 
iter = 27, loglik= 139427840.000000, dloglik=0.000068 
predict Y and V! 
diff Energy = 7.260252 
diff Energy = 10.463636 
diff Energy = 0.019281 
diff Energy = 1.753042 
diff Energy = 2.898498 
diff Energy = 12.096768 
diff Energy = 17.667657 
diff Energy = 4.140647 
Finish ICM step! 
iter = 28, loglik= 139437488.000000, dloglik=0.000069 
predict Y and V! 
diff Energy = 5.080937 
diff Energy = 1.759613 
diff Energy = 1.516671 
diff Energy = 1.215083 
diff Energy = 12.582465 
diff Energy = 2.034624 
diff Energy = 2.384857 
diff Energy = 7.433352 
diff Energy = 1.740232 
Finish ICM step! 
iter = 29, loglik= 139447136.000000, dloglik=0.000069 
predict Y and V! 
diff Energy = 1.715971 
diff Energy = 7.911812 
diff Energy = 1.198251 
diff Energy = 8.103210 
diff Energy = 11.682387 
diff Energy = 5.353951 
diff Energy = 80.170165 
diff Energy = 0.457760 
Finish ICM step! 
iter = 30, loglik= 139456448.000000, dloglik=0.000067 
20148.459 sec elapsed
**** Job ends ****
Thu May  4 04:35:37 EDT 2023
